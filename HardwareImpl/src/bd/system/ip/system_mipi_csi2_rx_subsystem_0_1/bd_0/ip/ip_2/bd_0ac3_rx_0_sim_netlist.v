// Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2018.2 (lin64) Build 2258646 Thu Jun 14 20:02:38 MDT 2018
// Date        : Fri Feb  8 12:50:14 2019
// Host        : maks-pc running 64-bit Manjaro Linux
// Command     : write_verilog -force -mode funcsim
//               /home/maks/Documents/Zybo-Z7-20-base-linux/src/bd/system/ip/system_mipi_csi2_rx_subsystem_0_1/bd_0/ip/ip_2/bd_0ac3_rx_0_sim_netlist.v
// Design      : bd_0ac3_rx_0
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xc7z010clg400-1
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CHECK_LICENSE_TYPE = "bd_0ac3_rx_0,mipi_csi2_rx_ctrl_v1_0_8_top,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "mipi_csi2_rx_ctrl_v1_0_8_top,Vivado 2018.2" *) 
(* NotValidForBitStream *)
module bd_0ac3_rx_0
   (s_axi_aclk,
    s_axi_aresetn,
    s_axi_awaddr,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_araddr,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rvalid,
    s_axi_rready,
    cl_stopstate,
    cl_enable,
    cl_rxulpsclknot,
    dl0_rxbyteclkhs,
    dl0_rxdatahs,
    dl0_rxvalidhs,
    dl0_rxactivehs,
    dl0_rxsynchs,
    dl0_stopstate,
    dl0_shutdown,
    dl0_rxulpmesc,
    dl0_errsoths,
    dl0_errsotsynchs,
    dl0_erresc,
    dl0_errcontrol,
    dl1_rxbyteclkhs,
    dl1_rxdatahs,
    dl1_rxvalidhs,
    dl1_rxactivehs,
    dl1_rxsynchs,
    dl1_stopstate,
    dl1_shutdown,
    dl1_rxulpmesc,
    dl1_errsoths,
    dl1_errsotsynchs,
    dl1_erresc,
    dl1_errcontrol,
    m_axis_aclk,
    m_axis_aresetn,
    m_axis_tready,
    m_axis_tvalid,
    m_axis_tlast,
    m_axis_tdata,
    m_axis_tkeep,
    m_axis_tuser,
    m_axis_tdest,
    mdt_tv,
    mdt_tr,
    sdt_tv,
    sdt_tr,
    vfb_tv,
    vfb_tr,
    interrupt);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 s_axi_signal_clock CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME s_axi_signal_clock, ASSOCIATED_BUSIF s_axi, ASSOCIATED_RESET s_axi_aresetn, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN system_processing_system7_0_0_FCLK_CLK0" *) input s_axi_aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 s_axi_signal_reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME s_axi_signal_reset, POLARITY ACTIVE_LOW" *) input s_axi_aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi AWADDR" *) input [6:0]s_axi_awaddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi AWVALID" *) input s_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi AWREADY" *) output s_axi_awready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi WDATA" *) input [31:0]s_axi_wdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi WSTRB" *) input [3:0]s_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi WVALID" *) input s_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi WREADY" *) output s_axi_wready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi BRESP" *) output [1:0]s_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi BVALID" *) output s_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi BREADY" *) input s_axi_bready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi ARADDR" *) input [6:0]s_axi_araddr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi ARVALID" *) input s_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi ARREADY" *) output s_axi_arready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi RDATA" *) output [31:0]s_axi_rdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi RRESP" *) output [1:0]s_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi RVALID" *) output s_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 s_axi RREADY" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME s_axi, DATA_WIDTH 32, PROTOCOL AXI4LITE, FREQ_HZ 100000000, ID_WIDTH 0, ADDR_WIDTH 7, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 0, HAS_LOCK 0, HAS_PROT 0, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, MAX_BURST_LENGTH 1, PHASE 0.000, CLK_DOMAIN system_processing_system7_0_0_FCLK_CLK0, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) input s_axi_rready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if CL_STOPSTATE" *) input cl_stopstate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if CL_ENABLE" *) output cl_enable;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if CL_RXULPSCLKNOT" *) input cl_rxulpsclknot;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 dl0_rxbyteclkhs CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME dl0_rxbyteclkhs, FREQ_HZ 100000000.0, PHASE 0, CLK_DOMAIN bd_0ac3_phy_0_rxbyteclkhs" *) input dl0_rxbyteclkhs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_RXDATAHS" *) input [7:0]dl0_rxdatahs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_RXVALIDHS" *) input dl0_rxvalidhs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_RXACTIVEHS" *) input dl0_rxactivehs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_RXSYNCHS" *) input dl0_rxsynchs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_STOPSTATE" *) input dl0_stopstate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_ENABLE" *) output dl0_shutdown;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_RXULPSESC" *) input dl0_rxulpmesc;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_ERRSOTHS" *) input dl0_errsoths;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_ERRSOTSYNCHS" *) input dl0_errsotsynchs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_ERRESC" *) input dl0_erresc;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL0_ERRCONTROL" *) input dl0_errcontrol;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 dl1_rxbyteclkhs CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME dl1_rxbyteclkhs, FREQ_HZ 100000000.0, PHASE 0, CLK_DOMAIN bd_0ac3_phy_0_rxbyteclkhs" *) input dl1_rxbyteclkhs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_RXDATAHS" *) input [7:0]dl1_rxdatahs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_RXVALIDHS" *) input dl1_rxvalidhs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_RXACTIVEHS" *) input dl1_rxactivehs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_RXSYNCHS" *) input dl1_rxsynchs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_STOPSTATE" *) input dl1_stopstate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_ENABLE" *) output dl1_shutdown;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_RXULPSESC" *) input dl1_rxulpmesc;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_ERRSOTHS" *) input dl1_errsoths;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_ERRSOTSYNCHS" *) input dl1_errsotsynchs;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_ERRESC" *) input dl1_erresc;
  (* X_INTERFACE_INFO = "xilinx.com:interface:rx_mipi_ppi_if:1.0 rx_mipi_ppi_if DL1_ERRCONTROL" *) input dl1_errcontrol;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 m_axis_signal_clock CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME m_axis_signal_clock, ASSOCIATED_BUSIF m_axis:m_axis_eni, ASSOCIATED_RESET m_axis_aresetn, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN system_processing_system7_0_0_FCLK_CLK0" *) input m_axis_aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 m_axis_signal_reset RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME m_axis_signal_reset, POLARITY ACTIVE_LOW" *) input m_axis_aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TREADY" *) input m_axis_tready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TVALID" *) output m_axis_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TLAST" *) output m_axis_tlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TDATA" *) output [63:0]m_axis_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TKEEP" *) output [7:0]m_axis_tkeep;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TUSER" *) output [95:0]m_axis_tuser;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 m_axis TDEST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME m_axis, TDATA_NUM_BYTES 8, TDEST_WIDTH 2, TID_WIDTH 0, TUSER_WIDTH 96, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 1, HAS_TLAST 1, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN system_processing_system7_0_0_FCLK_CLK0, LAYERED_METADATA undef" *) output [1:0]m_axis_tdest;
  input mdt_tv;
  input mdt_tr;
  input sdt_tv;
  input sdt_tr;
  input vfb_tv;
  input vfb_tr;
  (* X_INTERFACE_INFO = "xilinx.com:signal:interrupt:1.0 signal_interrupt INTERRUPT" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME signal_interrupt, SENSITIVITY LEVEL_HIGH, PortWidth 1" *) output interrupt;

  wire cl_enable;
  wire cl_rxulpsclknot;
  wire cl_stopstate;
  wire dl0_errcontrol;
  wire dl0_erresc;
  wire dl0_errsoths;
  wire dl0_errsotsynchs;
  wire dl0_rxactivehs;
  wire dl0_rxbyteclkhs;
  wire [7:0]dl0_rxdatahs;
  wire dl0_rxsynchs;
  wire dl0_rxulpmesc;
  wire dl0_rxvalidhs;
  wire dl0_shutdown;
  wire dl0_stopstate;
  wire dl1_errcontrol;
  wire dl1_erresc;
  wire dl1_errsoths;
  wire dl1_errsotsynchs;
  wire dl1_rxactivehs;
  wire dl1_rxbyteclkhs;
  wire [7:0]dl1_rxdatahs;
  wire dl1_rxsynchs;
  wire dl1_rxulpmesc;
  wire dl1_rxvalidhs;
  wire dl1_shutdown;
  wire dl1_stopstate;
  wire interrupt;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire [63:0]m_axis_tdata;
  wire [1:0]m_axis_tdest;
  wire [7:0]m_axis_tkeep;
  wire m_axis_tlast;
  wire m_axis_tready;
  wire [95:0]m_axis_tuser;
  wire m_axis_tvalid;
  wire mdt_tr;
  wire mdt_tv;
  wire s_axi_aclk;
  wire [6:0]s_axi_araddr;
  wire s_axi_aresetn;
  wire s_axi_arready;
  wire s_axi_arvalid;
  wire [6:0]s_axi_awaddr;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire [1:0]s_axi_bresp;
  wire s_axi_bvalid;
  wire [31:0]s_axi_rdata;
  wire s_axi_rready;
  wire [1:0]s_axi_rresp;
  wire s_axi_rvalid;
  wire [31:0]s_axi_wdata;
  wire s_axi_wready;
  wire [3:0]s_axi_wstrb;
  wire s_axi_wvalid;
  wire sdt_tr;
  wire sdt_tv;
  wire vfb_tr;
  wire vfb_tv;
  wire NLW_inst_dl2_shutdown_UNCONNECTED;
  wire NLW_inst_dl3_shutdown_UNCONNECTED;
  wire NLW_inst_m_axis_eni_tlast_UNCONNECTED;
  wire NLW_inst_m_axis_eni_tvalid_UNCONNECTED;
  wire [63:0]NLW_inst_m_axis_eni_tdata_UNCONNECTED;
  wire [1:0]NLW_inst_m_axis_eni_tdest_UNCONNECTED;
  wire [7:0]NLW_inst_m_axis_eni_tkeep_UNCONNECTED;
  wire [95:0]NLW_inst_m_axis_eni_tuser_UNCONNECTED;

  (* AXIS_FIFO_DCNT_WIDTH = "12" *) 
  (* AXIS_FIFO_DEPTH = "4096" *) 
  (* AXIS_TDATA_WIDTH = "64" *) 
  (* AXIS_TDEST_WIDTH = "2" *) 
  (* AXIS_TUSER_WIDTH = "96" *) 
  (* CSI_EN_VC_SUPPORT = "1" *) 
  (* CSI_FIXED_VC = "0" *) 
  (* CSI_INV_SHUTDOWN = "1" *) 
  (* CSI_LANES = "2" *) 
  (* CSI_OFFLOAD_NONIMAGE = "0" *) 
  (* CSI_VC_OFF_0 = "1" *) 
  (* CSI_VC_OFF_1 = "2" *) 
  (* CSI_VC_OFF_2 = "3" *) 
  (* C_CSI2RX_DBG = "0" *) 
  (* C_CSI_FILTER_USERDATATYPE = "0" *) 
  (* C_CSI_OPT1_REGS = "0" *) 
  (* C_CSI_OPT2_CRC = "0" *) 
  (* C_CSI_OPT3_FIXEDLANES = "1" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_IS_EVAL = "0" *) 
  (* C_MIPI_SLV_INT = "0" *) 
  (* C_S_AXI_ADDR_WIDTH = "7" *) 
  (* C_S_AXI_DATA_WIDTH = "32" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* VC_H = "4" *) 
  (* VC_L = "0" *) 
  (* VC_NUMS = "4" *) 
  bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_top inst
       (.cl_enable(cl_enable),
        .cl_rxulpsclknot(cl_rxulpsclknot),
        .cl_stopstate(cl_stopstate),
        .dl0_errcontrol(dl0_errcontrol),
        .dl0_erresc(dl0_erresc),
        .dl0_errsoths(dl0_errsoths),
        .dl0_errsotsynchs(dl0_errsotsynchs),
        .dl0_rxactivehs(dl0_rxactivehs),
        .dl0_rxbyteclkhs(dl0_rxbyteclkhs),
        .dl0_rxdatahs(dl0_rxdatahs),
        .dl0_rxsynchs(dl0_rxsynchs),
        .dl0_rxulpmesc(dl0_rxulpmesc),
        .dl0_rxvalidhs(dl0_rxvalidhs),
        .dl0_shutdown(dl0_shutdown),
        .dl0_stopstate(dl0_stopstate),
        .dl1_errcontrol(dl1_errcontrol),
        .dl1_erresc(dl1_erresc),
        .dl1_errsoths(dl1_errsoths),
        .dl1_errsotsynchs(dl1_errsotsynchs),
        .dl1_rxactivehs(dl1_rxactivehs),
        .dl1_rxbyteclkhs(dl1_rxbyteclkhs),
        .dl1_rxdatahs(dl1_rxdatahs),
        .dl1_rxsynchs(dl1_rxsynchs),
        .dl1_rxulpmesc(dl1_rxulpmesc),
        .dl1_rxvalidhs(dl1_rxvalidhs),
        .dl1_shutdown(dl1_shutdown),
        .dl1_stopstate(dl1_stopstate),
        .dl2_errcontrol(1'b0),
        .dl2_erresc(1'b0),
        .dl2_errsoths(1'b0),
        .dl2_errsotsynchs(1'b0),
        .dl2_rxactivehs(1'b0),
        .dl2_rxbyteclkhs(1'b0),
        .dl2_rxdatahs({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .dl2_rxsynchs(1'b0),
        .dl2_rxulpmesc(1'b0),
        .dl2_rxvalidhs(1'b0),
        .dl2_shutdown(NLW_inst_dl2_shutdown_UNCONNECTED),
        .dl2_stopstate(1'b1),
        .dl3_errcontrol(1'b0),
        .dl3_erresc(1'b0),
        .dl3_errsoths(1'b0),
        .dl3_errsotsynchs(1'b0),
        .dl3_rxactivehs(1'b0),
        .dl3_rxbyteclkhs(1'b0),
        .dl3_rxdatahs({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .dl3_rxsynchs(1'b0),
        .dl3_rxulpmesc(1'b0),
        .dl3_rxvalidhs(1'b0),
        .dl3_shutdown(NLW_inst_dl3_shutdown_UNCONNECTED),
        .dl3_stopstate(1'b1),
        .interrupt(interrupt),
        .m_axis_aclk(m_axis_aclk),
        .m_axis_aresetn(m_axis_aresetn),
        .m_axis_eni_tdata(NLW_inst_m_axis_eni_tdata_UNCONNECTED[63:0]),
        .m_axis_eni_tdest(NLW_inst_m_axis_eni_tdest_UNCONNECTED[1:0]),
        .m_axis_eni_tkeep(NLW_inst_m_axis_eni_tkeep_UNCONNECTED[7:0]),
        .m_axis_eni_tlast(NLW_inst_m_axis_eni_tlast_UNCONNECTED),
        .m_axis_eni_tready(1'b0),
        .m_axis_eni_tuser(NLW_inst_m_axis_eni_tuser_UNCONNECTED[95:0]),
        .m_axis_eni_tvalid(NLW_inst_m_axis_eni_tvalid_UNCONNECTED),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tdest(m_axis_tdest),
        .m_axis_tkeep(m_axis_tkeep),
        .m_axis_tlast(m_axis_tlast),
        .m_axis_tready(m_axis_tready),
        .m_axis_tuser(m_axis_tuser),
        .m_axis_tvalid(m_axis_tvalid),
        .mdt_tr(mdt_tr),
        .mdt_tv(mdt_tv),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,s_axi_araddr}),
        .s_axi_aresetn(s_axi_aresetn),
        .s_axi_arready(s_axi_arready),
        .s_axi_arvalid(s_axi_arvalid),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,s_axi_awaddr}),
        .s_axi_awready(s_axi_awready),
        .s_axi_awvalid(s_axi_awvalid),
        .s_axi_bready(s_axi_bready),
        .s_axi_bresp(s_axi_bresp),
        .s_axi_bvalid(s_axi_bvalid),
        .s_axi_rdata(s_axi_rdata),
        .s_axi_rready(s_axi_rready),
        .s_axi_rresp(s_axi_rresp),
        .s_axi_rvalid(s_axi_rvalid),
        .s_axi_wdata(s_axi_wdata),
        .s_axi_wready(s_axi_wready),
        .s_axi_wstrb(s_axi_wstrb),
        .s_axi_wvalid(s_axi_wvalid),
        .sdt_tr(sdt_tr),
        .sdt_tv(sdt_tv),
        .vfb_tr(vfb_tr),
        .vfb_tv(vfb_tv));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_fc13" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_fc13
   (D,
    full,
    almost_full,
    empty,
    lp_data,
    m_axis_aclk,
    srst,
    din,
    wr_en,
    rd_en,
    m_axis_aresetn,
    core_men_r2c);
  output [67:0]D;
  output full;
  output almost_full;
  output empty;
  output lp_data;
  input m_axis_aclk;
  input srst;
  input [67:0]din;
  input wr_en;
  input rd_en;
  input m_axis_aresetn;
  input core_men_r2c;

  wire [67:0]D;
  wire almost_full;
  wire core_men_r2c;
  wire [67:0]din;
  wire empty;
  wire full;
  wire lbuf_n_71;
  wire lbuf_n_72;
  wire lbuf_n_73;
  wire lbuf_n_74;
  wire lbuf_n_75;
  wire lbuf_n_76;
  wire lbuf_n_77;
  wire lbuf_n_78;
  wire lbuf_n_79;
  wire lbuf_n_80;
  wire lbuf_n_81;
  wire lbuf_n_82;
  wire lp_data;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire NLW_lbuf_prog_full_UNCONNECTED;

  LUT3 #(
    .INIT(8'hBF)) 
    \LP_CNTS[0].lp_data[0]_i_1 
       (.I0(full),
        .I1(m_axis_aresetn),
        .I2(core_men_r2c),
        .O(lp_data));
  (* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_8_fc_644096,fifo_generator_v13_2_2,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_fc_644096 lbuf
       (.almost_full(almost_full),
        .clk(m_axis_aclk),
        .data_count({lbuf_n_71,lbuf_n_72,lbuf_n_73,lbuf_n_74,lbuf_n_75,lbuf_n_76,lbuf_n_77,lbuf_n_78,lbuf_n_79,lbuf_n_80,lbuf_n_81,lbuf_n_82}),
        .din(din),
        .dout(D),
        .empty(empty),
        .full(full),
        .prog_full(NLW_lbuf_prog_full_UNCONNECTED),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en));
endmodule

(* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_8_fc_644096,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_fc_644096" *) 
(* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_fc_644096
   (clk,
    srst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    almost_full,
    empty,
    data_count,
    prog_full);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  input srst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [67:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [67:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE ALMOST_FULL" *) output almost_full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output [11:0]data_count;
  output prog_full;

  wire almost_full;
  wire clk;
  wire [11:0]data_count;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_en;
  wire srst;
  wire wr_en;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [12:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [12:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "12" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "68" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "68" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "1" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "1" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "0" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "1" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "0" *) 
  (* C_PRELOAD_REGS = "1" *) 
  (* C_PRIM_FIFO_TYPE = "4kx9" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "4093" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "4092" *) 
  (* C_PROG_FULL_TYPE = "1" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "13" *) 
  (* C_RD_DEPTH = "4096" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "12" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "1" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "1" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "13" *) 
  (* C_WR_DEPTH = "4096" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "12" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  bd_0ac3_rx_0_fifo_generator_v13_2_2__parameterized3 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(almost_full),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(data_count),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(prog_full),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[12:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(1'b0),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(srst),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[12:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
endmodule

(* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_8_fifo0,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_fifo0" *) 
(* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_fifo0
   (clk,
    rst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  input rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [11:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [11:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [4:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [4:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "5" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "12" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "12" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "2" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "0" *) 
  (* C_PRELOAD_REGS = "1" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "14" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "5" *) 
  (* C_RD_DEPTH = "16" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "4" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "1" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "5" *) 
  (* C_WR_DEPTH = "16" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "4" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  bd_0ac3_rx_0_fifo_generator_v13_2_2 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(NLW_U0_data_count_UNCONNECTED[4:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[4:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[4:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
endmodule

(* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_8_fifo0,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_fifo0" *) 
(* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_fifo0__xdcDup__1
   (clk,
    rst,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 core_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME core_clk, FREQ_HZ 100000000, PHASE 0.000" *) input clk;
  input rst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [11:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [11:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [4:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [4:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "1" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "5" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "12" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "12" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "2" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "0" *) 
  (* C_PRELOAD_REGS = "1" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "14" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "5" *) 
  (* C_RD_DEPTH = "16" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "4" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "1" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "5" *) 
  (* C_WR_DEPTH = "16" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "4" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  bd_0ac3_rx_0_fifo_generator_v13_2_2__xdcDup__1 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(clk),
        .data_count(NLW_U0_data_count_UNCONNECTED[4:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[4:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[4:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
endmodule

(* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_8_fifo1,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_fifo1" *) 
(* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_fifo1
   (rst,
    wr_clk,
    rd_clk,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty);
  input rst;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 write_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME write_clk, FREQ_HZ 100000000, PHASE 0.000" *) input wr_clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 read_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME read_clk, FREQ_HZ 100000000, PHASE 0.000" *) input rd_clk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [41:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [41:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;

  wire [41:0]din;
  wire [41:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [4:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [4:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "0" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "5" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "42" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "42" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "2" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "2" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x72" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "29" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "28" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "5" *) 
  (* C_RD_DEPTH = "32" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "5" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "5" *) 
  (* C_WR_DEPTH = "32" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "5" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  bd_0ac3_rx_0_fifo_generator_v13_2_2__parameterized1 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[4:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(rd_clk),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[4:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[4:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
endmodule

(* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_8_fifo2,fifo_generator_v13_2_2,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_fifo2" *) 
(* X_CORE_INFO = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_fifo2
   (rst,
    wr_clk,
    rd_clk,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty);
  input rst;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 write_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME write_clk, FREQ_HZ 100000000, PHASE 0.000" *) input wr_clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 read_clk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME read_clk, FREQ_HZ 100000000, PHASE 0.000" *) input rd_clk;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [23:0]din;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [23:0]dout;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* X_INTERFACE_INFO = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;

  wire [23:0]din;
  wire [23:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [4:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [4:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "0" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "5" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "24" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "24" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_FULL_FLAGS_RST_VAL = "0" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "2" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "2" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "29" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "28" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "5" *) 
  (* C_RD_DEPTH = "32" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "5" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "5" *) 
  (* C_WR_DEPTH = "32" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "5" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  bd_0ac3_rx_0_fifo_generator_v13_2_2__parameterized5 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[4:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(rd_clk),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[4:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[4:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_array_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* WIDTH = "2" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ARRAY_SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_array_single
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input [1:0]src_in;
  input dest_clk;
  output [1:0]dest_out;

  wire [1:0]async_path_bit;
  wire dest_clk;
  wire src_clk;
  wire [1:0]src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [1:0]\syncstages_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [1:0]\syncstages_ff[1] ;

  assign dest_out[1:0] = \syncstages_ff[1] ;
  FDRE \src_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[0]),
        .Q(async_path_bit[0]),
        .R(1'b0));
  FDRE \src_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[1]),
        .Q(async_path_bit[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[0]),
        .Q(\syncstages_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[1]),
        .Q(\syncstages_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [0]),
        .Q(\syncstages_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [1]),
        .Q(\syncstages_ff[1] [1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_array_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* WIDTH = "22" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ARRAY_SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_array_single__parameterized0
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input [21:0]src_in;
  input dest_clk;
  output [21:0]dest_out;

  wire [21:0]async_path_bit;
  wire dest_clk;
  wire src_clk;
  wire [21:0]src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [21:0]\syncstages_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [21:0]\syncstages_ff[1] ;

  assign dest_out[21:0] = \syncstages_ff[1] ;
  FDRE \src_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[0]),
        .Q(async_path_bit[0]),
        .R(1'b0));
  FDRE \src_ff_reg[10] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[10]),
        .Q(async_path_bit[10]),
        .R(1'b0));
  FDRE \src_ff_reg[11] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[11]),
        .Q(async_path_bit[11]),
        .R(1'b0));
  FDRE \src_ff_reg[12] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[12]),
        .Q(async_path_bit[12]),
        .R(1'b0));
  FDRE \src_ff_reg[13] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[13]),
        .Q(async_path_bit[13]),
        .R(1'b0));
  FDRE \src_ff_reg[14] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[14]),
        .Q(async_path_bit[14]),
        .R(1'b0));
  FDRE \src_ff_reg[15] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[15]),
        .Q(async_path_bit[15]),
        .R(1'b0));
  FDRE \src_ff_reg[16] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[16]),
        .Q(async_path_bit[16]),
        .R(1'b0));
  FDRE \src_ff_reg[17] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[17]),
        .Q(async_path_bit[17]),
        .R(1'b0));
  FDRE \src_ff_reg[18] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[18]),
        .Q(async_path_bit[18]),
        .R(1'b0));
  FDRE \src_ff_reg[19] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[19]),
        .Q(async_path_bit[19]),
        .R(1'b0));
  FDRE \src_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[1]),
        .Q(async_path_bit[1]),
        .R(1'b0));
  FDRE \src_ff_reg[20] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[20]),
        .Q(async_path_bit[20]),
        .R(1'b0));
  FDRE \src_ff_reg[21] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[21]),
        .Q(async_path_bit[21]),
        .R(1'b0));
  FDRE \src_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[2]),
        .Q(async_path_bit[2]),
        .R(1'b0));
  FDRE \src_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[3]),
        .Q(async_path_bit[3]),
        .R(1'b0));
  FDRE \src_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[4]),
        .Q(async_path_bit[4]),
        .R(1'b0));
  FDRE \src_ff_reg[5] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[5]),
        .Q(async_path_bit[5]),
        .R(1'b0));
  FDRE \src_ff_reg[6] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[6]),
        .Q(async_path_bit[6]),
        .R(1'b0));
  FDRE \src_ff_reg[7] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[7]),
        .Q(async_path_bit[7]),
        .R(1'b0));
  FDRE \src_ff_reg[8] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[8]),
        .Q(async_path_bit[8]),
        .R(1'b0));
  FDRE \src_ff_reg[9] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in[9]),
        .Q(async_path_bit[9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[0]),
        .Q(\syncstages_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][10] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[10]),
        .Q(\syncstages_ff[0] [10]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][11] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[11]),
        .Q(\syncstages_ff[0] [11]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][12] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[12]),
        .Q(\syncstages_ff[0] [12]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][13] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[13]),
        .Q(\syncstages_ff[0] [13]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][14] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[14]),
        .Q(\syncstages_ff[0] [14]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][15] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[15]),
        .Q(\syncstages_ff[0] [15]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][16] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[16]),
        .Q(\syncstages_ff[0] [16]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][17] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[17]),
        .Q(\syncstages_ff[0] [17]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][18] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[18]),
        .Q(\syncstages_ff[0] [18]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][19] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[19]),
        .Q(\syncstages_ff[0] [19]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[1]),
        .Q(\syncstages_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][20] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[20]),
        .Q(\syncstages_ff[0] [20]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][21] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[21]),
        .Q(\syncstages_ff[0] [21]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[2]),
        .Q(\syncstages_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[3]),
        .Q(\syncstages_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[4]),
        .Q(\syncstages_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[5]),
        .Q(\syncstages_ff[0] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[6]),
        .Q(\syncstages_ff[0] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[7]),
        .Q(\syncstages_ff[0] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[8]),
        .Q(\syncstages_ff[0] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[9]),
        .Q(\syncstages_ff[0] [9]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [0]),
        .Q(\syncstages_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][10] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [10]),
        .Q(\syncstages_ff[1] [10]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][11] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [11]),
        .Q(\syncstages_ff[1] [11]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][12] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [12]),
        .Q(\syncstages_ff[1] [12]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][13] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [13]),
        .Q(\syncstages_ff[1] [13]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][14] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [14]),
        .Q(\syncstages_ff[1] [14]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][15] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [15]),
        .Q(\syncstages_ff[1] [15]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][16] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [16]),
        .Q(\syncstages_ff[1] [16]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][17] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [17]),
        .Q(\syncstages_ff[1] [17]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][18] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [18]),
        .Q(\syncstages_ff[1] [18]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][19] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [19]),
        .Q(\syncstages_ff[1] [19]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [1]),
        .Q(\syncstages_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][20] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [20]),
        .Q(\syncstages_ff[1] [20]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][21] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [21]),
        .Q(\syncstages_ff[1] [21]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [2]),
        .Q(\syncstages_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [3]),
        .Q(\syncstages_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [4]),
        .Q(\syncstages_ff[1] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [5]),
        .Q(\syncstages_ff[1] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [6]),
        .Q(\syncstages_ff[1] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [7]),
        .Q(\syncstages_ff[1] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [8]),
        .Q(\syncstages_ff[1] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][9] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [9]),
        .Q(\syncstages_ff[1] [9]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_array_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* WIDTH = "2" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ARRAY_SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_array_single__parameterized1
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input [1:0]src_in;
  input dest_clk;
  output [1:0]dest_out;

  wire [1:0]async_path_bit;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [1:0]\syncstages_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [1:0]\syncstages_ff[1] ;

  assign async_path_bit = src_in[1:0];
  assign dest_out[1:0] = \syncstages_ff[1] ;
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[0]),
        .Q(\syncstages_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[1]),
        .Q(\syncstages_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [0]),
        .Q(\syncstages_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [1]),
        .Q(\syncstages_ff[1] [1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_array_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* WIDTH = "2" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ARRAY_SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_array_single__parameterized1__1
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input [1:0]src_in;
  input dest_clk;
  output [1:0]dest_out;

  wire [1:0]async_path_bit;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [1:0]\syncstages_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [1:0]\syncstages_ff[1] ;

  assign async_path_bit = src_in[1:0];
  assign dest_out[1:0] = \syncstages_ff[1] ;
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[0]),
        .Q(\syncstages_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[1]),
        .Q(\syncstages_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [0]),
        .Q(\syncstages_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [1]),
        .Q(\syncstages_ff[1] [1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_array_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* WIDTH = "2" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ARRAY_SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_array_single__parameterized1__2
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input [1:0]src_in;
  input dest_clk;
  output [1:0]dest_out;

  wire [1:0]async_path_bit;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [1:0]\syncstages_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [1:0]\syncstages_ff[1] ;

  assign async_path_bit = src_in[1:0];
  assign dest_out[1:0] = \syncstages_ff[1] ;
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[0]),
        .Q(\syncstages_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[1]),
        .Q(\syncstages_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [0]),
        .Q(\syncstages_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [1]),
        .Q(\syncstages_ff[1] [1]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_0ac3_rx_0_xpm_cdc_async_rst
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_0ac3_rx_0_xpm_cdc_async_rst__3
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_0ac3_rx_0_xpm_cdc_async_rst__4
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_0ac3_rx_0_xpm_cdc_async_rst__5
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_0ac3_rx_0_xpm_cdc_async_rst__6
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_0ac3_rx_0_xpm_cdc_async_rst__7
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_0ac3_rx_0_xpm_cdc_async_rst__parameterized0
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire reset_pol;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  LUT1 #(
    .INIT(2'h1)) 
    \arststages_ff[1]_i_1 
       (.I0(src_arst),
        .O(reset_pol));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDCE #(
    .INIT(1'b1)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .CLR(reset_pol),
        .D(1'b1),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDCE #(
    .INIT(1'b1)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .CLR(reset_pol),
        .D(arststages_ff[0]),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_0ac3_rx_0_xpm_cdc_async_rst__parameterized0__1
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire reset_pol;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  LUT1 #(
    .INIT(2'h1)) 
    \arststages_ff[1]_i_1 
       (.I0(src_arst),
        .O(reset_pol));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDCE #(
    .INIT(1'b1)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .CLR(reset_pol),
        .D(1'b1),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDCE #(
    .INIT(1'b1)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .CLR(reset_pol),
        .D(arststages_ff[0]),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_0ac3_rx_0_xpm_cdc_async_rst__parameterized0__2
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire reset_pol;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  LUT1 #(
    .INIT(2'h1)) 
    \arststages_ff[1]_i_1 
       (.I0(src_arst),
        .O(reset_pol));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDCE #(
    .INIT(1'b1)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .CLR(reset_pol),
        .D(1'b1),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDCE #(
    .INIT(1'b1)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .CLR(reset_pol),
        .D(arststages_ff[0]),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b0" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module bd_0ac3_rx_0_xpm_cdc_async_rst__parameterized0__3
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire reset_pol;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  LUT1 #(
    .INIT(2'h1)) 
    \arststages_ff[1]_i_1 
       (.I0(src_arst),
        .O(reset_pol));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDCE #(
    .INIT(1'b1)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .CLR(reset_pol),
        .D(1'b1),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDCE #(
    .INIT(1'b1)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .CLR(reset_pol),
        .D(arststages_ff[0]),
        .Q(arststages_ff[1]));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "5" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module bd_0ac3_rx_0_xpm_cdc_gray
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [4:0]src_in_bin;
  input dest_clk;
  output [4:0]dest_out_bin;

  wire [4:0]async_path;
  wire [3:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [4:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [4:0]\dest_graysync_ff[1] ;
  wire [4:0]dest_out_bin;
  wire [3:0]gray_enc;
  wire src_clk;
  wire [4:0]src_in_bin;

  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [0]),
        .I1(\dest_graysync_ff[1] [2]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [3]),
        .I4(\dest_graysync_ff[1] [1]),
        .O(binval[0]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(\dest_graysync_ff[1] [3]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [2]),
        .O(binval[1]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[3]_i_1 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [4]),
        .O(binval[3]));
  FDRE \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [4]),
        .Q(dest_out_bin[4]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[3]),
        .O(gray_enc[3]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[4]),
        .Q(async_path[4]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "5" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module bd_0ac3_rx_0_xpm_cdc_gray__2
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [4:0]src_in_bin;
  input dest_clk;
  output [4:0]dest_out_bin;

  wire [4:0]async_path;
  wire [3:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [4:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [4:0]\dest_graysync_ff[1] ;
  wire [4:0]dest_out_bin;
  wire [3:0]gray_enc;
  wire src_clk;
  wire [4:0]src_in_bin;

  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [0]),
        .I1(\dest_graysync_ff[1] [2]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [3]),
        .I4(\dest_graysync_ff[1] [1]),
        .O(binval[0]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(\dest_graysync_ff[1] [3]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [2]),
        .O(binval[1]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[3]_i_1 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [4]),
        .O(binval[3]));
  FDRE \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [4]),
        .Q(dest_out_bin[4]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[3]),
        .O(gray_enc[3]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[4]),
        .Q(async_path[4]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "5" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module bd_0ac3_rx_0_xpm_cdc_gray__3
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [4:0]src_in_bin;
  input dest_clk;
  output [4:0]dest_out_bin;

  wire [4:0]async_path;
  wire [3:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [4:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [4:0]\dest_graysync_ff[1] ;
  wire [4:0]dest_out_bin;
  wire [3:0]gray_enc;
  wire src_clk;
  wire [4:0]src_in_bin;

  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [0]),
        .I1(\dest_graysync_ff[1] [2]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [3]),
        .I4(\dest_graysync_ff[1] [1]),
        .O(binval[0]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(\dest_graysync_ff[1] [3]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [2]),
        .O(binval[1]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[3]_i_1 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [4]),
        .O(binval[3]));
  FDRE \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [4]),
        .Q(dest_out_bin[4]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[3]),
        .O(gray_enc[3]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[4]),
        .Q(async_path[4]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "5" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module bd_0ac3_rx_0_xpm_cdc_gray__4
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [4:0]src_in_bin;
  input dest_clk;
  output [4:0]dest_out_bin;

  wire [4:0]async_path;
  wire [3:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [4:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [4:0]\dest_graysync_ff[1] ;
  wire [4:0]dest_out_bin;
  wire [3:0]gray_enc;
  wire src_clk;
  wire [4:0]src_in_bin;

  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [0]),
        .I1(\dest_graysync_ff[1] [2]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [3]),
        .I4(\dest_graysync_ff[1] [1]),
        .O(binval[0]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(\dest_graysync_ff[1] [3]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [2]),
        .O(binval[1]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[3]_i_1 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [4]),
        .O(binval[3]));
  FDRE \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  FDRE \dest_out_bin_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [4]),
        .Q(dest_out_bin[4]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[3]),
        .O(gray_enc[3]));
  FDRE \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[4]),
        .Q(async_path[4]),
        .R(1'b0));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__90 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__89 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "2" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__parameterized0
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [1:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [1:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire [1:0]dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire [1:0]src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire \src_hsdata_ff[1]_i_1_n_0 ;
  wire [1:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[1:0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[0]),
        .Q(dest_hsdata_ff[0]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[1] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[1]),
        .Q(dest_hsdata_ff[1]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_in[0]),
        .I1(src_sendd_ff),
        .I2(src_hsdata_ff[0]),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \src_hsdata_ff[1]_i_1 
       (.I0(src_in[1]),
        .I1(src_sendd_ff),
        .I2(src_hsdata_ff[1]),
        .O(\src_hsdata_ff[1]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff[0]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[1]_i_1_n_0 ),
        .Q(src_hsdata_ff[1]),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__29 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__28 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "24" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__parameterized1
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [23:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [23:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire [23:0]dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire p_0_in;
  wire src_clk;
  wire [23:0]src_hsdata_ff;
  wire [23:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[23:0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[0]),
        .Q(dest_hsdata_ff[0]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[10] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[10]),
        .Q(dest_hsdata_ff[10]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[11] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[11]),
        .Q(dest_hsdata_ff[11]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[12] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[12]),
        .Q(dest_hsdata_ff[12]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[13] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[13]),
        .Q(dest_hsdata_ff[13]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[14] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[14]),
        .Q(dest_hsdata_ff[14]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[15] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[15]),
        .Q(dest_hsdata_ff[15]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[16] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[16]),
        .Q(dest_hsdata_ff[16]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[17] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[17]),
        .Q(dest_hsdata_ff[17]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[18] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[18]),
        .Q(dest_hsdata_ff[18]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[19] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[19]),
        .Q(dest_hsdata_ff[19]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[1] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[1]),
        .Q(dest_hsdata_ff[1]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[20] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[20]),
        .Q(dest_hsdata_ff[20]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[21] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[21]),
        .Q(dest_hsdata_ff[21]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[22] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[22]),
        .Q(dest_hsdata_ff[22]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[23] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[23]),
        .Q(dest_hsdata_ff[23]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[2] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[2]),
        .Q(dest_hsdata_ff[2]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[3] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[3]),
        .Q(dest_hsdata_ff[3]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[4] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[4]),
        .Q(dest_hsdata_ff[4]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[5] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[5]),
        .Q(dest_hsdata_ff[5]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[6] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[6]),
        .Q(dest_hsdata_ff[6]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[7] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[7]),
        .Q(dest_hsdata_ff[7]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[8] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[8]),
        .Q(dest_hsdata_ff[8]),
        .R(1'b0));
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[9] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff[9]),
        .Q(dest_hsdata_ff[9]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \src_hsdata_ff[23]_i_1 
       (.I0(src_sendd_ff),
        .O(p_0_in));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[0]),
        .Q(src_hsdata_ff[0]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[10] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[10]),
        .Q(src_hsdata_ff[10]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[11] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[11]),
        .Q(src_hsdata_ff[11]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[12] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[12]),
        .Q(src_hsdata_ff[12]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[13] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[13]),
        .Q(src_hsdata_ff[13]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[14] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[14]),
        .Q(src_hsdata_ff[14]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[15] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[15]),
        .Q(src_hsdata_ff[15]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[16] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[16]),
        .Q(src_hsdata_ff[16]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[17] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[17]),
        .Q(src_hsdata_ff[17]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[18] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[18]),
        .Q(src_hsdata_ff[18]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[19] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[19]),
        .Q(src_hsdata_ff[19]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[1] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[1]),
        .Q(src_hsdata_ff[1]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[20] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[20]),
        .Q(src_hsdata_ff[20]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[21] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[21]),
        .Q(src_hsdata_ff[21]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[22] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[22]),
        .Q(src_hsdata_ff[22]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[23] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[23]),
        .Q(src_hsdata_ff[23]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[2] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[2]),
        .Q(src_hsdata_ff[2]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[3] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[3]),
        .Q(src_hsdata_ff[3]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[4] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[4]),
        .Q(src_hsdata_ff[4]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[5] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[5]),
        .Q(src_hsdata_ff[5]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[6] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[6]),
        .Q(src_hsdata_ff[6]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[7] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[7]),
        .Q(src_hsdata_ff[7]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[8] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[8]),
        .Q(src_hsdata_ff[8]),
        .R(1'b0));
  FDRE \src_hsdata_ff_reg[9] 
       (.C(src_clk),
        .CE(p_0_in),
        .D(src_in[9]),
        .Q(src_hsdata_ff[9]),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__97 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__96 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__1
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__50 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__49 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__10
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__68 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__67 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__11
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__70 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__69 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__12
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__72 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__71 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__13
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__74 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__73 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__14
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__76 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__75 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__15
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__78 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__77 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__16
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__80 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__79 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__17
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__82 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__81 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__18
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__84 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__83 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__19
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__86 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__85 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__2
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__52 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__51 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__20
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__88 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__87 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__3
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__54 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__53 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__4
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__56 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__55 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__5
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__58 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__57 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__6
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__60 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__59 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__7
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__62 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__61 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__8
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__64 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__63 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_EXT_HSK = "0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* ORIG_REF_NAME = "xpm_cdc_handshake" *) (* SIM_ASSERT_CHK = "0" *) (* SRC_SYNC_FF = "2" *) 
(* VERSION = "0" *) (* WIDTH = "1" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "HANDSHAKE" *) 
module bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__9
   (src_clk,
    src_in,
    src_send,
    src_rcv,
    dest_clk,
    dest_out,
    dest_req,
    dest_ack);
  input src_clk;
  input [0:0]src_in;
  input src_send;
  output src_rcv;
  input dest_clk;
  output [0:0]dest_out;
  output dest_req;
  input dest_ack;

  wire dest_clk;
  (* DIRECT_ENABLE *) wire dest_hsdata_en;
  (* RTL_KEEP = "true" *) (* xpm_cdc = "HANDSHAKE" *) wire dest_hsdata_ff;
  wire dest_req;
  wire dest_req_ff;
  wire dest_req_nxt;
  wire src_clk;
  wire src_hsdata_ff;
  wire \src_hsdata_ff[0]_i_1_n_0 ;
  wire [0:0]src_in;
  wire src_rcv;
  wire src_send;
  wire src_sendd_ff;

  assign dest_out[0] = dest_hsdata_ff;
  (* KEEP = "true" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  FDRE \dest_hsdata_ff_reg[0] 
       (.C(dest_clk),
        .CE(dest_hsdata_en),
        .D(src_hsdata_ff),
        .Q(dest_hsdata_ff),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    dest_req_ext_ff_i_1
       (.I0(dest_req_nxt),
        .I1(dest_req_ff),
        .O(dest_hsdata_en));
  FDRE dest_req_ext_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_hsdata_en),
        .Q(dest_req),
        .R(1'b0));
  FDRE dest_req_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_req_nxt),
        .Q(dest_req_ff),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \src_hsdata_ff[0]_i_1 
       (.I0(src_hsdata_ff),
        .I1(src_sendd_ff),
        .I2(src_in),
        .O(\src_hsdata_ff[0]_i_1_n_0 ));
  FDRE \src_hsdata_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(\src_hsdata_ff[0]_i_1_n_0 ),
        .Q(src_hsdata_ff),
        .R(1'b0));
  FDRE src_sendd_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_send),
        .Q(src_sendd_ff),
        .R(1'b0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__66 xpm_cdc_single_dest2src_inst
       (.dest_clk(src_clk),
        .dest_out(src_rcv),
        .src_clk(dest_clk),
        .src_in(dest_req_ff));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__65 xpm_cdc_single_src2dest_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_req_nxt),
        .src_clk(src_clk),
        .src_in(src_sendd_ff));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_pulse" *) 
(* REG_OUTPUT = "0" *) (* RST_USED = "1" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "PULSE" *) 
module bd_0ac3_rx_0_xpm_cdc_pulse
   (src_clk,
    src_pulse,
    dest_clk,
    src_rst,
    dest_rst,
    dest_pulse);
  input src_clk;
  input src_pulse;
  input dest_clk;
  input src_rst;
  input dest_rst;
  output dest_pulse;

  wire dest_clk;
  wire dest_event_ff;
  wire dest_event_ff_i_1_n_0;
  wire dest_pulse;
  wire dest_rst;
  wire dest_sync_out;
  wire src_clk;
  wire src_in_ff;
  wire src_level_ff;
  wire src_level_nxt;
  wire src_pulse;
  wire src_rst;

  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT2 #(
    .INIT(4'h2)) 
    dest_event_ff_i_1
       (.I0(dest_sync_out),
        .I1(dest_rst),
        .O(dest_event_ff_i_1_n_0));
  FDRE dest_event_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_event_ff_i_1_n_0),
        .Q(dest_event_ff),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT3 #(
    .INIT(8'h9A)) 
    dest_pulse_INST_0
       (.I0(dest_event_ff),
        .I1(dest_rst),
        .I2(dest_sync_out),
        .O(dest_pulse));
  FDRE src_in_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_pulse),
        .Q(src_in_ff),
        .R(src_rst));
  LUT3 #(
    .INIT(8'hB4)) 
    src_level_ff_i_1
       (.I0(src_in_ff),
        .I1(src_pulse),
        .I2(src_level_ff),
        .O(src_level_nxt));
  FDRE #(
    .INIT(1'b0)) 
    src_level_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_level_nxt),
        .Q(src_level_ff),
        .R(src_rst));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single xpm_cdc_single_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_sync_out),
        .src_clk(src_clk),
        .src_in(src_level_ff));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_pulse" *) 
(* REG_OUTPUT = "0" *) (* RST_USED = "1" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "PULSE" *) 
module bd_0ac3_rx_0_xpm_cdc_pulse__xdcDup__1
   (src_clk,
    src_pulse,
    dest_clk,
    src_rst,
    dest_rst,
    dest_pulse);
  input src_clk;
  input src_pulse;
  input dest_clk;
  input src_rst;
  input dest_rst;
  output dest_pulse;

  wire dest_clk;
  wire dest_event_ff;
  wire dest_event_ff_i_1_n_0;
  wire dest_pulse;
  wire dest_rst;
  wire dest_sync_out;
  wire src_clk;
  wire src_in_ff;
  wire src_level_ff;
  wire src_level_nxt;
  wire src_pulse;
  wire src_rst;

  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT2 #(
    .INIT(4'h2)) 
    dest_event_ff_i_1
       (.I0(dest_sync_out),
        .I1(dest_rst),
        .O(dest_event_ff_i_1_n_0));
  FDRE dest_event_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_event_ff_i_1_n_0),
        .Q(dest_event_ff),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT3 #(
    .INIT(8'h9A)) 
    dest_pulse_INST_0
       (.I0(dest_event_ff),
        .I1(dest_rst),
        .I2(dest_sync_out),
        .O(dest_pulse));
  FDRE src_in_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_pulse),
        .Q(src_in_ff),
        .R(src_rst));
  LUT3 #(
    .INIT(8'hB4)) 
    src_level_ff_i_1
       (.I0(src_in_ff),
        .I1(src_pulse),
        .I2(src_level_ff),
        .O(src_level_nxt));
  FDRE #(
    .INIT(1'b0)) 
    src_level_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_level_nxt),
        .Q(src_level_ff),
        .R(src_rst));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__30 xpm_cdc_single_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_sync_out),
        .src_clk(src_clk),
        .src_in(src_level_ff));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_pulse" *) 
(* REG_OUTPUT = "0" *) (* RST_USED = "1" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "PULSE" *) 
module bd_0ac3_rx_0_xpm_cdc_pulse__xdcDup__2
   (src_clk,
    src_pulse,
    dest_clk,
    src_rst,
    dest_rst,
    dest_pulse);
  input src_clk;
  input src_pulse;
  input dest_clk;
  input src_rst;
  input dest_rst;
  output dest_pulse;

  wire dest_clk;
  wire dest_event_ff;
  wire dest_event_ff_i_1_n_0;
  wire dest_pulse;
  wire dest_rst;
  wire dest_sync_out;
  wire src_clk;
  wire src_in_ff;
  wire src_level_ff;
  wire src_level_nxt;
  wire src_pulse;
  wire src_rst;

  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT2 #(
    .INIT(4'h2)) 
    dest_event_ff_i_1
       (.I0(dest_sync_out),
        .I1(dest_rst),
        .O(dest_event_ff_i_1_n_0));
  FDRE dest_event_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_event_ff_i_1_n_0),
        .Q(dest_event_ff),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT3 #(
    .INIT(8'h9A)) 
    dest_pulse_INST_0
       (.I0(dest_event_ff),
        .I1(dest_rst),
        .I2(dest_sync_out),
        .O(dest_pulse));
  FDRE src_in_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_pulse),
        .Q(src_in_ff),
        .R(src_rst));
  LUT3 #(
    .INIT(8'hB4)) 
    src_level_ff_i_1
       (.I0(src_in_ff),
        .I1(src_pulse),
        .I2(src_level_ff),
        .O(src_level_nxt));
  FDRE #(
    .INIT(1'b0)) 
    src_level_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_level_nxt),
        .Q(src_level_ff),
        .R(src_rst));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__100 xpm_cdc_single_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_sync_out),
        .src_clk(src_clk),
        .src_in(src_level_ff));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_pulse" *) 
(* REG_OUTPUT = "0" *) (* RST_USED = "1" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "PULSE" *) 
module bd_0ac3_rx_0_xpm_cdc_pulse__xdcDup__3
   (src_clk,
    src_pulse,
    dest_clk,
    src_rst,
    dest_rst,
    dest_pulse);
  input src_clk;
  input src_pulse;
  input dest_clk;
  input src_rst;
  input dest_rst;
  output dest_pulse;

  wire dest_clk;
  wire dest_event_ff;
  wire dest_event_ff_i_1_n_0;
  wire dest_pulse;
  wire dest_rst;
  wire dest_sync_out;
  wire src_clk;
  wire src_in_ff;
  wire src_level_ff;
  wire src_level_nxt;
  wire src_pulse;
  wire src_rst;

  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT2 #(
    .INIT(4'h2)) 
    dest_event_ff_i_1
       (.I0(dest_sync_out),
        .I1(dest_rst),
        .O(dest_event_ff_i_1_n_0));
  FDRE dest_event_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_event_ff_i_1_n_0),
        .Q(dest_event_ff),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'h9A)) 
    dest_pulse_INST_0
       (.I0(dest_event_ff),
        .I1(dest_rst),
        .I2(dest_sync_out),
        .O(dest_pulse));
  FDRE src_in_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_pulse),
        .Q(src_in_ff),
        .R(src_rst));
  LUT3 #(
    .INIT(8'hB4)) 
    src_level_ff_i_1
       (.I0(src_in_ff),
        .I1(src_pulse),
        .I2(src_level_ff),
        .O(src_level_nxt));
  FDRE #(
    .INIT(1'b0)) 
    src_level_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_level_nxt),
        .Q(src_level_ff),
        .R(src_rst));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__101 xpm_cdc_single_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_sync_out),
        .src_clk(src_clk),
        .src_in(src_level_ff));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_pulse" *) 
(* REG_OUTPUT = "0" *) (* RST_USED = "1" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "PULSE" *) 
module bd_0ac3_rx_0_xpm_cdc_pulse__xdcDup__4
   (src_clk,
    src_pulse,
    dest_clk,
    src_rst,
    dest_rst,
    dest_pulse);
  input src_clk;
  input src_pulse;
  input dest_clk;
  input src_rst;
  input dest_rst;
  output dest_pulse;

  wire dest_clk;
  wire dest_event_ff;
  wire dest_event_ff_i_1_n_0;
  wire dest_pulse;
  wire dest_rst;
  wire dest_sync_out;
  wire src_clk;
  wire src_in_ff;
  wire src_level_ff;
  wire src_level_nxt;
  wire src_pulse;
  wire src_rst;

  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT2 #(
    .INIT(4'h2)) 
    dest_event_ff_i_1
       (.I0(dest_sync_out),
        .I1(dest_rst),
        .O(dest_event_ff_i_1_n_0));
  FDRE dest_event_ff_reg
       (.C(dest_clk),
        .CE(1'b1),
        .D(dest_event_ff_i_1_n_0),
        .Q(dest_event_ff),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'h9A)) 
    dest_pulse_INST_0
       (.I0(dest_event_ff),
        .I1(dest_rst),
        .I2(dest_sync_out),
        .O(dest_pulse));
  FDRE src_in_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_pulse),
        .Q(src_in_ff),
        .R(src_rst));
  LUT3 #(
    .INIT(8'hB4)) 
    src_level_ff_i_1
       (.I0(src_in_ff),
        .I1(src_pulse),
        .I2(src_level_ff),
        .O(src_level_nxt));
  FDRE #(
    .INIT(1'b0)) 
    src_level_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_level_nxt),
        .Q(src_level_ff),
        .R(src_rst));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__102 xpm_cdc_single_inst
       (.dest_clk(dest_clk),
        .dest_out(dest_sync_out),
        .src_clk(src_clk),
        .src_in(src_level_ff));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__100
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__101
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__102
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__25
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__26
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__27
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__28
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__29
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__30
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__31
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__32
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__33
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__34
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__35
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__36
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__37
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__38
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__39
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__40
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__41
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__42
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__43
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__44
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__45
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__46
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__47
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__48
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__49
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__50
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__51
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__52
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__53
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__54
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__55
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__56
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__57
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__58
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__59
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__60
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__61
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__62
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__63
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__64
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__65
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__66
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__67
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__68
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__69
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__70
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__71
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__72
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__73
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__74
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__75
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__76
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__77
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__78
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__79
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__80
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__81
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__82
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__83
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__84
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__85
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__86
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__87
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__88
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__89
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__90
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__91
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__92
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__93
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__94
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__95
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__96
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__97
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__98
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__99
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__parameterized0
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__parameterized0__2
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__parameterized0__3
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__parameterized0__4
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__parameterized1
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module bd_0ac3_rx_0_xpm_cdc_single__parameterized1__1
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_clk;
  wire src_ff;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(src_ff),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_ff),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module bd_0ac3_rx_0_blk_mem_gen_generic_cstr
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din,
    WEA);
  output [67:0]dout;
  input clk;
  input [1:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [67:0]din;
  input [1:0]WEA;

  wire [11:0]Q;
  wire [1:0]WEA;
  wire clk;
  wire [67:0]din;
  wire [67:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [1:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_0ac3_rx_0_blk_mem_gen_prim_width \ramloop[0].ram.r 
       (.Q(Q),
        .WEA(WEA[1]),
        .clk(clk),
        .din(din[8:0]),
        .dout(dout[8:0]),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg[0]),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
  bd_0ac3_rx_0_blk_mem_gen_prim_width__parameterized0 \ramloop[1].ram.r 
       (.Q(Q),
        .WEA(WEA[1]),
        .clk(clk),
        .din(din[17:9]),
        .dout(dout[17:9]),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg[0]),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
  bd_0ac3_rx_0_blk_mem_gen_prim_width__parameterized1 \ramloop[2].ram.r 
       (.Q(Q),
        .clk(clk),
        .din(din[26:18]),
        .dout(dout[26:18]),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
  bd_0ac3_rx_0_blk_mem_gen_prim_width__parameterized2 \ramloop[3].ram.r 
       (.Q(Q),
        .WEA(WEA),
        .clk(clk),
        .din(din[35:27]),
        .dout(dout[35:27]),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg[0]),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
  bd_0ac3_rx_0_blk_mem_gen_prim_width__parameterized3 \ramloop[4].ram.r 
       (.Q(Q),
        .clk(clk),
        .din(din[44:36]),
        .dout(dout[44:36]),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
  bd_0ac3_rx_0_blk_mem_gen_prim_width__parameterized4 \ramloop[5].ram.r 
       (.Q(Q),
        .WEA(WEA[0]),
        .clk(clk),
        .din(din[53:45]),
        .dout(dout[53:45]),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg[0]),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
  bd_0ac3_rx_0_blk_mem_gen_prim_width__parameterized5 \ramloop[6].ram.r 
       (.Q(Q),
        .clk(clk),
        .din(din[62:54]),
        .dout(dout[62:54]),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
  bd_0ac3_rx_0_blk_mem_gen_prim_width__parameterized6 \ramloop[7].ram.r 
       (.Q(Q),
        .WEA(WEA[0]),
        .clk(clk),
        .din(din[67:63]),
        .dout(dout[67:63]),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg[0]),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module bd_0ac3_rx_0_blk_mem_gen_prim_width
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din,
    WEA);
  output [8:0]dout;
  input clk;
  input [0:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [8:0]din;
  input [0:0]WEA;

  wire [11:0]Q;
  wire [0:0]WEA;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [0:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_0ac3_rx_0_blk_mem_gen_prim_wrapper \prim_noinit.ram 
       (.Q(Q),
        .WEA(WEA),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module bd_0ac3_rx_0_blk_mem_gen_prim_width__parameterized0
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din,
    WEA);
  output [8:0]dout;
  input clk;
  input [0:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [8:0]din;
  input [0:0]WEA;

  wire [11:0]Q;
  wire [0:0]WEA;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [0:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_0ac3_rx_0_blk_mem_gen_prim_wrapper__parameterized0 \prim_noinit.ram 
       (.Q(Q),
        .WEA(WEA),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module bd_0ac3_rx_0_blk_mem_gen_prim_width__parameterized1
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din);
  output [8:0]dout;
  input clk;
  input [1:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [1:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_0ac3_rx_0_blk_mem_gen_prim_wrapper__parameterized1 \prim_noinit.ram 
       (.Q(Q),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module bd_0ac3_rx_0_blk_mem_gen_prim_width__parameterized2
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din,
    WEA);
  output [8:0]dout;
  input clk;
  input [0:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [8:0]din;
  input [1:0]WEA;

  wire [11:0]Q;
  wire [1:0]WEA;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [0:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_0ac3_rx_0_blk_mem_gen_prim_wrapper__parameterized2 \prim_noinit.ram 
       (.Q(Q),
        .WEA(WEA),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module bd_0ac3_rx_0_blk_mem_gen_prim_width__parameterized3
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din);
  output [8:0]dout;
  input clk;
  input [1:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [1:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_0ac3_rx_0_blk_mem_gen_prim_wrapper__parameterized3 \prim_noinit.ram 
       (.Q(Q),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module bd_0ac3_rx_0_blk_mem_gen_prim_width__parameterized4
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din,
    WEA);
  output [8:0]dout;
  input clk;
  input [0:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [8:0]din;
  input [0:0]WEA;

  wire [11:0]Q;
  wire [0:0]WEA;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [0:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_0ac3_rx_0_blk_mem_gen_prim_wrapper__parameterized4 \prim_noinit.ram 
       (.Q(Q),
        .WEA(WEA),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module bd_0ac3_rx_0_blk_mem_gen_prim_width__parameterized5
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din);
  output [8:0]dout;
  input clk;
  input [1:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [1:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_0ac3_rx_0_blk_mem_gen_prim_wrapper__parameterized5 \prim_noinit.ram 
       (.Q(Q),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module bd_0ac3_rx_0_blk_mem_gen_prim_width__parameterized6
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din,
    WEA);
  output [4:0]dout;
  input clk;
  input [0:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [4:0]din;
  input [0:0]WEA;

  wire [11:0]Q;
  wire [0:0]WEA;
  wire clk;
  wire [4:0]din;
  wire [4:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [0:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_0ac3_rx_0_blk_mem_gen_prim_wrapper__parameterized6 \prim_noinit.ram 
       (.Q(Q),
        .WEA(WEA),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module bd_0ac3_rx_0_blk_mem_gen_prim_wrapper
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din,
    WEA);
  output [8:0]dout;
  input clk;
  input [0:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [8:0]din;
  input [0:0]WEA;

  wire [11:0]Q;
  wire [0:0]WEA;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [0:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(1),
    .DOB_REG(1),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({1'b1,\gcc0.gc1.gsym.count_d2_reg[11] ,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,Q,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIPADIP({1'b0,1'b0,1'b0,din[8]}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED [31:0]),
        .DOBDO({\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOBDO_UNCONNECTED [31:8],dout[7:0]}),
        .DOPADOP(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP({\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPBDOP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(mem_wen_reg),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(tmp_ram_regout_en),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(srst),
        .SBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .WEA({WEA,WEA,WEA,WEA}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module bd_0ac3_rx_0_blk_mem_gen_prim_wrapper__parameterized0
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din,
    WEA);
  output [8:0]dout;
  input clk;
  input [0:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [8:0]din;
  input [0:0]WEA;

  wire [11:0]Q;
  wire [0:0]WEA;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [0:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(1),
    .DOB_REG(1),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({1'b1,\gcc0.gc1.gsym.count_d2_reg[11] ,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,Q,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIPADIP({1'b0,1'b0,1'b0,din[8]}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED [31:0]),
        .DOBDO({\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOBDO_UNCONNECTED [31:8],dout[7:0]}),
        .DOPADOP(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP({\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPBDOP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(mem_wen_reg),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(tmp_ram_regout_en),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(srst),
        .SBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .WEA({WEA,WEA,WEA,WEA}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module bd_0ac3_rx_0_blk_mem_gen_prim_wrapper__parameterized1
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din);
  output [8:0]dout;
  input clk;
  input [1:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [1:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(1),
    .DOB_REG(1),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({1'b1,\gcc0.gc1.gsym.count_d2_reg[11] ,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,Q,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIPADIP({1'b0,1'b0,1'b0,din[8]}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED [31:0]),
        .DOBDO({\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOBDO_UNCONNECTED [31:8],dout[7:0]}),
        .DOPADOP(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP({\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPBDOP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(mem_wen_reg[0]),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(tmp_ram_regout_en),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(srst),
        .SBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .WEA({mem_wen_reg[1],mem_wen_reg[1],mem_wen_reg[1],mem_wen_reg[1]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module bd_0ac3_rx_0_blk_mem_gen_prim_wrapper__parameterized2
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din,
    WEA);
  output [8:0]dout;
  input clk;
  input [0:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [8:0]din;
  input [1:0]WEA;

  wire [11:0]Q;
  wire [1:0]WEA;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [0:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(1),
    .DOB_REG(1),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({1'b1,\gcc0.gc1.gsym.count_d2_reg[11] ,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,Q,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIPADIP({1'b0,1'b0,1'b0,din[8]}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED [31:0]),
        .DOBDO({\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOBDO_UNCONNECTED [31:8],dout[7:0]}),
        .DOPADOP(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP({\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPBDOP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(mem_wen_reg),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(tmp_ram_regout_en),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(srst),
        .SBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .WEA({WEA[1],WEA,WEA[0]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module bd_0ac3_rx_0_blk_mem_gen_prim_wrapper__parameterized3
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din);
  output [8:0]dout;
  input clk;
  input [1:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [1:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(1),
    .DOB_REG(1),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({1'b1,\gcc0.gc1.gsym.count_d2_reg[11] ,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,Q,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIPADIP({1'b0,1'b0,1'b0,din[8]}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED [31:0]),
        .DOBDO({\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOBDO_UNCONNECTED [31:8],dout[7:0]}),
        .DOPADOP(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP({\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPBDOP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(mem_wen_reg[0]),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(tmp_ram_regout_en),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(srst),
        .SBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .WEA({mem_wen_reg[1],mem_wen_reg[1],mem_wen_reg[1],mem_wen_reg[1]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module bd_0ac3_rx_0_blk_mem_gen_prim_wrapper__parameterized4
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din,
    WEA);
  output [8:0]dout;
  input clk;
  input [0:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [8:0]din;
  input [0:0]WEA;

  wire [11:0]Q;
  wire [0:0]WEA;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [0:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(1),
    .DOB_REG(1),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({1'b1,\gcc0.gc1.gsym.count_d2_reg[11] ,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,Q,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIPADIP({1'b0,1'b0,1'b0,din[8]}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED [31:0]),
        .DOBDO({\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOBDO_UNCONNECTED [31:8],dout[7:0]}),
        .DOPADOP(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP({\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPBDOP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(mem_wen_reg),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(tmp_ram_regout_en),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(srst),
        .SBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .WEA({WEA,WEA,WEA,WEA}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module bd_0ac3_rx_0_blk_mem_gen_prim_wrapper__parameterized5
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din);
  output [8:0]dout;
  input clk;
  input [1:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [8:0]din;

  wire [11:0]Q;
  wire clk;
  wire [8:0]din;
  wire [8:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [1:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(1),
    .DOB_REG(1),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({1'b1,\gcc0.gc1.gsym.count_d2_reg[11] ,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,Q,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din[7:0]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIPADIP({1'b0,1'b0,1'b0,din[8]}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED [31:0]),
        .DOBDO({\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOBDO_UNCONNECTED [31:8],dout[7:0]}),
        .DOPADOP(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP({\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPBDOP_UNCONNECTED [3:1],dout[8]}),
        .ECCPARITY(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(mem_wen_reg[0]),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(tmp_ram_regout_en),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(srst),
        .SBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .WEA({mem_wen_reg[1],mem_wen_reg,mem_wen_reg[0]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module bd_0ac3_rx_0_blk_mem_gen_prim_wrapper__parameterized6
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din,
    WEA);
  output [4:0]dout;
  input clk;
  input [0:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [4:0]din;
  input [0:0]WEA;

  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_60 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_61 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_62 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_75 ;
  wire [11:0]Q;
  wire [0:0]WEA;
  wire clk;
  wire [4:0]din;
  wire [4:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [0:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ;
  wire [31:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED ;
  wire [31:8]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED ;
  wire [3:1]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(1),
    .DOB_REG(1),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram 
       (.ADDRARDADDR({1'b1,\gcc0.gc1.gsym.count_d2_reg[11] ,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,Q,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(clk),
        .CLKBWRCLK(clk),
        .DBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,din}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOADO_UNCONNECTED [31:0]),
        .DOBDO({\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOBDO_UNCONNECTED [31:8],\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_60 ,\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_61 ,\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_62 ,dout}),
        .DOPADOP(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP({\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_DOPBDOP_UNCONNECTED [3:1],\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_n_75 }),
        .ECCPARITY(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(mem_wen_reg),
        .ENBWREN(tmp_ram_rd_en),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(tmp_ram_regout_en),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(srst),
        .SBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_SBITERR_UNCONNECTED ),
        .WEA({WEA,WEA,WEA,WEA}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module bd_0ac3_rx_0_blk_mem_gen_top
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din,
    WEA);
  output [67:0]dout;
  input clk;
  input [1:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [67:0]din;
  input [1:0]WEA;

  wire [11:0]Q;
  wire [1:0]WEA;
  wire clk;
  wire [67:0]din;
  wire [67:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [1:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_0ac3_rx_0_blk_mem_gen_generic_cstr \valid.cstr 
       (.Q(Q),
        .WEA(WEA),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1" *) 
module bd_0ac3_rx_0_blk_mem_gen_v8_4_1
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din,
    WEA);
  output [67:0]dout;
  input clk;
  input [1:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [67:0]din;
  input [1:0]WEA;

  wire [11:0]Q;
  wire [1:0]WEA;
  wire clk;
  wire [67:0]din;
  wire [67:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [1:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_0ac3_rx_0_blk_mem_gen_v8_4_1_synth inst_blk_mem_gen
       (.Q(Q),
        .WEA(WEA),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1_synth" *) 
module bd_0ac3_rx_0_blk_mem_gen_v8_4_1_synth
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din,
    WEA);
  output [67:0]dout;
  input clk;
  input [1:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [67:0]din;
  input [1:0]WEA;

  wire [11:0]Q;
  wire [1:0]WEA;
  wire clk;
  wire [67:0]din;
  wire [67:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [1:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_0ac3_rx_0_blk_mem_gen_top \gnbram.gnativebmg.native_blk_mem_gen 
       (.Q(Q),
        .WEA(WEA),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module bd_0ac3_rx_0_clk_x_pntrs
   (ram_empty_i_reg,
    WR_PNTR_RD,
    ram_empty_i_reg_0,
    ram_full_i_reg,
    RD_PNTR_WR,
    ram_full_i_reg_0,
    Q,
    \gc0.count_reg[4] ,
    \gic0.gc0.count_d1_reg[1] ,
    \gic0.gc0.count_reg[1] ,
    wr_clk,
    \gic0.gc0.count_d2_reg[4] ,
    rd_clk);
  output ram_empty_i_reg;
  output [1:0]WR_PNTR_RD;
  output ram_empty_i_reg_0;
  output ram_full_i_reg;
  output [2:0]RD_PNTR_WR;
  output ram_full_i_reg_0;
  input [4:0]Q;
  input [2:0]\gc0.count_reg[4] ;
  input [1:0]\gic0.gc0.count_d1_reg[1] ;
  input [1:0]\gic0.gc0.count_reg[1] ;
  input wr_clk;
  input [4:0]\gic0.gc0.count_d2_reg[4] ;
  input rd_clk;

  wire [4:0]Q;
  wire [2:0]RD_PNTR_WR;
  wire [1:0]WR_PNTR_RD;
  wire [2:0]\gc0.count_reg[4] ;
  wire [1:0]\gic0.gc0.count_d1_reg[1] ;
  wire [4:0]\gic0.gc0.count_d2_reg[4] ;
  wire [1:0]\gic0.gc0.count_reg[1] ;
  wire [4:2]p_24_out;
  wire [1:0]p_25_out;
  wire ram_empty_i_reg;
  wire ram_empty_i_reg_0;
  wire ram_full_i_reg;
  wire ram_full_i_reg_0;
  wire rd_clk;
  wire wr_clk;

  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_i_i_2
       (.I0(p_24_out[3]),
        .I1(Q[3]),
        .I2(p_24_out[2]),
        .I3(Q[2]),
        .I4(Q[4]),
        .I5(p_24_out[4]),
        .O(ram_empty_i_reg));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_i_i_5
       (.I0(p_24_out[3]),
        .I1(\gc0.count_reg[4] [1]),
        .I2(p_24_out[2]),
        .I3(\gc0.count_reg[4] [0]),
        .I4(\gc0.count_reg[4] [2]),
        .I5(p_24_out[4]),
        .O(ram_empty_i_reg_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_3
       (.I0(p_25_out[0]),
        .I1(\gic0.gc0.count_d1_reg[1] [0]),
        .I2(p_25_out[1]),
        .I3(\gic0.gc0.count_d1_reg[1] [1]),
        .O(ram_full_i_reg));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_4
       (.I0(p_25_out[0]),
        .I1(\gic0.gc0.count_reg[1] [0]),
        .I2(p_25_out[1]),
        .I3(\gic0.gc0.count_reg[1] [1]),
        .O(ram_full_i_reg_0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "5" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_gray rd_pntr_cdc_inst
       (.dest_clk(wr_clk),
        .dest_out_bin({RD_PNTR_WR,p_25_out}),
        .src_clk(rd_clk),
        .src_in_bin(Q));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "5" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_gray__4 wr_pntr_cdc_inst
       (.dest_clk(rd_clk),
        .dest_out_bin({p_24_out,WR_PNTR_RD}),
        .src_clk(wr_clk),
        .src_in_bin(\gic0.gc0.count_d2_reg[4] ));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module bd_0ac3_rx_0_clk_x_pntrs__xdcDup__1
   (ram_empty_i_reg,
    WR_PNTR_RD,
    ram_empty_i_reg_0,
    ram_full_i_reg,
    RD_PNTR_WR,
    ram_full_i_reg_0,
    Q,
    \gc0.count_reg[4] ,
    \gic0.gc0.count_d1_reg[1] ,
    \gic0.gc0.count_reg[1] ,
    wr_clk,
    \gic0.gc0.count_d2_reg[4] ,
    rd_clk);
  output ram_empty_i_reg;
  output [1:0]WR_PNTR_RD;
  output ram_empty_i_reg_0;
  output ram_full_i_reg;
  output [2:0]RD_PNTR_WR;
  output ram_full_i_reg_0;
  input [4:0]Q;
  input [2:0]\gc0.count_reg[4] ;
  input [1:0]\gic0.gc0.count_d1_reg[1] ;
  input [1:0]\gic0.gc0.count_reg[1] ;
  input wr_clk;
  input [4:0]\gic0.gc0.count_d2_reg[4] ;
  input rd_clk;

  wire [4:0]Q;
  wire [2:0]RD_PNTR_WR;
  wire [1:0]WR_PNTR_RD;
  wire [2:0]\gc0.count_reg[4] ;
  wire [1:0]\gic0.gc0.count_d1_reg[1] ;
  wire [4:0]\gic0.gc0.count_d2_reg[4] ;
  wire [1:0]\gic0.gc0.count_reg[1] ;
  wire [4:2]p_24_out;
  wire [1:0]p_25_out;
  wire ram_empty_i_reg;
  wire ram_empty_i_reg_0;
  wire ram_full_i_reg;
  wire ram_full_i_reg_0;
  wire rd_clk;
  wire wr_clk;

  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_i_i_2
       (.I0(p_24_out[3]),
        .I1(Q[3]),
        .I2(p_24_out[2]),
        .I3(Q[2]),
        .I4(Q[4]),
        .I5(p_24_out[4]),
        .O(ram_empty_i_reg));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_empty_i_i_5
       (.I0(p_24_out[3]),
        .I1(\gc0.count_reg[4] [1]),
        .I2(p_24_out[2]),
        .I3(\gc0.count_reg[4] [0]),
        .I4(\gc0.count_reg[4] [2]),
        .I5(p_24_out[4]),
        .O(ram_empty_i_reg_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_3
       (.I0(p_25_out[0]),
        .I1(\gic0.gc0.count_d1_reg[1] [0]),
        .I2(p_25_out[1]),
        .I3(\gic0.gc0.count_d1_reg[1] [1]),
        .O(ram_full_i_reg));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_4
       (.I0(p_25_out[0]),
        .I1(\gic0.gc0.count_reg[1] [0]),
        .I2(p_25_out[1]),
        .I3(\gic0.gc0.count_reg[1] [1]),
        .O(ram_full_i_reg_0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "5" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_gray__3 rd_pntr_cdc_inst
       (.dest_clk(wr_clk),
        .dest_out_bin({RD_PNTR_WR,p_25_out}),
        .src_clk(rd_clk),
        .src_in_bin(Q));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "5" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_gray__2 wr_pntr_cdc_inst
       (.dest_clk(rd_clk),
        .dest_out_bin({p_24_out,WR_PNTR_RD}),
        .src_clk(wr_clk),
        .src_in_bin(\gic0.gc0.count_d2_reg[4] ));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module bd_0ac3_rx_0_compare__parameterized1
   (comp0,
    v1_reg);
  output comp0;
  input [5:0]v1_reg;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire carrynet_4;
  wire comp0;
  wire [5:0]v1_reg;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg[3:0]));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:2],comp0,carrynet_4}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:2],1'b0,1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:2],v1_reg[5:4]}));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module bd_0ac3_rx_0_compare__parameterized1_1
   (comp1,
    ram_full_comb,
    v1_reg_0,
    wr_en,
    comp0,
    p_7_out,
    out);
  output comp1;
  output ram_full_comb;
  input [5:0]v1_reg_0;
  input wr_en;
  input comp0;
  input p_7_out;
  input out;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire carrynet_4;
  wire comp0;
  wire comp1;
  wire out;
  wire p_7_out;
  wire ram_full_comb;
  wire [5:0]v1_reg_0;
  wire wr_en;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg_0[3:0]));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:2],comp1,carrynet_4}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:2],1'b0,1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:2],v1_reg_0[5:4]}));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    ram_full_fb_i_i_1
       (.I0(comp1),
        .I1(wr_en),
        .I2(comp0),
        .I3(p_7_out),
        .I4(out),
        .O(ram_full_comb));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module bd_0ac3_rx_0_compare__parameterized1_2
   (p_2_out,
    v1_reg_1,
    p_7_out,
    wr_en,
    out,
    comp1,
    almost_full);
  output p_2_out;
  input [5:0]v1_reg_1;
  input p_7_out;
  input wr_en;
  input out;
  input comp1;
  input almost_full;

  wire almost_full;
  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire carrynet_4;
  wire comp1;
  wire out;
  wire p_0_in;
  wire p_2_out;
  wire p_7_out;
  wire [5:0]v1_reg_1;
  wire wr_en;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h33F3FFFF00200020)) 
    \gaf.gaf0.ram_afull_i_i_1 
       (.I0(p_0_in),
        .I1(p_7_out),
        .I2(wr_en),
        .I3(out),
        .I4(comp1),
        .I5(almost_full),
        .O(p_2_out));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg_1[3:0]));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:2],p_0_in,carrynet_4}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:2],1'b0,1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:2],v1_reg_1[5:4]}));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module bd_0ac3_rx_0_compare__parameterized1_3
   (comp0,
    \gc0.count_d1_reg[0] ,
    \gc0.count_d1_reg[2] ,
    \gc0.count_d1_reg[4] ,
    \gc0.count_d1_reg[6] ,
    \gc0.count_d1_reg[8] ,
    \gc0.count_d1_reg[10] );
  output comp0;
  input \gc0.count_d1_reg[0] ;
  input \gc0.count_d1_reg[2] ;
  input \gc0.count_d1_reg[4] ;
  input \gc0.count_d1_reg[6] ;
  input \gc0.count_d1_reg[8] ;
  input \gc0.count_d1_reg[10] ;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire carrynet_4;
  wire comp0;
  wire \gc0.count_d1_reg[0] ;
  wire \gc0.count_d1_reg[10] ;
  wire \gc0.count_d1_reg[2] ;
  wire \gc0.count_d1_reg[4] ;
  wire \gc0.count_d1_reg[6] ;
  wire \gc0.count_d1_reg[8] ;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S({\gc0.count_d1_reg[6] ,\gc0.count_d1_reg[4] ,\gc0.count_d1_reg[2] ,\gc0.count_d1_reg[0] }));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:2],comp0,carrynet_4}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:2],1'b0,1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:2],\gc0.count_d1_reg[10] ,\gc0.count_d1_reg[8] }));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module bd_0ac3_rx_0_compare__parameterized1_4
   (ram_empty_i_reg,
    v1_reg,
    E,
    comp0,
    ram_full_fb_i_reg,
    wr_en,
    out);
  output ram_empty_i_reg;
  input [5:0]v1_reg;
  input [0:0]E;
  input comp0;
  input ram_full_fb_i_reg;
  input wr_en;
  input out;

  wire [0:0]E;
  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire carrynet_4;
  wire comp0;
  wire comp1;
  wire out;
  wire ram_empty_i_reg;
  wire ram_full_fb_i_reg;
  wire [5:0]v1_reg;
  wire wr_en;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg[3:0]));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:2],comp1,carrynet_4}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:2],1'b0,1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:2],v1_reg[5:4]}));
  LUT6 #(
    .INIT(64'hFF0FFFFF88008888)) 
    ram_empty_fb_i_i_1
       (.I0(E),
        .I1(comp1),
        .I2(comp0),
        .I3(ram_full_fb_i_reg),
        .I4(wr_en),
        .I5(out),
        .O(ram_empty_i_reg));
endmodule

(* ORIG_REF_NAME = "dc_ss_fwft" *) 
module bd_0ac3_rx_0_dc_ss_fwft
   (DI,
    data_count,
    srst,
    cntr_en,
    O,
    clk,
    \count_reg[7] ,
    \count_reg[11] ,
    \count_reg[11]_0 );
  output [3:0]DI;
  output [8:0]data_count;
  input srst;
  input cntr_en;
  input [3:0]O;
  input clk;
  input [3:0]\count_reg[7] ;
  input [3:0]\count_reg[11] ;
  input [0:0]\count_reg[11]_0 ;

  wire [3:0]DI;
  wire [3:0]O;
  wire clk;
  wire cntr_en;
  wire [3:0]\count_reg[11] ;
  wire [0:0]\count_reg[11]_0 ;
  wire [3:0]\count_reg[7] ;
  wire [8:0]data_count;
  wire srst;

  bd_0ac3_rx_0_updn_cntr dc
       (.DI(DI),
        .O(O),
        .clk(clk),
        .cntr_en(cntr_en),
        .\count_reg[11]_0 (\count_reg[11] ),
        .\count_reg[11]_1 (\count_reg[11]_0 ),
        .\count_reg[7]_0 (\count_reg[7] ),
        .data_count(data_count),
        .srst(srst));
endmodule

(* ORIG_REF_NAME = "dmem" *) 
module bd_0ac3_rx_0_dmem
   (Q,
    clk,
    EN,
    din,
    \gc0.count_d1_reg[3] ,
    count_d10_in,
    E,
    AR);
  output [11:0]Q;
  input clk;
  input EN;
  input [11:0]din;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]count_d10_in;
  input [0:0]E;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire EN;
  wire [11:0]Q;
  wire clk;
  wire [3:0]count_d10_in;
  wire [11:0]din;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [11:0]p_0_out;
  wire [1:0]NLW_RAM_reg_0_15_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_15_6_11_DOD_UNCONNECTED;

  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M RAM_reg_0_15_0_5
       (.ADDRA({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRB({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRC({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRD({1'b0,count_d10_in}),
        .DIA(din[1:0]),
        .DIB(din[3:2]),
        .DIC(din[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(p_0_out[1:0]),
        .DOB(p_0_out[3:2]),
        .DOC(p_0_out[5:4]),
        .DOD(NLW_RAM_reg_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(clk),
        .WE(EN));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M RAM_reg_0_15_6_11
       (.ADDRA({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRB({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRC({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRD({1'b0,count_d10_in}),
        .DIA(din[7:6]),
        .DIB(din[9:8]),
        .DIC(din[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(p_0_out[7:6]),
        .DOB(p_0_out[9:8]),
        .DOC(p_0_out[11:10]),
        .DOD(NLW_RAM_reg_0_15_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(clk),
        .WE(EN));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[0]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[10] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[10]),
        .Q(Q[10]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[11] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[11]),
        .Q(Q[11]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[3]),
        .Q(Q[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[4] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[4]),
        .Q(Q[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[5] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[5]),
        .Q(Q[5]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[6] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[6]),
        .Q(Q[6]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[7] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[7]),
        .Q(Q[7]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[8] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[8]),
        .Q(Q[8]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[9] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[9]),
        .Q(Q[9]));
endmodule

(* ORIG_REF_NAME = "dmem" *) 
module bd_0ac3_rx_0_dmem_14
   (Q,
    clk,
    EN,
    din,
    \gc0.count_d1_reg[3] ,
    count_d10_in,
    E,
    AR);
  output [11:0]Q;
  input clk;
  input EN;
  input [11:0]din;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]count_d10_in;
  input [0:0]E;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire EN;
  wire [11:0]Q;
  wire clk;
  wire [3:0]count_d10_in;
  wire [11:0]din;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [11:0]p_0_out;
  wire [1:0]NLW_RAM_reg_0_15_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_15_6_11_DOD_UNCONNECTED;

  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M RAM_reg_0_15_0_5
       (.ADDRA({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRB({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRC({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRD({1'b0,count_d10_in}),
        .DIA(din[1:0]),
        .DIB(din[3:2]),
        .DIC(din[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(p_0_out[1:0]),
        .DOB(p_0_out[3:2]),
        .DOC(p_0_out[5:4]),
        .DOD(NLW_RAM_reg_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(clk),
        .WE(EN));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M RAM_reg_0_15_6_11
       (.ADDRA({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRB({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRC({1'b0,\gc0.count_d1_reg[3] }),
        .ADDRD({1'b0,count_d10_in}),
        .DIA(din[7:6]),
        .DIB(din[9:8]),
        .DIC(din[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(p_0_out[7:6]),
        .DOB(p_0_out[9:8]),
        .DOC(p_0_out[11:10]),
        .DOD(NLW_RAM_reg_0_15_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(clk),
        .WE(EN));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[0]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[10] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[10]),
        .Q(Q[10]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[11] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[11]),
        .Q(Q[11]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[3]),
        .Q(Q[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[4] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[4]),
        .Q(Q[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[5] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[5]),
        .Q(Q[5]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[6] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[6]),
        .Q(Q[6]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[7] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[7]),
        .Q(Q[7]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[8] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[8]),
        .Q(Q[8]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[9] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(p_0_out[9]),
        .Q(Q[9]));
endmodule

(* ORIG_REF_NAME = "dmem" *) 
module bd_0ac3_rx_0_dmem__parameterized0
   (dout,
    wr_clk,
    E,
    din,
    \gc0.count_d1_reg[4] ,
    \gic0.gc0.count_d2_reg[4] ,
    ram_empty_fb_i_reg,
    rd_clk,
    AR);
  output [41:0]dout;
  input wr_clk;
  input [0:0]E;
  input [41:0]din;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [4:0]\gic0.gc0.count_d2_reg[4] ;
  input [0:0]ram_empty_fb_i_reg;
  input rd_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [41:0]din;
  wire [41:0]dout;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [4:0]\gic0.gc0.count_d2_reg[4] ;
  wire [41:0]p_0_out;
  wire [0:0]ram_empty_fb_i_reg;
  wire rd_clk;
  wire wr_clk;
  wire [1:0]NLW_RAM_reg_0_31_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_31_12_17_DOD_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_31_18_23_DOD_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_31_24_29_DOD_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_31_30_35_DOD_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_31_36_41_DOD_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_31_6_11_DOD_UNCONNECTED;

  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M RAM_reg_0_31_0_5
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(\gic0.gc0.count_d2_reg[4] ),
        .DIA(din[1:0]),
        .DIB(din[3:2]),
        .DIC(din[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(p_0_out[1:0]),
        .DOB(p_0_out[3:2]),
        .DOC(p_0_out[5:4]),
        .DOD(NLW_RAM_reg_0_31_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(E));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M RAM_reg_0_31_12_17
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(\gic0.gc0.count_d2_reg[4] ),
        .DIA(din[13:12]),
        .DIB(din[15:14]),
        .DIC(din[17:16]),
        .DID({1'b0,1'b0}),
        .DOA(p_0_out[13:12]),
        .DOB(p_0_out[15:14]),
        .DOC(p_0_out[17:16]),
        .DOD(NLW_RAM_reg_0_31_12_17_DOD_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(E));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M RAM_reg_0_31_18_23
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(\gic0.gc0.count_d2_reg[4] ),
        .DIA(din[19:18]),
        .DIB(din[21:20]),
        .DIC(din[23:22]),
        .DID({1'b0,1'b0}),
        .DOA(p_0_out[19:18]),
        .DOB(p_0_out[21:20]),
        .DOC(p_0_out[23:22]),
        .DOD(NLW_RAM_reg_0_31_18_23_DOD_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(E));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M RAM_reg_0_31_24_29
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(\gic0.gc0.count_d2_reg[4] ),
        .DIA(din[25:24]),
        .DIB(din[27:26]),
        .DIC(din[29:28]),
        .DID({1'b0,1'b0}),
        .DOA(p_0_out[25:24]),
        .DOB(p_0_out[27:26]),
        .DOC(p_0_out[29:28]),
        .DOD(NLW_RAM_reg_0_31_24_29_DOD_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(E));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M RAM_reg_0_31_30_35
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(\gic0.gc0.count_d2_reg[4] ),
        .DIA(din[31:30]),
        .DIB(din[33:32]),
        .DIC(din[35:34]),
        .DID({1'b0,1'b0}),
        .DOA(p_0_out[31:30]),
        .DOB(p_0_out[33:32]),
        .DOC(p_0_out[35:34]),
        .DOD(NLW_RAM_reg_0_31_30_35_DOD_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(E));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M RAM_reg_0_31_36_41
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(\gic0.gc0.count_d2_reg[4] ),
        .DIA(din[37:36]),
        .DIB(din[39:38]),
        .DIC(din[41:40]),
        .DID({1'b0,1'b0}),
        .DOA(p_0_out[37:36]),
        .DOB(p_0_out[39:38]),
        .DOC(p_0_out[41:40]),
        .DOD(NLW_RAM_reg_0_31_36_41_DOD_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(E));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M RAM_reg_0_31_6_11
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(\gic0.gc0.count_d2_reg[4] ),
        .DIA(din[7:6]),
        .DIB(din[9:8]),
        .DIC(din[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(p_0_out[7:6]),
        .DOB(p_0_out[9:8]),
        .DOC(p_0_out[11:10]),
        .DOD(NLW_RAM_reg_0_31_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(E));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[0] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[0]),
        .Q(dout[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[10] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[10]),
        .Q(dout[10]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[11] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[11]),
        .Q(dout[11]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[12] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[12]),
        .Q(dout[12]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[13] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[13]),
        .Q(dout[13]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[14] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[14]),
        .Q(dout[14]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[15] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[15]),
        .Q(dout[15]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[16] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[16]),
        .Q(dout[16]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[17] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[17]),
        .Q(dout[17]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[18] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[18]),
        .Q(dout[18]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[19] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[19]),
        .Q(dout[19]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[1] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[1]),
        .Q(dout[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[20] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[20]),
        .Q(dout[20]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[21] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[21]),
        .Q(dout[21]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[22] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[22]),
        .Q(dout[22]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[23] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[23]),
        .Q(dout[23]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[24] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[24]),
        .Q(dout[24]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[25] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[25]),
        .Q(dout[25]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[26] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[26]),
        .Q(dout[26]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[27] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[27]),
        .Q(dout[27]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[28] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[28]),
        .Q(dout[28]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[29] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[29]),
        .Q(dout[29]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[2] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[2]),
        .Q(dout[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[30] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[30]),
        .Q(dout[30]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[31] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[31]),
        .Q(dout[31]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[32] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[32]),
        .Q(dout[32]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[33] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[33]),
        .Q(dout[33]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[34] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[34]),
        .Q(dout[34]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[35] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[35]),
        .Q(dout[35]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[36] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[36]),
        .Q(dout[36]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[37] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[37]),
        .Q(dout[37]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[38] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[38]),
        .Q(dout[38]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[39] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[39]),
        .Q(dout[39]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[3] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[3]),
        .Q(dout[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[40] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[40]),
        .Q(dout[40]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[41] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[41]),
        .Q(dout[41]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[4] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[4]),
        .Q(dout[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[5] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[5]),
        .Q(dout[5]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[6] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[6]),
        .Q(dout[6]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[7] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[7]),
        .Q(dout[7]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[8] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[8]),
        .Q(dout[8]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[9] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[9]),
        .Q(dout[9]));
endmodule

(* ORIG_REF_NAME = "dmem" *) 
module bd_0ac3_rx_0_dmem__parameterized1
   (dout,
    wr_clk,
    E,
    din,
    \gc0.count_d1_reg[4] ,
    \gic0.gc0.count_d2_reg[4] ,
    ram_empty_fb_i_reg,
    rd_clk,
    AR);
  output [23:0]dout;
  input wr_clk;
  input [0:0]E;
  input [23:0]din;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [4:0]\gic0.gc0.count_d2_reg[4] ;
  input [0:0]ram_empty_fb_i_reg;
  input rd_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [23:0]din;
  wire [23:0]dout;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [4:0]\gic0.gc0.count_d2_reg[4] ;
  wire [23:0]p_0_out;
  wire [0:0]ram_empty_fb_i_reg;
  wire rd_clk;
  wire wr_clk;
  wire [1:0]NLW_RAM_reg_0_31_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_31_12_17_DOD_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_31_18_23_DOD_UNCONNECTED;
  wire [1:0]NLW_RAM_reg_0_31_6_11_DOD_UNCONNECTED;

  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M RAM_reg_0_31_0_5
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(\gic0.gc0.count_d2_reg[4] ),
        .DIA(din[1:0]),
        .DIB(din[3:2]),
        .DIC(din[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(p_0_out[1:0]),
        .DOB(p_0_out[3:2]),
        .DOC(p_0_out[5:4]),
        .DOD(NLW_RAM_reg_0_31_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(E));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M RAM_reg_0_31_12_17
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(\gic0.gc0.count_d2_reg[4] ),
        .DIA(din[13:12]),
        .DIB(din[15:14]),
        .DIC(din[17:16]),
        .DID({1'b0,1'b0}),
        .DOA(p_0_out[13:12]),
        .DOB(p_0_out[15:14]),
        .DOC(p_0_out[17:16]),
        .DOD(NLW_RAM_reg_0_31_12_17_DOD_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(E));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M RAM_reg_0_31_18_23
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(\gic0.gc0.count_d2_reg[4] ),
        .DIA(din[19:18]),
        .DIB(din[21:20]),
        .DIC(din[23:22]),
        .DID({1'b0,1'b0}),
        .DOA(p_0_out[19:18]),
        .DOB(p_0_out[21:20]),
        .DOC(p_0_out[23:22]),
        .DOD(NLW_RAM_reg_0_31_18_23_DOD_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(E));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M RAM_reg_0_31_6_11
       (.ADDRA(\gc0.count_d1_reg[4] ),
        .ADDRB(\gc0.count_d1_reg[4] ),
        .ADDRC(\gc0.count_d1_reg[4] ),
        .ADDRD(\gic0.gc0.count_d2_reg[4] ),
        .DIA(din[7:6]),
        .DIB(din[9:8]),
        .DIC(din[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(p_0_out[7:6]),
        .DOB(p_0_out[9:8]),
        .DOC(p_0_out[11:10]),
        .DOD(NLW_RAM_reg_0_31_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(wr_clk),
        .WE(E));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[0] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[0]),
        .Q(dout[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[10] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[10]),
        .Q(dout[10]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[11] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[11]),
        .Q(dout[11]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[12] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[12]),
        .Q(dout[12]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[13] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[13]),
        .Q(dout[13]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[14] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[14]),
        .Q(dout[14]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[15] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[15]),
        .Q(dout[15]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[16] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[16]),
        .Q(dout[16]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[17] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[17]),
        .Q(dout[17]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[18] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[18]),
        .Q(dout[18]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[19] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[19]),
        .Q(dout[19]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[1] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[1]),
        .Q(dout[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[20] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[20]),
        .Q(dout[20]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[21] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[21]),
        .Q(dout[21]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[22] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[22]),
        .Q(dout[22]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[23] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[23]),
        .Q(dout[23]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[2] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[2]),
        .Q(dout[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[3] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[3]),
        .Q(dout[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[4] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[4]),
        .Q(dout[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[5] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[5]),
        .Q(dout[5]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[6] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[6]),
        .Q(dout[6]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[7] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[7]),
        .Q(dout[7]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[8] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[8]),
        .Q(dout[8]));
  FDCE #(
    .INIT(1'b0)) 
    \gpr1.dout_i_reg[9] 
       (.C(rd_clk),
        .CE(ram_empty_fb_i_reg),
        .CLR(AR),
        .D(p_0_out[9]),
        .Q(dout[9]));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module bd_0ac3_rx_0_fifo_generator_ramfifo
   (empty,
    full,
    dout,
    wr_rst_busy,
    rst,
    clk,
    din,
    rd_en,
    wr_en);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rst;
  input clk;
  input [11:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.wr_n_0 ;
  wire \gwss.wsts/ram_full_comb ;
  wire [3:0]p_0_out_0;
  wire [3:0]p_12_out;
  wire [3:0]p_13_out;
  wire p_19_out;
  wire p_6_out;
  wire ram_rd_en_i;
  wire rd_en;
  wire rst;
  wire rstblk_n_0;
  wire wr_en;
  wire wr_rst_busy;

  bd_0ac3_rx_0_rd_logic \gntv_or_sync_fifo.gl0.rd 
       (.E(ram_rd_en_i),
        .FULL_FB(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .Q(p_12_out),
        .clk(clk),
        .empty(empty),
        .\gcc0.gc0.count_reg[3] (p_13_out),
        .\goreg_dm.dout_i_reg[11] (p_6_out),
        .\gpr1.dout_i_reg[1] (p_0_out_0),
        .\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] (rstblk_n_0),
        .ram_full_comb(\gwss.wsts/ram_full_comb ),
        .rd_en(rd_en),
        .wr_en(wr_en));
  bd_0ac3_rx_0_wr_logic \gntv_or_sync_fifo.gl0.wr 
       (.AR(rstblk_n_0),
        .E(p_19_out),
        .FULL_FB(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .Q(p_13_out),
        .clk(clk),
        .full(full),
        .\gpr1.dout_i_reg[1] (p_12_out),
        .ram_full_comb(\gwss.wsts/ram_full_comb ),
        .wr_en(wr_en));
  bd_0ac3_rx_0_memory \gntv_or_sync_fifo.mem 
       (.AR(rstblk_n_0),
        .E(ram_rd_en_i),
        .EN(p_19_out),
        .clk(clk),
        .count_d10_in(p_12_out),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (p_0_out_0),
        .\gpregsm1.curr_fwft_state_reg[1] (p_6_out));
  bd_0ac3_rx_0_reset_blk_ramfifo rstblk
       (.AR(rstblk_n_0),
        .clk(clk),
        .rst(rst),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module bd_0ac3_rx_0_fifo_generator_ramfifo__parameterized0
   (wr_rst_busy,
    AR,
    empty,
    full,
    dout,
    rst,
    wr_clk,
    rd_clk,
    din,
    rd_en,
    wr_en);
  output wr_rst_busy;
  output [0:0]AR;
  output empty;
  output full;
  output [41:0]dout;
  input rst;
  input wr_clk;
  input rd_clk;
  input [41:0]din;
  input rd_en;
  input wr_en;

  wire [0:0]AR;
  wire [41:0]din;
  wire [41:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gcx.clkx_n_0 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_3 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_4 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_8 ;
  wire [4:0]p_0_out_0;
  wire [4:0]p_13_out;
  wire [1:0]p_14_out;
  wire p_20_out;
  wire [1:0]p_24_out;
  wire [4:2]p_25_out;
  wire ram_rd_en_i;
  wire rd_clk;
  wire rd_en;
  wire [4:2]rd_pntr_plus1;
  wire rst;
  wire rstblk_n_0;
  wire wr_clk;
  wire wr_en;
  wire [1:0]wr_pntr_plus2;
  wire wr_rst_busy;

  bd_0ac3_rx_0_clk_x_pntrs__xdcDup__1 \gntv_or_sync_fifo.gcx.clkx 
       (.Q(p_0_out_0),
        .RD_PNTR_WR(p_25_out),
        .WR_PNTR_RD(p_24_out),
        .\gc0.count_reg[4] (rd_pntr_plus1),
        .\gic0.gc0.count_d1_reg[1] (p_14_out),
        .\gic0.gc0.count_d2_reg[4] (p_13_out),
        .\gic0.gc0.count_reg[1] (wr_pntr_plus2),
        .ram_empty_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .ram_empty_i_reg_0(\gntv_or_sync_fifo.gcx.clkx_n_3 ),
        .ram_full_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_4 ),
        .ram_full_i_reg_0(\gntv_or_sync_fifo.gcx.clkx_n_8 ),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
  bd_0ac3_rx_0_rd_logic__parameterized0_5 \gntv_or_sync_fifo.gl0.rd 
       (.AR(AR),
        .E(ram_rd_en_i),
        .Q(rd_pntr_plus1),
        .WR_PNTR_RD(p_24_out),
        .\dest_out_bin_ff_reg[3] (\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .\dest_out_bin_ff_reg[3]_0 (\gntv_or_sync_fifo.gcx.clkx_n_3 ),
        .empty(empty),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .\src_gray_ff_reg[4] (p_0_out_0));
  bd_0ac3_rx_0_wr_logic__parameterized0_6 \gntv_or_sync_fifo.gl0.wr 
       (.AR(rstblk_n_0),
        .E(p_20_out),
        .Q(wr_pntr_plus2),
        .RD_PNTR_WR(p_25_out),
        .\dest_out_bin_ff_reg[0] (\gntv_or_sync_fifo.gcx.clkx_n_4 ),
        .\dest_out_bin_ff_reg[0]_0 (\gntv_or_sync_fifo.gcx.clkx_n_8 ),
        .full(full),
        .\gic0.gc0.count_d2_reg[1] (p_14_out),
        .\src_gray_ff_reg[4] (p_13_out),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  bd_0ac3_rx_0_memory__parameterized0 \gntv_or_sync_fifo.mem 
       (.AR(AR),
        .E(p_20_out),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[4] (p_0_out_0),
        .\gic0.gc0.count_d2_reg[4] (p_13_out),
        .ram_empty_fb_i_reg(ram_rd_en_i),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
  bd_0ac3_rx_0_reset_blk_ramfifo__parameterized0__xdcDup__1 rstblk
       (.AR(rstblk_n_0),
        .rd_clk(rd_clk),
        .rst(rst),
        .\syncstages_ff_reg[0] (AR),
        .wr_clk(wr_clk),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module bd_0ac3_rx_0_fifo_generator_ramfifo__parameterized1
   (dout,
    empty,
    full,
    almost_full,
    data_count,
    prog_full,
    clk,
    srst,
    din,
    rd_en,
    wr_en);
  output [67:0]dout;
  output empty;
  output full;
  output almost_full;
  output [11:0]data_count;
  output prog_full;
  input clk;
  input srst;
  input [67:0]din;
  input rd_en;
  input wr_en;

  wire almost_full;
  wire clk;
  wire [11:0]data_count;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.rd_n_15 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_16 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_17 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_18 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_31 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_32 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_33 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_34 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_35 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_36 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_37 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_38 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_0 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_29 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_30 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_31 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_32 ;
  wire \gr1.gdcf.dc/cntr_en ;
  wire \gwss.gpf.wrpf/p_1_out ;
  wire [5:0]\gwss.wsts/c0/v1_reg ;
  wire [5:0]\gwss.wsts/c1/v1_reg ;
  wire [5:0]\gwss.wsts/gaf.c2/v1_reg ;
  wire [11:0]p_0_out;
  wire [11:0]p_11_out;
  wire [11:0]p_12_out;
  wire p_3_out;
  wire p_7_out;
  wire prog_full;
  wire rd_en;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire wr_en;
  wire [11:0]wr_pntr_plus2;

  bd_0ac3_rx_0_rd_logic__parameterized1 \gntv_or_sync_fifo.gl0.rd 
       (.D(wr_pntr_plus2),
        .Q(p_0_out),
        .S({\gntv_or_sync_fifo.gl0.rd_n_15 ,\gntv_or_sync_fifo.gl0.rd_n_16 ,\gntv_or_sync_fifo.gl0.rd_n_17 ,\gntv_or_sync_fifo.gl0.rd_n_18 }),
        .clk(clk),
        .cntr_en(\gr1.gdcf.dc/cntr_en ),
        .data_count(data_count),
        .empty(empty),
        .\gcc0.gc1.gsym.count_d1_reg[11] (p_12_out),
        .\gcc0.gc1.gsym.count_d2_reg[11] (p_11_out),
        .\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] ({\gntv_or_sync_fifo.gl0.rd_n_35 ,\gntv_or_sync_fifo.gl0.rd_n_36 ,\gntv_or_sync_fifo.gl0.rd_n_37 ,\gntv_or_sync_fifo.gl0.rd_n_38 }),
        .\gdiff.gcry_1_sym.diff_pntr_pad_reg[8] ({\gntv_or_sync_fifo.gl0.rd_n_31 ,\gntv_or_sync_fifo.gl0.rd_n_32 ,\gntv_or_sync_fifo.gl0.rd_n_33 ,\gntv_or_sync_fifo.gl0.rd_n_34 }),
        .out(p_3_out),
        .p_1_out(\gwss.gpf.wrpf/p_1_out ),
        .p_7_out(p_7_out),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en),
        .v1_reg(\gwss.wsts/c0/v1_reg ),
        .v1_reg_0(\gwss.wsts/c1/v1_reg ),
        .v1_reg_1(\gwss.wsts/gaf.c2/v1_reg ),
        .wr_en(wr_en));
  bd_0ac3_rx_0_wr_logic__parameterized1 \gntv_or_sync_fifo.gl0.wr 
       (.D(wr_pntr_plus2),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ({\gntv_or_sync_fifo.gl0.wr_n_31 ,\gntv_or_sync_fifo.gl0.wr_n_32 }),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 (p_11_out),
        .Q(p_12_out),
        .S({\gntv_or_sync_fifo.gl0.rd_n_15 ,\gntv_or_sync_fifo.gl0.rd_n_16 ,\gntv_or_sync_fifo.gl0.rd_n_17 ,\gntv_or_sync_fifo.gl0.rd_n_18 }),
        .WEA({\gntv_or_sync_fifo.gl0.wr_n_29 ,\gntv_or_sync_fifo.gl0.wr_n_30 }),
        .almost_full(almost_full),
        .clk(clk),
        .cntr_en(\gr1.gdcf.dc/cntr_en ),
        .full(full),
        .\gc0.count_d1_reg[11] ({\gntv_or_sync_fifo.gl0.rd_n_35 ,\gntv_or_sync_fifo.gl0.rd_n_36 ,\gntv_or_sync_fifo.gl0.rd_n_37 ,\gntv_or_sync_fifo.gl0.rd_n_38 }),
        .\gc0.count_d1_reg[7] ({\gntv_or_sync_fifo.gl0.rd_n_31 ,\gntv_or_sync_fifo.gl0.rd_n_32 ,\gntv_or_sync_fifo.gl0.rd_n_33 ,\gntv_or_sync_fifo.gl0.rd_n_34 }),
        .\gpregsm1.user_valid_reg (p_3_out),
        .out(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .p_1_out(\gwss.gpf.wrpf/p_1_out ),
        .p_7_out(p_7_out),
        .prog_full(prog_full),
        .rd_en(rd_en),
        .srst(srst),
        .v1_reg(\gwss.wsts/c0/v1_reg ),
        .v1_reg_0(\gwss.wsts/c1/v1_reg ),
        .v1_reg_1(\gwss.wsts/gaf.c2/v1_reg ),
        .wr_en(wr_en));
  bd_0ac3_rx_0_memory__parameterized1 \gntv_or_sync_fifo.mem 
       (.Q(p_0_out),
        .WEA({\gntv_or_sync_fifo.gl0.wr_n_29 ,\gntv_or_sync_fifo.gl0.wr_n_30 }),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gcc0.gc1.gsym.count_d2_reg[11] (p_11_out),
        .mem_wen_reg({\gntv_or_sync_fifo.gl0.wr_n_31 ,\gntv_or_sync_fifo.gl0.wr_n_32 }),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module bd_0ac3_rx_0_fifo_generator_ramfifo__parameterized2
   (wr_rst_busy,
    AR,
    empty,
    full,
    dout,
    rst,
    wr_clk,
    rd_clk,
    din,
    rd_en,
    wr_en);
  output wr_rst_busy;
  output [0:0]AR;
  output empty;
  output full;
  output [23:0]dout;
  input rst;
  input wr_clk;
  input rd_clk;
  input [23:0]din;
  input rd_en;
  input wr_en;

  wire [0:0]AR;
  wire [23:0]din;
  wire [23:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gcx.clkx_n_0 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_3 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_4 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_8 ;
  wire [4:0]p_0_out_0;
  wire [4:0]p_13_out;
  wire [1:0]p_14_out;
  wire p_20_out;
  wire [1:0]p_24_out;
  wire [4:2]p_25_out;
  wire ram_rd_en_i;
  wire rd_clk;
  wire rd_en;
  wire [4:2]rd_pntr_plus1;
  wire rst;
  wire rstblk_n_0;
  wire wr_clk;
  wire wr_en;
  wire [1:0]wr_pntr_plus2;
  wire wr_rst_busy;

  bd_0ac3_rx_0_clk_x_pntrs \gntv_or_sync_fifo.gcx.clkx 
       (.Q(p_0_out_0),
        .RD_PNTR_WR(p_25_out),
        .WR_PNTR_RD(p_24_out),
        .\gc0.count_reg[4] (rd_pntr_plus1),
        .\gic0.gc0.count_d1_reg[1] (p_14_out),
        .\gic0.gc0.count_d2_reg[4] (p_13_out),
        .\gic0.gc0.count_reg[1] (wr_pntr_plus2),
        .ram_empty_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .ram_empty_i_reg_0(\gntv_or_sync_fifo.gcx.clkx_n_3 ),
        .ram_full_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_4 ),
        .ram_full_i_reg_0(\gntv_or_sync_fifo.gcx.clkx_n_8 ),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
  bd_0ac3_rx_0_rd_logic__parameterized0 \gntv_or_sync_fifo.gl0.rd 
       (.AR(AR),
        .E(ram_rd_en_i),
        .Q(rd_pntr_plus1),
        .WR_PNTR_RD(p_24_out),
        .\dest_out_bin_ff_reg[3] (\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .\dest_out_bin_ff_reg[3]_0 (\gntv_or_sync_fifo.gcx.clkx_n_3 ),
        .empty(empty),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .\src_gray_ff_reg[4] (p_0_out_0));
  bd_0ac3_rx_0_wr_logic__parameterized0 \gntv_or_sync_fifo.gl0.wr 
       (.AR(rstblk_n_0),
        .E(p_20_out),
        .Q(wr_pntr_plus2),
        .RD_PNTR_WR(p_25_out),
        .\dest_out_bin_ff_reg[0] (\gntv_or_sync_fifo.gcx.clkx_n_4 ),
        .\dest_out_bin_ff_reg[0]_0 (\gntv_or_sync_fifo.gcx.clkx_n_8 ),
        .full(full),
        .\gic0.gc0.count_d2_reg[1] (p_14_out),
        .\src_gray_ff_reg[4] (p_13_out),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  bd_0ac3_rx_0_memory__parameterized2 \gntv_or_sync_fifo.mem 
       (.AR(AR),
        .E(p_20_out),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[4] (p_0_out_0),
        .\gic0.gc0.count_d2_reg[4] (p_13_out),
        .ram_empty_fb_i_reg(ram_rd_en_i),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
  bd_0ac3_rx_0_reset_blk_ramfifo__parameterized0 rstblk
       (.AR(rstblk_n_0),
        .rd_clk(rd_clk),
        .rst(rst),
        .\syncstages_ff_reg[0] (AR),
        .wr_clk(wr_clk),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module bd_0ac3_rx_0_fifo_generator_ramfifo__xdcDup__1
   (empty,
    full,
    dout,
    wr_rst_busy,
    rst,
    clk,
    din,
    rd_en,
    wr_en);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rst;
  input clk;
  input [11:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gl0.wr_n_0 ;
  wire \gwss.wsts/ram_full_comb ;
  wire [3:0]p_0_out_0;
  wire [3:0]p_12_out;
  wire [3:0]p_13_out;
  wire p_19_out;
  wire p_6_out;
  wire ram_rd_en_i;
  wire rd_en;
  wire rst;
  wire rstblk_n_0;
  wire wr_en;
  wire wr_rst_busy;

  bd_0ac3_rx_0_rd_logic_11 \gntv_or_sync_fifo.gl0.rd 
       (.E(ram_rd_en_i),
        .FULL_FB(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .Q(p_12_out),
        .clk(clk),
        .empty(empty),
        .\gcc0.gc0.count_reg[3] (p_13_out),
        .\goreg_dm.dout_i_reg[11] (p_6_out),
        .\gpr1.dout_i_reg[1] (p_0_out_0),
        .\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] (rstblk_n_0),
        .ram_full_comb(\gwss.wsts/ram_full_comb ),
        .rd_en(rd_en),
        .wr_en(wr_en));
  bd_0ac3_rx_0_wr_logic_12 \gntv_or_sync_fifo.gl0.wr 
       (.AR(rstblk_n_0),
        .E(p_19_out),
        .FULL_FB(\gntv_or_sync_fifo.gl0.wr_n_0 ),
        .Q(p_13_out),
        .clk(clk),
        .full(full),
        .\gpr1.dout_i_reg[1] (p_12_out),
        .ram_full_comb(\gwss.wsts/ram_full_comb ),
        .wr_en(wr_en));
  bd_0ac3_rx_0_memory_13 \gntv_or_sync_fifo.mem 
       (.AR(rstblk_n_0),
        .E(ram_rd_en_i),
        .EN(p_19_out),
        .clk(clk),
        .count_d10_in(p_12_out),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[3] (p_0_out_0),
        .\gpregsm1.curr_fwft_state_reg[1] (p_6_out));
  bd_0ac3_rx_0_reset_blk_ramfifo__xdcDup__1 rstblk
       (.AR(rstblk_n_0),
        .clk(clk),
        .rst(rst),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module bd_0ac3_rx_0_fifo_generator_top
   (empty,
    full,
    dout,
    wr_rst_busy,
    rst,
    clk,
    din,
    rd_en,
    wr_en);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rst;
  input clk;
  input [11:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  bd_0ac3_rx_0_fifo_generator_ramfifo \grf.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module bd_0ac3_rx_0_fifo_generator_top__parameterized0
   (wr_rst_busy,
    AR,
    empty,
    full,
    dout,
    rst,
    wr_clk,
    rd_clk,
    din,
    rd_en,
    wr_en);
  output wr_rst_busy;
  output [0:0]AR;
  output empty;
  output full;
  output [41:0]dout;
  input rst;
  input wr_clk;
  input rd_clk;
  input [41:0]din;
  input rd_en;
  input wr_en;

  wire [0:0]AR;
  wire [41:0]din;
  wire [41:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  bd_0ac3_rx_0_fifo_generator_ramfifo__parameterized0 \grf.rf 
       (.AR(AR),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module bd_0ac3_rx_0_fifo_generator_top__parameterized1
   (dout,
    empty,
    full,
    almost_full,
    data_count,
    prog_full,
    clk,
    srst,
    din,
    rd_en,
    wr_en);
  output [67:0]dout;
  output empty;
  output full;
  output almost_full;
  output [11:0]data_count;
  output prog_full;
  input clk;
  input srst;
  input [67:0]din;
  input rd_en;
  input wr_en;

  wire almost_full;
  wire clk;
  wire [11:0]data_count;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_en;
  wire srst;
  wire wr_en;

  bd_0ac3_rx_0_fifo_generator_ramfifo__parameterized1 \grf.rf 
       (.almost_full(almost_full),
        .clk(clk),
        .data_count(data_count),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module bd_0ac3_rx_0_fifo_generator_top__parameterized2
   (wr_rst_busy,
    AR,
    empty,
    full,
    dout,
    rst,
    wr_clk,
    rd_clk,
    din,
    rd_en,
    wr_en);
  output wr_rst_busy;
  output [0:0]AR;
  output empty;
  output full;
  output [23:0]dout;
  input rst;
  input wr_clk;
  input rd_clk;
  input [23:0]din;
  input rd_en;
  input wr_en;

  wire [0:0]AR;
  wire [23:0]din;
  wire [23:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  bd_0ac3_rx_0_fifo_generator_ramfifo__parameterized2 \grf.rf 
       (.AR(AR),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module bd_0ac3_rx_0_fifo_generator_top__xdcDup__1
   (empty,
    full,
    dout,
    wr_rst_busy,
    rst,
    clk,
    din,
    rd_en,
    wr_en);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rst;
  input clk;
  input [11:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  bd_0ac3_rx_0_fifo_generator_ramfifo__xdcDup__1 \grf.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "5" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "12" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "12" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynq" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "2" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "15" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "14" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "5" *) 
(* C_RD_DEPTH = "16" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "4" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "1" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "5" *) 
(* C_WR_DEPTH = "16" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "4" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_2" *) 
module bd_0ac3_rx_0_fifo_generator_v13_2_2
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [11:0]din;
  input wr_en;
  input rd_en;
  input [3:0]prog_empty_thresh;
  input [3:0]prog_empty_thresh_assert;
  input [3:0]prog_empty_thresh_negate;
  input [3:0]prog_full_thresh;
  input [3:0]prog_full_thresh_assert;
  input [3:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [11:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [4:0]data_count;
  output [4:0]rd_data_count;
  output [4:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = wr_rst_busy;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  bd_0ac3_rx_0_fifo_generator_v13_2_2_synth inst_fifo_gen
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "5" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "42" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "42" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynq" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "2" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "2" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x72" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "29" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "28" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "5" *) 
(* C_RD_DEPTH = "32" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "5" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "5" *) 
(* C_WR_DEPTH = "32" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "5" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_2" *) 
module bd_0ac3_rx_0_fifo_generator_v13_2_2__parameterized1
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [41:0]din;
  input wr_en;
  input rd_en;
  input [4:0]prog_empty_thresh;
  input [4:0]prog_empty_thresh_assert;
  input [4:0]prog_empty_thresh_negate;
  input [4:0]prog_full_thresh;
  input [4:0]prog_full_thresh_assert;
  input [4:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [41:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [4:0]data_count;
  output [4:0]rd_data_count;
  output [4:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire [41:0]din;
  wire [41:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  bd_0ac3_rx_0_fifo_generator_v13_2_2_synth__parameterized0 inst_fifo_gen
       (.AR(rd_rst_busy),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "12" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "68" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "68" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynq" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "1" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "1" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "0" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "1" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "4kx9" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "4093" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "4092" *) (* C_PROG_FULL_TYPE = "1" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "13" *) 
(* C_RD_DEPTH = "4096" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "12" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "1" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "1" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "13" *) 
(* C_WR_DEPTH = "4096" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "12" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_2" *) 
module bd_0ac3_rx_0_fifo_generator_v13_2_2__parameterized3
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [67:0]din;
  input wr_en;
  input rd_en;
  input [11:0]prog_empty_thresh;
  input [11:0]prog_empty_thresh_assert;
  input [11:0]prog_empty_thresh_negate;
  input [11:0]prog_full_thresh;
  input [11:0]prog_full_thresh_assert;
  input [11:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [67:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [11:0]data_count;
  output [12:0]rd_data_count;
  output [12:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire almost_full;
  wire clk;
  wire [11:0]data_count;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_en;
  wire srst;
  wire wr_en;

  assign almost_empty = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign rd_data_count[12] = \<const0> ;
  assign rd_data_count[11] = \<const0> ;
  assign rd_data_count[10] = \<const0> ;
  assign rd_data_count[9] = \<const0> ;
  assign rd_data_count[8] = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[12] = \<const0> ;
  assign wr_data_count[11] = \<const0> ;
  assign wr_data_count[10] = \<const0> ;
  assign wr_data_count[9] = \<const0> ;
  assign wr_data_count[8] = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  bd_0ac3_rx_0_fifo_generator_v13_2_2_synth__parameterized1 inst_fifo_gen
       (.almost_full(almost_full),
        .clk(clk),
        .data_count(data_count),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "5" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "24" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "24" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynq" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "2" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "2" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "29" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "28" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "5" *) 
(* C_RD_DEPTH = "32" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "5" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "5" *) 
(* C_WR_DEPTH = "32" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "5" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_2" *) 
module bd_0ac3_rx_0_fifo_generator_v13_2_2__parameterized5
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [23:0]din;
  input wr_en;
  input rd_en;
  input [4:0]prog_empty_thresh;
  input [4:0]prog_empty_thresh_assert;
  input [4:0]prog_empty_thresh_negate;
  input [4:0]prog_full_thresh;
  input [4:0]prog_full_thresh_assert;
  input [4:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [23:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [4:0]data_count;
  output [4:0]rd_data_count;
  output [4:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire [23:0]din;
  wire [23:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  bd_0ac3_rx_0_fifo_generator_v13_2_2_synth__parameterized2 inst_fifo_gen
       (.AR(rd_rst_busy),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "1" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "5" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "12" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "12" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynq" *) (* C_FULL_FLAGS_RST_VAL = "0" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "2" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "15" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "14" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "5" *) 
(* C_RD_DEPTH = "16" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "4" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "1" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "5" *) 
(* C_WR_DEPTH = "16" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "4" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_2" *) 
module bd_0ac3_rx_0_fifo_generator_v13_2_2__xdcDup__1
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [11:0]din;
  input wr_en;
  input rd_en;
  input [3:0]prog_empty_thresh;
  input [3:0]prog_empty_thresh_assert;
  input [3:0]prog_empty_thresh_negate;
  input [3:0]prog_full_thresh;
  input [3:0]prog_full_thresh_assert;
  input [3:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [11:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [4:0]data_count;
  output [4:0]rd_data_count;
  output [4:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = wr_rst_busy;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  bd_0ac3_rx_0_fifo_generator_v13_2_2_synth__xdcDup__1 inst_fifo_gen
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_2_synth" *) 
module bd_0ac3_rx_0_fifo_generator_v13_2_2_synth
   (empty,
    full,
    dout,
    wr_rst_busy,
    rst,
    clk,
    din,
    rd_en,
    wr_en);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rst;
  input clk;
  input [11:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  bd_0ac3_rx_0_fifo_generator_top \gconvfifo.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_2_synth" *) 
module bd_0ac3_rx_0_fifo_generator_v13_2_2_synth__parameterized0
   (wr_rst_busy,
    AR,
    empty,
    full,
    dout,
    rst,
    wr_clk,
    rd_clk,
    din,
    rd_en,
    wr_en);
  output wr_rst_busy;
  output [0:0]AR;
  output empty;
  output full;
  output [41:0]dout;
  input rst;
  input wr_clk;
  input rd_clk;
  input [41:0]din;
  input rd_en;
  input wr_en;

  wire [0:0]AR;
  wire [41:0]din;
  wire [41:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  bd_0ac3_rx_0_fifo_generator_top__parameterized0 \gconvfifo.rf 
       (.AR(AR),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_2_synth" *) 
module bd_0ac3_rx_0_fifo_generator_v13_2_2_synth__parameterized1
   (dout,
    empty,
    full,
    almost_full,
    data_count,
    prog_full,
    clk,
    srst,
    din,
    rd_en,
    wr_en);
  output [67:0]dout;
  output empty;
  output full;
  output almost_full;
  output [11:0]data_count;
  output prog_full;
  input clk;
  input srst;
  input [67:0]din;
  input rd_en;
  input wr_en;

  wire almost_full;
  wire clk;
  wire [11:0]data_count;
  wire [67:0]din;
  wire [67:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_en;
  wire srst;
  wire wr_en;

  bd_0ac3_rx_0_fifo_generator_top__parameterized1 \gconvfifo.rf 
       (.almost_full(almost_full),
        .clk(clk),
        .data_count(data_count),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_2_synth" *) 
module bd_0ac3_rx_0_fifo_generator_v13_2_2_synth__parameterized2
   (wr_rst_busy,
    AR,
    empty,
    full,
    dout,
    rst,
    wr_clk,
    rd_clk,
    din,
    rd_en,
    wr_en);
  output wr_rst_busy;
  output [0:0]AR;
  output empty;
  output full;
  output [23:0]dout;
  input rst;
  input wr_clk;
  input rd_clk;
  input [23:0]din;
  input rd_en;
  input wr_en;

  wire [0:0]AR;
  wire [23:0]din;
  wire [23:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst_busy;

  bd_0ac3_rx_0_fifo_generator_top__parameterized2 \gconvfifo.rf 
       (.AR(AR),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_2_synth" *) 
module bd_0ac3_rx_0_fifo_generator_v13_2_2_synth__xdcDup__1
   (empty,
    full,
    dout,
    wr_rst_busy,
    rst,
    clk,
    din,
    rd_en,
    wr_en);
  output empty;
  output full;
  output [11:0]dout;
  output wr_rst_busy;
  input rst;
  input clk;
  input [11:0]din;
  input rd_en;
  input wr_en;

  wire clk;
  wire [11:0]din;
  wire [11:0]dout;
  wire empty;
  wire full;
  wire rd_en;
  wire rst;
  wire wr_en;
  wire wr_rst_busy;

  bd_0ac3_rx_0_fifo_generator_top__xdcDup__1 \gconvfifo.rf 
       (.clk(clk),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module bd_0ac3_rx_0_memory
   (dout,
    clk,
    EN,
    din,
    \gc0.count_d1_reg[3] ,
    count_d10_in,
    E,
    AR,
    \gpregsm1.curr_fwft_state_reg[1] );
  output [11:0]dout;
  input clk;
  input EN;
  input [11:0]din;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]count_d10_in;
  input [0:0]E;
  input [0:0]AR;
  input [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  wire [0:0]AR;
  wire [0:0]E;
  wire EN;
  wire clk;
  wire [3:0]count_d10_in;
  wire [11:0]din;
  wire [11:0]dout;
  wire [11:0]dout_i;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  bd_0ac3_rx_0_dmem \gdm.dm_gen.dm 
       (.AR(AR),
        .E(E),
        .EN(EN),
        .Q(dout_i),
        .clk(clk),
        .count_d10_in(count_d10_in),
        .din(din),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[0] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[0]),
        .Q(dout[0]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[10] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[10]),
        .Q(dout[10]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[11] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[11]),
        .Q(dout[11]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[1] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[1]),
        .Q(dout[1]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[2] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[2]),
        .Q(dout[2]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[3] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[3]),
        .Q(dout[3]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[4] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[4]),
        .Q(dout[4]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[5] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[5]),
        .Q(dout[5]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[6] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[6]),
        .Q(dout[6]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[7] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[7]),
        .Q(dout[7]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[8] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[8]),
        .Q(dout[8]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[9] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[9]),
        .Q(dout[9]));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module bd_0ac3_rx_0_memory_13
   (dout,
    clk,
    EN,
    din,
    \gc0.count_d1_reg[3] ,
    count_d10_in,
    E,
    AR,
    \gpregsm1.curr_fwft_state_reg[1] );
  output [11:0]dout;
  input clk;
  input EN;
  input [11:0]din;
  input [3:0]\gc0.count_d1_reg[3] ;
  input [3:0]count_d10_in;
  input [0:0]E;
  input [0:0]AR;
  input [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  wire [0:0]AR;
  wire [0:0]E;
  wire EN;
  wire clk;
  wire [3:0]count_d10_in;
  wire [11:0]din;
  wire [11:0]dout;
  wire [11:0]dout_i;
  wire [3:0]\gc0.count_d1_reg[3] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[1] ;

  bd_0ac3_rx_0_dmem_14 \gdm.dm_gen.dm 
       (.AR(AR),
        .E(E),
        .EN(EN),
        .Q(dout_i),
        .clk(clk),
        .count_d10_in(count_d10_in),
        .din(din),
        .\gc0.count_d1_reg[3] (\gc0.count_d1_reg[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[0] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[0]),
        .Q(dout[0]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[10] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[10]),
        .Q(dout[10]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[11] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[11]),
        .Q(dout[11]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[1] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[1]),
        .Q(dout[1]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[2] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[2]),
        .Q(dout[2]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[3] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[3]),
        .Q(dout[3]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[4] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[4]),
        .Q(dout[4]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[5] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[5]),
        .Q(dout[5]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[6] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[6]),
        .Q(dout[6]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[7] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[7]),
        .Q(dout[7]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[8] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[8]),
        .Q(dout[8]));
  FDCE #(
    .INIT(1'b0)) 
    \goreg_dm.dout_i_reg[9] 
       (.C(clk),
        .CE(\gpregsm1.curr_fwft_state_reg[1] ),
        .CLR(AR),
        .D(dout_i[9]),
        .Q(dout[9]));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module bd_0ac3_rx_0_memory__parameterized0
   (dout,
    wr_clk,
    E,
    din,
    \gc0.count_d1_reg[4] ,
    \gic0.gc0.count_d2_reg[4] ,
    ram_empty_fb_i_reg,
    rd_clk,
    AR);
  output [41:0]dout;
  input wr_clk;
  input [0:0]E;
  input [41:0]din;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [4:0]\gic0.gc0.count_d2_reg[4] ;
  input [0:0]ram_empty_fb_i_reg;
  input rd_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [41:0]din;
  wire [41:0]dout;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [4:0]\gic0.gc0.count_d2_reg[4] ;
  wire [0:0]ram_empty_fb_i_reg;
  wire rd_clk;
  wire wr_clk;

  bd_0ac3_rx_0_dmem__parameterized0 \gdm.dm_gen.dm 
       (.AR(AR),
        .E(E),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[4] (\gc0.count_d1_reg[4] ),
        .\gic0.gc0.count_d2_reg[4] (\gic0.gc0.count_d2_reg[4] ),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module bd_0ac3_rx_0_memory__parameterized1
   (dout,
    clk,
    mem_wen_reg,
    tmp_ram_rd_en,
    tmp_ram_regout_en,
    srst,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    Q,
    din,
    WEA);
  output [67:0]dout;
  input clk;
  input [1:0]mem_wen_reg;
  input tmp_ram_rd_en;
  input tmp_ram_regout_en;
  input srst;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]Q;
  input [67:0]din;
  input [1:0]WEA;

  wire [11:0]Q;
  wire [1:0]WEA;
  wire clk;
  wire [67:0]din;
  wire [67:0]dout;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [1:0]mem_wen_reg;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;

  bd_0ac3_rx_0_blk_mem_gen_v8_4_1 \gbm.gbmg.gbmgb.ngecc.bmg 
       (.Q(Q),
        .WEA(WEA),
        .clk(clk),
        .din(din),
        .dout(dout),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .mem_wen_reg(mem_wen_reg),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module bd_0ac3_rx_0_memory__parameterized2
   (dout,
    wr_clk,
    E,
    din,
    \gc0.count_d1_reg[4] ,
    \gic0.gc0.count_d2_reg[4] ,
    ram_empty_fb_i_reg,
    rd_clk,
    AR);
  output [23:0]dout;
  input wr_clk;
  input [0:0]E;
  input [23:0]din;
  input [4:0]\gc0.count_d1_reg[4] ;
  input [4:0]\gic0.gc0.count_d2_reg[4] ;
  input [0:0]ram_empty_fb_i_reg;
  input rd_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [23:0]din;
  wire [23:0]dout;
  wire [4:0]\gc0.count_d1_reg[4] ;
  wire [4:0]\gic0.gc0.count_d2_reg[4] ;
  wire [0:0]ram_empty_fb_i_reg;
  wire rd_clk;
  wire wr_clk;

  bd_0ac3_rx_0_dmem__parameterized1 \gdm.dm_gen.dm 
       (.AR(AR),
        .E(E),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[4] (\gc0.count_d1_reg[4] ),
        .\gic0.gc0.count_d2_reg[4] (\gic0.gc0.count_d2_reg[4] ),
        .ram_empty_fb_i_reg(ram_empty_fb_i_reg),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_control" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_control
   (out,
    pkt_valid,
    cur_lp_vc,
    latest_vc,
    \ERR_FRAME_SYNC_ALL[0].errframesync_reg[0]_0 ,
    p_1_in4_in,
    p_1_in1_in,
    p_1_in,
    reg_status,
    crc_rst,
    lp_wc0,
    \errframedata_d1_reg[0]_0 ,
    \errframedata_d1_reg[1]_0 ,
    \errframedata_d1_reg[2]_0 ,
    p_0_in,
    \FSM_sequential_cur_state_reg[0]_0 ,
    phecc_start,
    phecc_start_d1_reg,
    phecc_start_d1_reg_0,
    \ERR_FRAME_SYNC_ALL[0].errframesync_reg[0]_1 ,
    \ERR_FRAME_SYNC_ALL[1].errframesync_reg[1]_0 ,
    \ERR_FRAME_SYNC_ALL[2].errframesync_reg[2]_0 ,
    \ERR_FRAME_SYNC_ALL[3].errframesync_reg[3]_0 ,
    \src_ff_reg[6] ,
    crc_start,
    pre_byt_cnt1_reg,
    E,
    crc_en,
    c_en_reg,
    rd_en,
    crc_trig_d10,
    m_axis_aclk,
    srst,
    empty,
    p_20_out,
    p_18_out,
    p_16_out,
    p_14_out,
    \diwc_corrected_reg[7] ,
    \diwc_corrected_reg[6] ,
    errframedata_d1,
    \diwc_corrected_reg[7]_0 ,
    \diwc_corrected_reg[6]_0 ,
    p_32_out,
    p_31_out,
    p_30_out,
    p_29_out,
    p_7_out,
    p_6_out,
    p_3_out,
    p_0_out,
    diwc_valid_reg,
    \diwc_corrected_reg[2] ,
    diwc_valid_reg_0,
    Q,
    crc_done,
    \FSM_sequential_cur_state_reg[0]_1 ,
    data_done,
    \phecc_status_reg[2] ,
    phecc_done,
    core_men_r2c,
    m_axis_aresetn,
    dout,
    spkt_fifo_wen0,
    wc_gt_pload,
    fsm_wip_reg,
    \LINE_BUF_WR_64.str_fwd_reg ,
    data_wip_reg_reg,
    CO,
    diwc_corrected_zero,
    D,
    \phecc_status_reg[2]_0 );
  output [2:0]out;
  output pkt_valid;
  output [1:0]cur_lp_vc;
  output [1:0]latest_vc;
  output \ERR_FRAME_SYNC_ALL[0].errframesync_reg[0]_0 ;
  output p_1_in4_in;
  output p_1_in1_in;
  output p_1_in;
  output [9:0]reg_status;
  output crc_rst;
  output lp_wc0;
  output \errframedata_d1_reg[0]_0 ;
  output \errframedata_d1_reg[1]_0 ;
  output \errframedata_d1_reg[2]_0 ;
  output p_0_in;
  output \FSM_sequential_cur_state_reg[0]_0 ;
  output phecc_start;
  output phecc_start_d1_reg;
  output phecc_start_d1_reg_0;
  output \ERR_FRAME_SYNC_ALL[0].errframesync_reg[0]_1 ;
  output \ERR_FRAME_SYNC_ALL[1].errframesync_reg[1]_0 ;
  output \ERR_FRAME_SYNC_ALL[2].errframesync_reg[2]_0 ;
  output \ERR_FRAME_SYNC_ALL[3].errframesync_reg[3]_0 ;
  output [3:0]\src_ff_reg[6] ;
  output crc_start;
  output pre_byt_cnt1_reg;
  output [0:0]E;
  output crc_en;
  output c_en_reg;
  output rd_en;
  output crc_trig_d10;
  input m_axis_aclk;
  input srst;
  input empty;
  input p_20_out;
  input p_18_out;
  input p_16_out;
  input p_14_out;
  input \diwc_corrected_reg[7] ;
  input \diwc_corrected_reg[6] ;
  input errframedata_d1;
  input \diwc_corrected_reg[7]_0 ;
  input \diwc_corrected_reg[6]_0 ;
  input p_32_out;
  input p_31_out;
  input p_30_out;
  input p_29_out;
  input p_7_out;
  input p_6_out;
  input p_3_out;
  input p_0_out;
  input diwc_valid_reg;
  input \diwc_corrected_reg[2] ;
  input diwc_valid_reg_0;
  input [1:0]Q;
  input crc_done;
  input \FSM_sequential_cur_state_reg[0]_1 ;
  input data_done;
  input [0:0]\phecc_status_reg[2] ;
  input phecc_done;
  input core_men_r2c;
  input m_axis_aresetn;
  input [2:0]dout;
  input spkt_fifo_wen0;
  input wc_gt_pload;
  input fsm_wip_reg;
  input \LINE_BUF_WR_64.str_fwd_reg ;
  input data_wip_reg_reg;
  input [0:0]CO;
  input diwc_corrected_zero;
  input [0:0]D;
  input [1:0]\phecc_status_reg[2]_0 ;

  wire [0:0]CO;
  wire [0:0]D;
  wire [0:0]E;
  wire \ERR_FRAME_DATA[0].errframedata[0]_i_1_n_0 ;
  wire \ERR_FRAME_DATA[1].errframedata[1]_i_1_n_0 ;
  wire \ERR_FRAME_DATA[2].errframedata[2]_i_1_n_0 ;
  wire \ERR_FRAME_DATA[3].errframedata[3]_i_1_n_0 ;
  wire \ERR_FRAME_SYNC_ALL[0].errframesync_reg[0]_0 ;
  wire \ERR_FRAME_SYNC_ALL[0].errframesync_reg[0]_1 ;
  wire \ERR_FRAME_SYNC_ALL[1].errframesync_reg[1]_0 ;
  wire \ERR_FRAME_SYNC_ALL[2].errframesync_reg[2]_0 ;
  wire \ERR_FRAME_SYNC_ALL[3].errframesync_reg[3]_0 ;
  wire \FE_DETECT[0].fe_detect_reg_n_0_[0] ;
  wire \FE_DETECT[1].fe_detect_reg_n_0_[1] ;
  wire \FE_DETECT[2].fe_detect_reg_n_0_[2] ;
  wire \FE_DETECT[3].fe_detect_reg_n_0_[3] ;
  wire \FSM_sequential_cur_state[1]_i_1_n_0 ;
  wire \FSM_sequential_cur_state[1]_i_2_n_0 ;
  wire \FSM_sequential_cur_state[2]_i_2_n_0 ;
  wire \FSM_sequential_cur_state_reg[0]_0 ;
  wire \FSM_sequential_cur_state_reg[0]_1 ;
  wire \LINE_BUF_WR_64.str_fwd_reg ;
  wire [1:0]Q;
  wire c_en_reg;
  wire core_men_r2c;
  wire crc_done;
  wire crc_en;
  wire crc_rst;
  wire crc_rst0;
  wire crc_start;
  wire crc_trig_d10;
  wire crc_trig_d1_i_2_n_0;
  wire crc_trig_d1_i_3_n_0;
  wire [1:0]cur_lp_vc;
  wire data_done;
  wire data_wip_reg_reg;
  wire \diwc_corrected_reg[2] ;
  wire \diwc_corrected_reg[6] ;
  wire \diwc_corrected_reg[6]_0 ;
  wire \diwc_corrected_reg[7] ;
  wire \diwc_corrected_reg[7]_0 ;
  wire diwc_corrected_zero;
  wire diwc_valid_reg;
  wire diwc_valid_reg_0;
  wire [2:0]dout;
  wire empty;
  wire errframedata_d1;
  wire \errframedata_d1_reg[0]_0 ;
  wire \errframedata_d1_reg[1]_0 ;
  wire \errframedata_d1_reg[2]_0 ;
  wire fsm_wip_reg;
  wire [1:0]latest_vc;
  wire lp_wc0;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  (* RTL_KEEP = "yes" *) wire [2:0]out;
  wire p_0_in;
  wire p_0_out;
  wire p_14_out;
  wire p_16_out;
  wire p_18_out;
  wire p_1_in;
  wire p_1_in1_in;
  wire p_1_in4_in;
  wire p_20_out;
  wire p_29_out;
  wire p_30_out;
  wire p_31_out;
  wire p_32_out;
  wire p_3_out;
  wire p_6_out;
  wire p_7_out;
  wire phecc_done;
  wire phecc_start;
  wire phecc_start_d1_reg;
  wire phecc_start_d1_reg_0;
  wire [0:0]\phecc_status_reg[2] ;
  wire [1:0]\phecc_status_reg[2]_0 ;
  wire pkt_fifo_empty_reg;
  wire pkt_fifo_i_2_n_0;
  wire pkt_fifo_i_3_n_0;
  wire pkt_fifo_ren_reg;
  wire pkt_rdvld0;
  wire pkt_valid;
  wire pre_byt_cnt1_reg;
  wire [2:0]prv_state;
  wire \prv_state[0]_i_1_n_0 ;
  wire \prv_state[1]_i_1_n_0 ;
  wire \prv_state[2]_i_1_n_0 ;
  wire rd_en;
  wire [2:1]reg_ecc_status_i;
  wire [9:0]reg_status;
  wire spkt_fifo_wen0;
  wire [3:0]\src_ff_reg[6] ;
  wire srst;
  wire wc_gt_pload;

  LUT6 #(
    .INIT(64'h00000000AABAAAAA)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_1 
       (.I0(\errframedata_d1_reg[0]_0 ),
        .I1(cur_lp_vc[0]),
        .I2(crc_done),
        .I3(cur_lp_vc[1]),
        .I4(CO),
        .I5(\FE_DETECT[0].fe_detect_reg_n_0_[0] ),
        .O(\ERR_FRAME_DATA[0].errframedata[0]_i_1_n_0 ));
  FDRE \ERR_FRAME_DATA[0].errframedata_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\ERR_FRAME_DATA[0].errframedata[0]_i_1_n_0 ),
        .Q(\errframedata_d1_reg[0]_0 ),
        .R(errframedata_d1));
  LUT6 #(
    .INIT(64'h00000000AAEAAAAA)) 
    \ERR_FRAME_DATA[1].errframedata[1]_i_1 
       (.I0(\errframedata_d1_reg[1]_0 ),
        .I1(cur_lp_vc[0]),
        .I2(crc_done),
        .I3(cur_lp_vc[1]),
        .I4(CO),
        .I5(\FE_DETECT[1].fe_detect_reg_n_0_[1] ),
        .O(\ERR_FRAME_DATA[1].errframedata[1]_i_1_n_0 ));
  FDRE \ERR_FRAME_DATA[1].errframedata_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\ERR_FRAME_DATA[1].errframedata[1]_i_1_n_0 ),
        .Q(\errframedata_d1_reg[1]_0 ),
        .R(errframedata_d1));
  LUT6 #(
    .INIT(64'h00000000BAAAAAAA)) 
    \ERR_FRAME_DATA[2].errframedata[2]_i_1 
       (.I0(\errframedata_d1_reg[2]_0 ),
        .I1(cur_lp_vc[0]),
        .I2(crc_done),
        .I3(cur_lp_vc[1]),
        .I4(CO),
        .I5(\FE_DETECT[2].fe_detect_reg_n_0_[2] ),
        .O(\ERR_FRAME_DATA[2].errframedata[2]_i_1_n_0 ));
  FDRE \ERR_FRAME_DATA[2].errframedata_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\ERR_FRAME_DATA[2].errframedata[2]_i_1_n_0 ),
        .Q(\errframedata_d1_reg[2]_0 ),
        .R(errframedata_d1));
  LUT6 #(
    .INIT(64'h00000000EAAAAAAA)) 
    \ERR_FRAME_DATA[3].errframedata[3]_i_1 
       (.I0(p_0_in),
        .I1(cur_lp_vc[0]),
        .I2(crc_done),
        .I3(cur_lp_vc[1]),
        .I4(CO),
        .I5(\FE_DETECT[3].fe_detect_reg_n_0_[3] ),
        .O(\ERR_FRAME_DATA[3].errframedata[3]_i_1_n_0 ));
  FDRE \ERR_FRAME_DATA[3].errframedata_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\ERR_FRAME_DATA[3].errframedata[3]_i_1_n_0 ),
        .Q(p_0_in),
        .R(errframedata_d1));
  LUT6 #(
    .INIT(64'h0000000000008880)) 
    \ERR_FRAME_SYNC_ALL[0].errframesync[0]_i_2 
       (.I0(pkt_valid),
        .I1(dout[2]),
        .I2(dout[1]),
        .I3(dout[0]),
        .I4(latest_vc[1]),
        .I5(latest_vc[0]),
        .O(\ERR_FRAME_SYNC_ALL[0].errframesync_reg[0]_1 ));
  FDRE \ERR_FRAME_SYNC_ALL[0].errframesync_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_7_out),
        .Q(reg_status[1]),
        .R(srst));
  LUT6 #(
    .INIT(64'h0000000088800000)) 
    \ERR_FRAME_SYNC_ALL[1].errframesync[1]_i_2 
       (.I0(pkt_valid),
        .I1(dout[2]),
        .I2(dout[1]),
        .I3(dout[0]),
        .I4(latest_vc[0]),
        .I5(latest_vc[1]),
        .O(\ERR_FRAME_SYNC_ALL[1].errframesync_reg[1]_0 ));
  FDRE \ERR_FRAME_SYNC_ALL[1].errframesync_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_6_out),
        .Q(reg_status[3]),
        .R(srst));
  LUT6 #(
    .INIT(64'h0000000088800000)) 
    \ERR_FRAME_SYNC_ALL[2].errframesync[2]_i_2 
       (.I0(pkt_valid),
        .I1(dout[2]),
        .I2(dout[1]),
        .I3(dout[0]),
        .I4(latest_vc[1]),
        .I5(latest_vc[0]),
        .O(\ERR_FRAME_SYNC_ALL[2].errframesync_reg[2]_0 ));
  FDRE \ERR_FRAME_SYNC_ALL[2].errframesync_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_3_out),
        .Q(reg_status[5]),
        .R(srst));
  LUT6 #(
    .INIT(64'h8880000000000000)) 
    \ERR_FRAME_SYNC_ALL[3].errframesync[3]_i_2 
       (.I0(pkt_valid),
        .I1(dout[2]),
        .I2(dout[1]),
        .I3(dout[0]),
        .I4(latest_vc[1]),
        .I5(latest_vc[0]),
        .O(\ERR_FRAME_SYNC_ALL[3].errframesync_reg[3]_0 ));
  FDRE \ERR_FRAME_SYNC_ALL[3].errframesync_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_out),
        .Q(reg_status[7]),
        .R(srst));
  FDRE \ERR_FRAME_SYNC_ECCERR[0].ecc_errframesync_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_32_out),
        .Q(\ERR_FRAME_SYNC_ALL[0].errframesync_reg[0]_0 ),
        .R(srst));
  FDRE \ERR_FRAME_SYNC_ECCERR[1].ecc_errframesync_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_31_out),
        .Q(p_1_in4_in),
        .R(srst));
  FDRE \ERR_FRAME_SYNC_ECCERR[2].ecc_errframesync_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_30_out),
        .Q(p_1_in1_in),
        .R(srst));
  FDRE \ERR_FRAME_SYNC_ECCERR[3].ecc_errframesync_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_29_out),
        .Q(p_1_in),
        .R(srst));
  FDRE \FE_DETECT[0].fe_detect_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_20_out),
        .Q(\FE_DETECT[0].fe_detect_reg_n_0_[0] ),
        .R(srst));
  FDRE \FE_DETECT[1].fe_detect_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_18_out),
        .Q(\FE_DETECT[1].fe_detect_reg_n_0_[1] ),
        .R(srst));
  FDRE \FE_DETECT[2].fe_detect_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_16_out),
        .Q(\FE_DETECT[2].fe_detect_reg_n_0_[2] ),
        .R(srst));
  FDRE \FE_DETECT[3].fe_detect_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_14_out),
        .Q(\FE_DETECT[3].fe_detect_reg_n_0_[3] ),
        .R(srst));
  LUT5 #(
    .INIT(32'h00000F04)) 
    \FSM_sequential_cur_state[0]_i_3 
       (.I0(crc_done),
        .I1(out[0]),
        .I2(out[2]),
        .I3(out[1]),
        .I4(\FSM_sequential_cur_state_reg[0]_1 ),
        .O(\FSM_sequential_cur_state_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hAEAEAE00AEAEAEAE)) 
    \FSM_sequential_cur_state[1]_i_1 
       (.I0(\FSM_sequential_cur_state[1]_i_2_n_0 ),
        .I1(\prv_state[2]_i_1_n_0 ),
        .I2(pkt_valid),
        .I3(out[1]),
        .I4(\diwc_corrected_reg[2] ),
        .I5(diwc_valid_reg_0),
        .O(\FSM_sequential_cur_state[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000050500003000)) 
    \FSM_sequential_cur_state[1]_i_2 
       (.I0(data_done),
        .I1(\phecc_status_reg[2] ),
        .I2(out[2]),
        .I3(phecc_done),
        .I4(out[0]),
        .I5(out[1]),
        .O(\FSM_sequential_cur_state[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAAAAABAA)) 
    \FSM_sequential_cur_state[2]_i_2 
       (.I0(phecc_start),
        .I1(out[0]),
        .I2(out[1]),
        .I3(out[2]),
        .I4(phecc_done),
        .O(\FSM_sequential_cur_state[2]_i_2_n_0 ));
  (* FSM_ENCODED_STATES = "iSTATE:100,iSTATE0:011,iSTATE1:010,iSTATE2:001,iSTATE3:000" *) 
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_cur_state_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(D),
        .Q(out[0]),
        .R(errframedata_d1));
  (* FSM_ENCODED_STATES = "iSTATE:100,iSTATE0:011,iSTATE1:010,iSTATE2:001,iSTATE3:000" *) 
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_cur_state_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\FSM_sequential_cur_state[1]_i_1_n_0 ),
        .Q(out[1]),
        .R(errframedata_d1));
  (* FSM_ENCODED_STATES = "iSTATE:100,iSTATE0:011,iSTATE1:010,iSTATE2:001,iSTATE3:000" *) 
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_cur_state_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\FSM_sequential_cur_state[2]_i_2_n_0 ),
        .Q(out[2]),
        .R(errframedata_d1));
  LUT2 #(
    .INIT(4'h2)) 
    \HSC2R_CDC[0].hsc2r_bus_cdc_i_1 
       (.I0(\src_ff_reg[6] [0]),
        .I1(\errframedata_d1_reg[0]_0 ),
        .O(reg_status[0]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \HSC2R_CDC[11].hsc2r_send[11]_i_2 
       (.I0(pkt_valid),
        .I1(dout[2]),
        .O(phecc_start_d1_reg_0));
  LUT2 #(
    .INIT(4'h2)) 
    \HSC2R_CDC[2].hsc2r_bus_cdc_i_1 
       (.I0(\src_ff_reg[6] [1]),
        .I1(\errframedata_d1_reg[1]_0 ),
        .O(reg_status[2]));
  LUT2 #(
    .INIT(4'h2)) 
    \HSC2R_CDC[4].hsc2r_bus_cdc_i_1 
       (.I0(\src_ff_reg[6] [2]),
        .I1(\errframedata_d1_reg[2]_0 ),
        .O(reg_status[4]));
  LUT2 #(
    .INIT(4'h2)) 
    \HSC2R_CDC[6].hsc2r_bus_cdc_i_1 
       (.I0(\src_ff_reg[6] [3]),
        .I1(p_0_in),
        .O(reg_status[6]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \LINE_BUF_WR_64.mem_data_l32[31]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.str_fwd_reg ),
        .O(E));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'hA888)) 
    c_en_i_1
       (.I0(pkt_valid),
        .I1(data_wip_reg_reg),
        .I2(\diwc_corrected_reg[2] ),
        .I3(c_en_reg),
        .O(crc_en));
  LUT5 #(
    .INIT(32'h00001000)) 
    crc_partial_i_2
       (.I0(out[1]),
        .I1(out[0]),
        .I2(phecc_done),
        .I3(out[2]),
        .I4(\phecc_status_reg[2] ),
        .O(c_en_reg));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    crc_rst_i_1
       (.I0(prv_state[2]),
        .I1(prv_state[1]),
        .I2(prv_state[0]),
        .I3(out[0]),
        .I4(out[1]),
        .I5(out[2]),
        .O(crc_rst0));
  FDRE crc_rst_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(crc_rst0),
        .Q(crc_rst),
        .R(srst));
  LUT4 #(
    .INIT(16'h00C4)) 
    crc_start_d1_i_1
       (.I0(crc_trig_d1_i_2_n_0),
        .I1(out[1]),
        .I2(crc_trig_d1_i_3_n_0),
        .I3(out[2]),
        .O(crc_start));
  LUT5 #(
    .INIT(32'h000000C4)) 
    crc_trig_d1_i_1
       (.I0(crc_trig_d1_i_2_n_0),
        .I1(out[1]),
        .I2(crc_trig_d1_i_3_n_0),
        .I3(out[2]),
        .I4(diwc_corrected_zero),
        .O(crc_trig_d10));
  LUT6 #(
    .INIT(64'h00FFFDFDFFFFFFFF)) 
    crc_trig_d1_i_2
       (.I0(data_done),
        .I1(spkt_fifo_wen0),
        .I2(wc_gt_pload),
        .I3(pkt_valid),
        .I4(out[0]),
        .I5(out[1]),
        .O(crc_trig_d1_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    crc_trig_d1_i_3
       (.I0(phecc_start_d1_reg_0),
        .I1(core_men_r2c),
        .I2(dout[1]),
        .I3(dout[0]),
        .I4(out[0]),
        .I5(out[1]),
        .O(crc_trig_d1_i_3_n_0));
  FDRE \cur_lp_vc_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\diwc_corrected_reg[6] ),
        .Q(cur_lp_vc[0]),
        .R(srst));
  FDRE \cur_lp_vc_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\diwc_corrected_reg[7] ),
        .Q(cur_lp_vc[1]),
        .R(srst));
  LUT2 #(
    .INIT(4'hE)) 
    data_wip_reg_i_2
       (.I0(out[0]),
        .I1(out[1]),
        .O(phecc_start_d1_reg));
  FDRE \errframedata_d1_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\errframedata_d1_reg[0]_0 ),
        .Q(\src_ff_reg[6] [0]),
        .R(errframedata_d1));
  FDRE \errframedata_d1_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\errframedata_d1_reg[1]_0 ),
        .Q(\src_ff_reg[6] [1]),
        .R(errframedata_d1));
  FDRE \errframedata_d1_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\errframedata_d1_reg[2]_0 ),
        .Q(\src_ff_reg[6] [2]),
        .R(errframedata_d1));
  FDRE \errframedata_d1_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in),
        .Q(\src_ff_reg[6] [3]),
        .R(errframedata_d1));
  FDRE \latest_vc_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\diwc_corrected_reg[6]_0 ),
        .Q(latest_vc[0]),
        .R(errframedata_d1));
  FDRE \latest_vc_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\diwc_corrected_reg[7]_0 ),
        .Q(latest_vc[1]),
        .R(errframedata_d1));
  FDRE lp_wc0_i_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(diwc_valid_reg),
        .Q(lp_wc0),
        .R(srst));
  LUT6 #(
    .INIT(64'h0000000001000000)) 
    phecc_start_d1_i_1
       (.I0(phecc_start_d1_reg),
        .I1(dout[0]),
        .I2(dout[1]),
        .I3(core_men_r2c),
        .I4(phecc_start_d1_reg_0),
        .I5(out[2]),
        .O(phecc_start));
  FDRE pkt_fifo_empty_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(empty),
        .Q(pkt_fifo_empty_reg),
        .R(srst));
  LUT5 #(
    .INIT(32'h000000F2)) 
    pkt_fifo_i_1
       (.I0(pkt_fifo_i_2_n_0),
        .I1(pkt_fifo_empty_reg),
        .I2(pkt_fifo_ren_reg),
        .I3(pkt_fifo_i_3_n_0),
        .I4(phecc_start),
        .O(rd_en));
  LUT6 #(
    .INIT(64'hAAFFAAAAAAFFAAEA)) 
    pkt_fifo_i_2
       (.I0(phecc_done),
        .I1(core_men_r2c),
        .I2(m_axis_aresetn),
        .I3(out[2]),
        .I4(out[1]),
        .I5(out[0]),
        .O(pkt_fifo_i_2_n_0));
  LUT6 #(
    .INIT(64'h1F11111011111110)) 
    pkt_fifo_i_3
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(out[2]),
        .I3(out[1]),
        .I4(out[0]),
        .I5(pkt_valid),
        .O(pkt_fifo_i_3_n_0));
  FDRE pkt_fifo_ren_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(pkt_rdvld0),
        .Q(pkt_fifo_ren_reg),
        .R(srst));
  LUT6 #(
    .INIT(64'h00000000000000F2)) 
    pkt_rdvld_i_1
       (.I0(pkt_fifo_i_2_n_0),
        .I1(pkt_fifo_empty_reg),
        .I2(pkt_fifo_ren_reg),
        .I3(pkt_fifo_i_3_n_0),
        .I4(phecc_start),
        .I5(empty),
        .O(pkt_rdvld0));
  FDRE pkt_rdvld_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(pkt_rdvld0),
        .Q(pkt_valid),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pre_byt_cnt1_i_3
       (.I0(pkt_valid),
        .I1(fsm_wip_reg),
        .O(pre_byt_cnt1_reg));
  LUT3 #(
    .INIT(8'h06)) 
    \prv_state[0]_i_1 
       (.I0(out[2]),
        .I1(out[0]),
        .I2(out[1]),
        .O(\prv_state[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h06)) 
    \prv_state[1]_i_1 
       (.I0(out[1]),
        .I1(out[0]),
        .I2(out[2]),
        .O(\prv_state[1]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \prv_state[2]_i_1 
       (.I0(out[2]),
        .I1(out[1]),
        .I2(out[0]),
        .O(\prv_state[2]_i_1_n_0 ));
  FDRE \prv_state_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\prv_state[0]_i_1_n_0 ),
        .Q(prv_state[0]),
        .R(srst));
  FDRE \prv_state_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\prv_state[1]_i_1_n_0 ),
        .Q(prv_state[1]),
        .R(srst));
  FDRE \prv_state_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\prv_state[2]_i_1_n_0 ),
        .Q(prv_state[2]),
        .R(srst));
  FDRE \reg_ecc_status_i_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\phecc_status_reg[2]_0 [0]),
        .Q(reg_ecc_status_i[1]),
        .R(srst));
  FDRE \reg_ecc_status_i_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\phecc_status_reg[2]_0 [1]),
        .Q(reg_ecc_status_i[2]),
        .R(srst));
  FDRE \reg_ecc_status_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(reg_ecc_status_i[1]),
        .Q(reg_status[8]),
        .R(srst));
  FDRE \reg_ecc_status_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(reg_ecc_status_i[2]),
        .Q(reg_status[9]),
        .R(srst));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_crc" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_crc
   (crc_start_d1,
    \data_p_strb_reg[1]_0 ,
    \data_p_strb_reg[0]_0 ,
    \exp_crc_i_reg[15]_0 ,
    crc_done,
    reg_status,
    CO,
    Q,
    srst,
    m_axis_aclk,
    crc_en,
    crc_start,
    \crc_p_strb_reg[0] ,
    \crc_p_strb_reg[0]_0 ,
    m_axis_aresetn,
    dout,
    crc_blk_sel,
    lp_wc0,
    core_men_r2c,
    crc_rst,
    E,
    D);
  output crc_start_d1;
  output \data_p_strb_reg[1]_0 ;
  output \data_p_strb_reg[0]_0 ;
  output [15:0]\exp_crc_i_reg[15]_0 ;
  output crc_done;
  output [0:0]reg_status;
  output [0:0]CO;
  output [15:0]Q;
  input srst;
  input m_axis_aclk;
  input crc_en;
  input crc_start;
  input \crc_p_strb_reg[0] ;
  input \crc_p_strb_reg[0]_0 ;
  input m_axis_aresetn;
  input [31:0]dout;
  input [3:0]crc_blk_sel;
  input lp_wc0;
  input core_men_r2c;
  input crc_rst;
  input [1:0]E;
  input [15:0]D;

  wire [0:0]CO;
  wire \CSI_OPT1_OFF.crc_32b_i_n_3 ;
  wire [15:0]D;
  wire [1:0]E;
  wire [15:0]Q;
  wire aresetn_d1;
  wire aresetn_d2;
  wire [31:16]c_data;
  wire c_en;
  wire core_men_r2c;
  wire [3:0]crc_blk_sel;
  wire crc_done;
  wire crc_en;
  wire \crc_p_strb_reg[0] ;
  wire \crc_p_strb_reg[0]_0 ;
  wire crc_rst;
  wire crc_start;
  wire crc_start_d1;
  wire \data_p_strb_reg[0]_0 ;
  wire \data_p_strb_reg[1]_0 ;
  wire [31:0]dout;
  wire [15:0]\exp_crc_i_reg[15]_0 ;
  wire lp_wc0;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire [0:0]reg_status;
  wire rstart;
  wire srst;

  bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_crc0 \CSI_OPT1_OFF.crc_32b_i 
       (.CO(CO),
        .Q(c_data),
        .aresetn_d1(aresetn_d1),
        .aresetn_d2(aresetn_d2),
        .\c_data_reg[0] (\exp_crc_i_reg[15]_0 [0]),
        .\c_data_reg[15] ({\exp_crc_i_reg[15]_0 [15:9],\exp_crc_i_reg[15]_0 [7:6],\exp_crc_i_reg[15]_0 [2]}),
        .\c_data_reg[1] (\exp_crc_i_reg[15]_0 [1]),
        .\c_data_reg[3] (\exp_crc_i_reg[15]_0 [3]),
        .\c_data_reg[4] (\exp_crc_i_reg[15]_0 [4]),
        .\c_data_reg[5] (\exp_crc_i_reg[15]_0 [5]),
        .\c_data_reg[8] (\exp_crc_i_reg[15]_0 [8]),
        .c_en(c_en),
        .core_men_r2c(core_men_r2c),
        .crc_blk_sel(crc_blk_sel),
        .crc_done(crc_done),
        .crc_rst(crc_rst),
        .crc_start_d1(crc_start_d1),
        .dout(dout[15:0]),
        .\exp_crc_i_reg[15] (Q),
        .lp_wc0(lp_wc0),
        .m_axis_aclk(m_axis_aclk),
        .m_axis_aresetn(m_axis_aresetn),
        .reg_status(reg_status),
        .rstart(rstart),
        .rstart_reg(\CSI_OPT1_OFF.crc_32b_i_n_3 ),
        .srst(srst));
  FDRE aresetn_d1_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(m_axis_aresetn),
        .Q(aresetn_d1),
        .R(1'b0));
  FDRE aresetn_d2_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(aresetn_d1),
        .Q(aresetn_d2),
        .R(srst));
  FDRE \c_data_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[0]),
        .Q(\exp_crc_i_reg[15]_0 [0]),
        .R(srst));
  FDRE \c_data_reg[10] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[10]),
        .Q(\exp_crc_i_reg[15]_0 [10]),
        .R(srst));
  FDRE \c_data_reg[11] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[11]),
        .Q(\exp_crc_i_reg[15]_0 [11]),
        .R(srst));
  FDRE \c_data_reg[12] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[12]),
        .Q(\exp_crc_i_reg[15]_0 [12]),
        .R(srst));
  FDRE \c_data_reg[13] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[13]),
        .Q(\exp_crc_i_reg[15]_0 [13]),
        .R(srst));
  FDRE \c_data_reg[14] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[14]),
        .Q(\exp_crc_i_reg[15]_0 [14]),
        .R(srst));
  FDRE \c_data_reg[15] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[15]),
        .Q(\exp_crc_i_reg[15]_0 [15]),
        .R(srst));
  FDRE \c_data_reg[16] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[16]),
        .Q(c_data[16]),
        .R(srst));
  FDRE \c_data_reg[17] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[17]),
        .Q(c_data[17]),
        .R(srst));
  FDRE \c_data_reg[18] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[18]),
        .Q(c_data[18]),
        .R(srst));
  FDRE \c_data_reg[19] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[19]),
        .Q(c_data[19]),
        .R(srst));
  FDRE \c_data_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[1]),
        .Q(\exp_crc_i_reg[15]_0 [1]),
        .R(srst));
  FDRE \c_data_reg[20] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[20]),
        .Q(c_data[20]),
        .R(srst));
  FDRE \c_data_reg[21] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[21]),
        .Q(c_data[21]),
        .R(srst));
  FDRE \c_data_reg[22] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[22]),
        .Q(c_data[22]),
        .R(srst));
  FDRE \c_data_reg[23] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[23]),
        .Q(c_data[23]),
        .R(srst));
  FDRE \c_data_reg[24] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[24]),
        .Q(c_data[24]),
        .R(srst));
  FDRE \c_data_reg[25] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[25]),
        .Q(c_data[25]),
        .R(srst));
  FDRE \c_data_reg[26] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[26]),
        .Q(c_data[26]),
        .R(srst));
  FDRE \c_data_reg[27] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[27]),
        .Q(c_data[27]),
        .R(srst));
  FDRE \c_data_reg[28] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[28]),
        .Q(c_data[28]),
        .R(srst));
  FDRE \c_data_reg[29] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[29]),
        .Q(c_data[29]),
        .R(srst));
  FDRE \c_data_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[2]),
        .Q(\exp_crc_i_reg[15]_0 [2]),
        .R(srst));
  FDRE \c_data_reg[30] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[30]),
        .Q(c_data[30]),
        .R(srst));
  FDRE \c_data_reg[31] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[31]),
        .Q(c_data[31]),
        .R(srst));
  FDRE \c_data_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[3]),
        .Q(\exp_crc_i_reg[15]_0 [3]),
        .R(srst));
  FDRE \c_data_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[4]),
        .Q(\exp_crc_i_reg[15]_0 [4]),
        .R(srst));
  FDRE \c_data_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[5]),
        .Q(\exp_crc_i_reg[15]_0 [5]),
        .R(srst));
  FDRE \c_data_reg[6] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[6]),
        .Q(\exp_crc_i_reg[15]_0 [6]),
        .R(srst));
  FDRE \c_data_reg[7] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[7]),
        .Q(\exp_crc_i_reg[15]_0 [7]),
        .R(srst));
  FDRE \c_data_reg[8] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[8]),
        .Q(\exp_crc_i_reg[15]_0 [8]),
        .R(srst));
  FDRE \c_data_reg[9] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(dout[9]),
        .Q(\exp_crc_i_reg[15]_0 [9]),
        .R(srst));
  FDRE c_en_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(crc_en),
        .Q(c_en),
        .R(srst));
  FDRE crc_start_d1_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(crc_start),
        .Q(crc_start_d1),
        .R(srst));
  FDSE \data_p_strb_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\crc_p_strb_reg[0]_0 ),
        .Q(\data_p_strb_reg[0]_0 ),
        .S(srst));
  FDSE \data_p_strb_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\crc_p_strb_reg[0] ),
        .Q(\data_p_strb_reg[1]_0 ),
        .S(srst));
  FDRE \exp_crc_i_reg[0] 
       (.C(m_axis_aclk),
        .CE(E[0]),
        .D(D[0]),
        .Q(Q[0]),
        .R(srst));
  FDRE \exp_crc_i_reg[10] 
       (.C(m_axis_aclk),
        .CE(E[1]),
        .D(D[10]),
        .Q(Q[10]),
        .R(srst));
  FDRE \exp_crc_i_reg[11] 
       (.C(m_axis_aclk),
        .CE(E[1]),
        .D(D[11]),
        .Q(Q[11]),
        .R(srst));
  FDRE \exp_crc_i_reg[12] 
       (.C(m_axis_aclk),
        .CE(E[1]),
        .D(D[12]),
        .Q(Q[12]),
        .R(srst));
  FDRE \exp_crc_i_reg[13] 
       (.C(m_axis_aclk),
        .CE(E[1]),
        .D(D[13]),
        .Q(Q[13]),
        .R(srst));
  FDRE \exp_crc_i_reg[14] 
       (.C(m_axis_aclk),
        .CE(E[1]),
        .D(D[14]),
        .Q(Q[14]),
        .R(srst));
  FDRE \exp_crc_i_reg[15] 
       (.C(m_axis_aclk),
        .CE(E[1]),
        .D(D[15]),
        .Q(Q[15]),
        .R(srst));
  FDRE \exp_crc_i_reg[1] 
       (.C(m_axis_aclk),
        .CE(E[0]),
        .D(D[1]),
        .Q(Q[1]),
        .R(srst));
  FDRE \exp_crc_i_reg[2] 
       (.C(m_axis_aclk),
        .CE(E[0]),
        .D(D[2]),
        .Q(Q[2]),
        .R(srst));
  FDRE \exp_crc_i_reg[3] 
       (.C(m_axis_aclk),
        .CE(E[0]),
        .D(D[3]),
        .Q(Q[3]),
        .R(srst));
  FDRE \exp_crc_i_reg[4] 
       (.C(m_axis_aclk),
        .CE(E[0]),
        .D(D[4]),
        .Q(Q[4]),
        .R(srst));
  FDRE \exp_crc_i_reg[5] 
       (.C(m_axis_aclk),
        .CE(E[0]),
        .D(D[5]),
        .Q(Q[5]),
        .R(srst));
  FDRE \exp_crc_i_reg[6] 
       (.C(m_axis_aclk),
        .CE(E[0]),
        .D(D[6]),
        .Q(Q[6]),
        .R(srst));
  FDRE \exp_crc_i_reg[7] 
       (.C(m_axis_aclk),
        .CE(E[0]),
        .D(D[7]),
        .Q(Q[7]),
        .R(srst));
  FDRE \exp_crc_i_reg[8] 
       (.C(m_axis_aclk),
        .CE(E[1]),
        .D(D[8]),
        .Q(Q[8]),
        .R(srst));
  FDRE \exp_crc_i_reg[9] 
       (.C(m_axis_aclk),
        .CE(E[1]),
        .D(D[9]),
        .Q(Q[9]),
        .R(srst));
  FDRE rstart_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\CSI_OPT1_OFF.crc_32b_i_n_3 ),
        .Q(rstart),
        .R(srst));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_crc0" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_crc0
   (crc_done,
    reg_status,
    CO,
    rstart_reg,
    crc_blk_sel,
    m_axis_aclk,
    rstart,
    c_en,
    \c_data_reg[0] ,
    \c_data_reg[1] ,
    \c_data_reg[5] ,
    Q,
    \c_data_reg[4] ,
    \c_data_reg[3] ,
    \c_data_reg[8] ,
    \c_data_reg[15] ,
    crc_start_d1,
    m_axis_aresetn,
    dout,
    \exp_crc_i_reg[15] ,
    lp_wc0,
    core_men_r2c,
    aresetn_d1,
    aresetn_d2,
    crc_rst,
    srst);
  output crc_done;
  output [0:0]reg_status;
  output [0:0]CO;
  output rstart_reg;
  input [3:0]crc_blk_sel;
  input m_axis_aclk;
  input rstart;
  input c_en;
  input \c_data_reg[0] ;
  input \c_data_reg[1] ;
  input \c_data_reg[5] ;
  input [15:0]Q;
  input \c_data_reg[4] ;
  input \c_data_reg[3] ;
  input \c_data_reg[8] ;
  input [9:0]\c_data_reg[15] ;
  input crc_start_d1;
  input m_axis_aresetn;
  input [15:0]dout;
  input [15:0]\exp_crc_i_reg[15] ;
  input lp_wc0;
  input core_men_r2c;
  input aresetn_d1;
  input aresetn_d2;
  input crc_rst;
  input srst;

  wire [0:0]CO;
  wire \ERR_FRAME_DATA[0].errframedata[0]_i_10_n_0 ;
  wire \ERR_FRAME_DATA[0].errframedata[0]_i_11_n_0 ;
  wire \ERR_FRAME_DATA[0].errframedata[0]_i_12_n_0 ;
  wire \ERR_FRAME_DATA[0].errframedata[0]_i_13_n_0 ;
  wire \ERR_FRAME_DATA[0].errframedata[0]_i_14_n_0 ;
  wire \ERR_FRAME_DATA[0].errframedata[0]_i_15_n_0 ;
  wire \ERR_FRAME_DATA[0].errframedata[0]_i_16_n_0 ;
  wire \ERR_FRAME_DATA[0].errframedata[0]_i_17_n_0 ;
  wire \ERR_FRAME_DATA[0].errframedata[0]_i_18_n_0 ;
  wire \ERR_FRAME_DATA[0].errframedata[0]_i_19_n_0 ;
  wire \ERR_FRAME_DATA[0].errframedata[0]_i_4_n_0 ;
  wire \ERR_FRAME_DATA[0].errframedata[0]_i_5_n_0 ;
  wire \ERR_FRAME_DATA[0].errframedata[0]_i_6_n_0 ;
  wire \ERR_FRAME_DATA[0].errframedata[0]_i_7_n_0 ;
  wire \ERR_FRAME_DATA[0].errframedata[0]_i_8_n_0 ;
  wire \ERR_FRAME_DATA[0].errframedata[0]_i_9_n_0 ;
  wire \ERR_FRAME_DATA[0].errframedata_reg[0]_i_2_n_3 ;
  wire \ERR_FRAME_DATA[0].errframedata_reg[0]_i_3_n_0 ;
  wire \ERR_FRAME_DATA[0].errframedata_reg[0]_i_3_n_1 ;
  wire \ERR_FRAME_DATA[0].errframedata_reg[0]_i_3_n_2 ;
  wire \ERR_FRAME_DATA[0].errframedata_reg[0]_i_3_n_3 ;
  wire [15:0]Q;
  wire aresetn_d1;
  wire aresetn_d2;
  wire \c_data_reg[0] ;
  wire [9:0]\c_data_reg[15] ;
  wire \c_data_reg[1] ;
  wire \c_data_reg[3] ;
  wire \c_data_reg[4] ;
  wire \c_data_reg[5] ;
  wire \c_data_reg[8] ;
  wire c_en;
  wire core_men_r2c;
  wire [3:0]crc_blk_sel;
  wire crc_done;
  wire \crc_reg_out[0]_i_1_n_0 ;
  wire \crc_reg_out[0]_i_2_n_0 ;
  wire \crc_reg_out[0]_i_3_n_0 ;
  wire \crc_reg_out[0]_i_5_n_0 ;
  wire \crc_reg_out[10]_i_1_n_0 ;
  wire \crc_reg_out[10]_i_2_n_0 ;
  wire \crc_reg_out[10]_i_3_n_0 ;
  wire \crc_reg_out[10]_i_4_n_0 ;
  wire \crc_reg_out[11]_i_1_n_0 ;
  wire \crc_reg_out[11]_i_2_n_0 ;
  wire \crc_reg_out[11]_i_3_n_0 ;
  wire \crc_reg_out[12]_i_1_n_0 ;
  wire \crc_reg_out[12]_i_2_n_0 ;
  wire \crc_reg_out[12]_i_4_n_0 ;
  wire \crc_reg_out[13]_i_1_n_0 ;
  wire \crc_reg_out[13]_i_2_n_0 ;
  wire \crc_reg_out[13]_i_3_n_0 ;
  wire \crc_reg_out[13]_i_4_n_0 ;
  wire \crc_reg_out[13]_i_7_n_0 ;
  wire \crc_reg_out[14]_i_1_n_0 ;
  wire \crc_reg_out[14]_i_2_n_0 ;
  wire \crc_reg_out[14]_i_3_n_0 ;
  wire \crc_reg_out[14]_i_5_n_0 ;
  wire \crc_reg_out[14]_i_6_n_0 ;
  wire \crc_reg_out[15]_i_1_n_0 ;
  wire \crc_reg_out[15]_i_2_n_0 ;
  wire \crc_reg_out[15]_i_3_n_0 ;
  wire \crc_reg_out[15]_i_4_n_0 ;
  wire \crc_reg_out[1]_i_1_n_0 ;
  wire \crc_reg_out[1]_i_2_n_0 ;
  wire \crc_reg_out[1]_i_3_n_0 ;
  wire \crc_reg_out[2]_i_1_n_0 ;
  wire \crc_reg_out[2]_i_2_n_0 ;
  wire \crc_reg_out[2]_i_3_n_0 ;
  wire \crc_reg_out[3]_i_1_n_0 ;
  wire \crc_reg_out[3]_i_2_n_0 ;
  wire \crc_reg_out[4]_i_1_n_0 ;
  wire \crc_reg_out[4]_i_2_n_0 ;
  wire \crc_reg_out[4]_i_3_n_0 ;
  wire \crc_reg_out[5]_i_1_n_0 ;
  wire \crc_reg_out[5]_i_2_n_0 ;
  wire \crc_reg_out[5]_i_3_n_0 ;
  wire \crc_reg_out[6]_i_1_n_0 ;
  wire \crc_reg_out[6]_i_2_n_0 ;
  wire \crc_reg_out[6]_i_3_n_0 ;
  wire \crc_reg_out[7]_i_1_n_0 ;
  wire \crc_reg_out[7]_i_2_n_0 ;
  wire \crc_reg_out[7]_i_4_n_0 ;
  wire \crc_reg_out[8]_i_1_n_0 ;
  wire \crc_reg_out[8]_i_2_n_0 ;
  wire \crc_reg_out[8]_i_3_n_0 ;
  wire \crc_reg_out[9]_i_1_n_0 ;
  wire \crc_reg_out[9]_i_2_n_0 ;
  wire \crc_reg_out[9]_i_3_n_0 ;
  wire \crc_reg_out[9]_i_4_n_0 ;
  wire crc_reg_out_n_0;
  wire \crc_reg_out_reg_n_0_[0] ;
  wire \crc_reg_out_reg_n_0_[10] ;
  wire \crc_reg_out_reg_n_0_[11] ;
  wire \crc_reg_out_reg_n_0_[12] ;
  wire \crc_reg_out_reg_n_0_[13] ;
  wire \crc_reg_out_reg_n_0_[14] ;
  wire \crc_reg_out_reg_n_0_[15] ;
  wire \crc_reg_out_reg_n_0_[1] ;
  wire \crc_reg_out_reg_n_0_[2] ;
  wire \crc_reg_out_reg_n_0_[3] ;
  wire \crc_reg_out_reg_n_0_[4] ;
  wire \crc_reg_out_reg_n_0_[5] ;
  wire \crc_reg_out_reg_n_0_[6] ;
  wire \crc_reg_out_reg_n_0_[7] ;
  wire \crc_reg_out_reg_n_0_[8] ;
  wire \crc_reg_out_reg_n_0_[9] ;
  wire crc_rst;
  wire crc_start_d1;
  wire crcdone_i_1_n_0;
  wire [15:0]dout;
  wire [15:0]\exp_crc_i_reg[15] ;
  wire lp_wc0;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire [3:3]nxt_crc_24bit;
  wire [12:3]nxt_crc_8bit;
  wire nxt_crc_8bit0114_out__0;
  wire [15:0]p_0_in;
  wire p_0_in160_in;
  wire p_0_in171_in;
  wire p_0_in75_in;
  wire p_11_in95_in;
  wire p_121_in;
  wire p_153_in;
  wire p_15_in;
  wire p_164_in;
  wire p_165_in;
  wire p_168_in;
  wire p_16_in100_in;
  wire p_172_in;
  wire p_174_in;
  wire p_17_in103_in;
  wire p_184_in;
  wire p_185_in;
  wire p_186_in;
  wire p_190_in;
  wire [15:0]p_1_in;
  wire p_1_in76_in;
  wire p_203_in;
  wire p_204_in;
  wire p_209_in;
  wire p_20_in107_in;
  wire p_216_in;
  wire p_218_in;
  wire p_219_in;
  wire p_228_in;
  wire p_229_in;
  wire p_230_in;
  wire p_231_in;
  wire p_241_in;
  wire p_261_in;
  wire p_262_in;
  wire p_267_in;
  wire p_268_in;
  wire p_26_in82_in;
  wire p_27_in;
  wire p_287_in;
  wire p_291_in;
  wire p_300_in;
  wire p_301_in;
  wire p_305_in;
  wire p_306_in;
  wire p_307_in;
  wire p_308_in;
  wire p_309_in;
  wire p_310_in;
  wire p_314_in;
  wire p_317_in;
  wire p_318_in;
  wire p_320_in;
  wire p_322_in;
  wire p_323_in;
  wire p_325_in;
  wire p_326_in;
  wire p_327_in;
  wire p_328_in;
  wire p_330_in;
  wire p_332_in;
  wire p_335_in;
  wire p_336_in;
  wire p_337_in;
  wire p_338_in;
  wire p_56_in;
  wire p_5_in88_in;
  wire p_60_in;
  wire p_64_in;
  wire p_66_in;
  wire [15:0]prv_crc_cr0;
  wire \prv_crc_cr0[0]_i_2_n_0 ;
  wire \prv_crc_cr0[10]_i_2_n_0 ;
  wire \prv_crc_cr0[10]_i_4_n_0 ;
  wire \prv_crc_cr0[10]_i_5_n_0 ;
  wire \prv_crc_cr0[10]_i_6_n_0 ;
  wire \prv_crc_cr0[11]_i_2_n_0 ;
  wire \prv_crc_cr0[12]_i_2_n_0 ;
  wire \prv_crc_cr0[12]_i_6_n_0 ;
  wire \prv_crc_cr0[12]_i_7_n_0 ;
  wire \prv_crc_cr0[12]_i_9_n_0 ;
  wire \prv_crc_cr0[13]_i_17_n_0 ;
  wire \prv_crc_cr0[13]_i_18_n_0 ;
  wire \prv_crc_cr0[13]_i_4_n_0 ;
  wire \prv_crc_cr0[14]_i_11_n_0 ;
  wire \prv_crc_cr0[14]_i_14_n_0 ;
  wire \prv_crc_cr0[14]_i_15_n_0 ;
  wire \prv_crc_cr0[14]_i_16_n_0 ;
  wire \prv_crc_cr0[14]_i_18_n_0 ;
  wire \prv_crc_cr0[14]_i_20_n_0 ;
  wire \prv_crc_cr0[14]_i_21_n_0 ;
  wire \prv_crc_cr0[14]_i_2_n_0 ;
  wire \prv_crc_cr0[14]_i_9_n_0 ;
  wire \prv_crc_cr0[15]_i_1_n_0 ;
  wire \prv_crc_cr0[15]_i_3_n_0 ;
  wire \prv_crc_cr0[1]_i_2_n_0 ;
  wire \prv_crc_cr0[2]_i_2_n_0 ;
  wire \prv_crc_cr0[2]_i_4_n_0 ;
  wire \prv_crc_cr0[2]_i_5_n_0 ;
  wire \prv_crc_cr0[2]_i_6_n_0 ;
  wire \prv_crc_cr0[3]_i_2_n_0 ;
  wire \prv_crc_cr0[3]_i_3_n_0 ;
  wire \prv_crc_cr0[4]_i_2_n_0 ;
  wire \prv_crc_cr0[5]_i_2_n_0 ;
  wire \prv_crc_cr0[6]_i_2_n_0 ;
  wire \prv_crc_cr0[6]_i_3_n_0 ;
  wire \prv_crc_cr0[7]_i_2_n_0 ;
  wire \prv_crc_cr0[7]_i_4_n_0 ;
  wire \prv_crc_cr0[8]_i_2_n_0 ;
  wire \prv_crc_cr0[8]_i_3_n_0 ;
  wire \prv_crc_cr0[8]_i_4_n_0 ;
  wire \prv_crc_cr0[8]_i_5_n_0 ;
  wire \prv_crc_cr0[9]_i_2_n_0 ;
  wire \prv_crc_cr0[9]_i_3_n_0 ;
  wire \prv_crc_cr0[9]_i_4_n_0 ;
  wire \prv_crc_cr0[9]_i_5_n_0 ;
  wire [15:0]prv_crc_cr1;
  wire [0:0]reg_status;
  wire rstart;
  wire rstart_reg;
  wire srst;
  wire [3:2]\NLW_ERR_FRAME_DATA[0].errframedata_reg[0]_i_2_CO_UNCONNECTED ;
  wire [3:0]\NLW_ERR_FRAME_DATA[0].errframedata_reg[0]_i_2_O_UNCONNECTED ;
  wire [3:0]\NLW_ERR_FRAME_DATA[0].errframedata_reg[0]_i_3_O_UNCONNECTED ;

  LUT4 #(
    .INIT(16'h9009)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_10 
       (.I0(\crc_reg_out_reg_n_0_[12] ),
        .I1(dout[12]),
        .I2(\crc_reg_out_reg_n_0_[13] ),
        .I3(dout[13]),
        .O(\ERR_FRAME_DATA[0].errframedata[0]_i_10_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_11 
       (.I0(\crc_reg_out_reg_n_0_[12] ),
        .I1(\exp_crc_i_reg[15] [12]),
        .I2(\crc_reg_out_reg_n_0_[13] ),
        .I3(\exp_crc_i_reg[15] [13]),
        .O(\ERR_FRAME_DATA[0].errframedata[0]_i_11_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_12 
       (.I0(\crc_reg_out_reg_n_0_[9] ),
        .I1(dout[9]),
        .I2(\crc_reg_out_reg_n_0_[10] ),
        .I3(dout[10]),
        .O(\ERR_FRAME_DATA[0].errframedata[0]_i_12_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_13 
       (.I0(\crc_reg_out_reg_n_0_[9] ),
        .I1(\exp_crc_i_reg[15] [9]),
        .I2(\crc_reg_out_reg_n_0_[10] ),
        .I3(\exp_crc_i_reg[15] [10]),
        .O(\ERR_FRAME_DATA[0].errframedata[0]_i_13_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_14 
       (.I0(\crc_reg_out_reg_n_0_[6] ),
        .I1(dout[6]),
        .I2(\crc_reg_out_reg_n_0_[7] ),
        .I3(dout[7]),
        .O(\ERR_FRAME_DATA[0].errframedata[0]_i_14_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_15 
       (.I0(\crc_reg_out_reg_n_0_[6] ),
        .I1(\exp_crc_i_reg[15] [6]),
        .I2(\crc_reg_out_reg_n_0_[7] ),
        .I3(\exp_crc_i_reg[15] [7]),
        .O(\ERR_FRAME_DATA[0].errframedata[0]_i_15_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_16 
       (.I0(\crc_reg_out_reg_n_0_[3] ),
        .I1(dout[3]),
        .I2(\crc_reg_out_reg_n_0_[4] ),
        .I3(dout[4]),
        .O(\ERR_FRAME_DATA[0].errframedata[0]_i_16_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_17 
       (.I0(\crc_reg_out_reg_n_0_[3] ),
        .I1(\exp_crc_i_reg[15] [3]),
        .I2(\crc_reg_out_reg_n_0_[4] ),
        .I3(\exp_crc_i_reg[15] [4]),
        .O(\ERR_FRAME_DATA[0].errframedata[0]_i_17_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_18 
       (.I0(\crc_reg_out_reg_n_0_[0] ),
        .I1(dout[0]),
        .I2(\crc_reg_out_reg_n_0_[1] ),
        .I3(dout[1]),
        .O(\ERR_FRAME_DATA[0].errframedata[0]_i_18_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_19 
       (.I0(\crc_reg_out_reg_n_0_[0] ),
        .I1(\exp_crc_i_reg[15] [0]),
        .I2(\crc_reg_out_reg_n_0_[1] ),
        .I3(\exp_crc_i_reg[15] [1]),
        .O(\ERR_FRAME_DATA[0].errframedata[0]_i_19_n_0 ));
  LUT4 #(
    .INIT(16'hE21D)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_4 
       (.I0(\exp_crc_i_reg[15] [15]),
        .I1(lp_wc0),
        .I2(dout[15]),
        .I3(\crc_reg_out_reg_n_0_[15] ),
        .O(\ERR_FRAME_DATA[0].errframedata[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h8484F00F84840000)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_5 
       (.I0(dout[14]),
        .I1(\ERR_FRAME_DATA[0].errframedata[0]_i_10_n_0 ),
        .I2(\crc_reg_out_reg_n_0_[14] ),
        .I3(\exp_crc_i_reg[15] [14]),
        .I4(lp_wc0),
        .I5(\ERR_FRAME_DATA[0].errframedata[0]_i_11_n_0 ),
        .O(\ERR_FRAME_DATA[0].errframedata[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h8484F00F84840000)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_6 
       (.I0(dout[11]),
        .I1(\ERR_FRAME_DATA[0].errframedata[0]_i_12_n_0 ),
        .I2(\crc_reg_out_reg_n_0_[11] ),
        .I3(\exp_crc_i_reg[15] [11]),
        .I4(lp_wc0),
        .I5(\ERR_FRAME_DATA[0].errframedata[0]_i_13_n_0 ),
        .O(\ERR_FRAME_DATA[0].errframedata[0]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h8484F00F84840000)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_7 
       (.I0(dout[8]),
        .I1(\ERR_FRAME_DATA[0].errframedata[0]_i_14_n_0 ),
        .I2(\crc_reg_out_reg_n_0_[8] ),
        .I3(\exp_crc_i_reg[15] [8]),
        .I4(lp_wc0),
        .I5(\ERR_FRAME_DATA[0].errframedata[0]_i_15_n_0 ),
        .O(\ERR_FRAME_DATA[0].errframedata[0]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h8484F00F84840000)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_8 
       (.I0(dout[5]),
        .I1(\ERR_FRAME_DATA[0].errframedata[0]_i_16_n_0 ),
        .I2(\crc_reg_out_reg_n_0_[5] ),
        .I3(\exp_crc_i_reg[15] [5]),
        .I4(lp_wc0),
        .I5(\ERR_FRAME_DATA[0].errframedata[0]_i_17_n_0 ),
        .O(\ERR_FRAME_DATA[0].errframedata[0]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h8484F00F84840000)) 
    \ERR_FRAME_DATA[0].errframedata[0]_i_9 
       (.I0(dout[2]),
        .I1(\ERR_FRAME_DATA[0].errframedata[0]_i_18_n_0 ),
        .I2(\crc_reg_out_reg_n_0_[2] ),
        .I3(\exp_crc_i_reg[15] [2]),
        .I4(lp_wc0),
        .I5(\ERR_FRAME_DATA[0].errframedata[0]_i_19_n_0 ),
        .O(\ERR_FRAME_DATA[0].errframedata[0]_i_9_n_0 ));
  CARRY4 \ERR_FRAME_DATA[0].errframedata_reg[0]_i_2 
       (.CI(\ERR_FRAME_DATA[0].errframedata_reg[0]_i_3_n_0 ),
        .CO({\NLW_ERR_FRAME_DATA[0].errframedata_reg[0]_i_2_CO_UNCONNECTED [3:2],CO,\ERR_FRAME_DATA[0].errframedata_reg[0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b1,1'b1}),
        .O(\NLW_ERR_FRAME_DATA[0].errframedata_reg[0]_i_2_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,\ERR_FRAME_DATA[0].errframedata[0]_i_4_n_0 ,\ERR_FRAME_DATA[0].errframedata[0]_i_5_n_0 }));
  CARRY4 \ERR_FRAME_DATA[0].errframedata_reg[0]_i_3 
       (.CI(1'b0),
        .CO({\ERR_FRAME_DATA[0].errframedata_reg[0]_i_3_n_0 ,\ERR_FRAME_DATA[0].errframedata_reg[0]_i_3_n_1 ,\ERR_FRAME_DATA[0].errframedata_reg[0]_i_3_n_2 ,\ERR_FRAME_DATA[0].errframedata_reg[0]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O(\NLW_ERR_FRAME_DATA[0].errframedata_reg[0]_i_3_O_UNCONNECTED [3:0]),
        .S({\ERR_FRAME_DATA[0].errframedata[0]_i_6_n_0 ,\ERR_FRAME_DATA[0].errframedata[0]_i_7_n_0 ,\ERR_FRAME_DATA[0].errframedata[0]_i_8_n_0 ,\ERR_FRAME_DATA[0].errframedata[0]_i_9_n_0 }));
  LUT2 #(
    .INIT(4'h8)) 
    \HSC2R_CDC[9].hsc2r_bus_cdc_i_1 
       (.I0(CO),
        .I1(crc_done),
        .O(reg_status));
  LUT4 #(
    .INIT(16'h0116)) 
    crc_reg_out
       (.I0(crc_blk_sel[0]),
        .I1(crc_blk_sel[1]),
        .I2(crc_blk_sel[2]),
        .I3(crc_blk_sel[3]),
        .O(crc_reg_out_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[0]_i_1 
       (.I0(\crc_reg_out[0]_i_2_n_0 ),
        .I1(\crc_reg_out[0]_i_3_n_0 ),
        .I2(\prv_crc_cr0[0]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBEEBC33CAAAA0000)) 
    \crc_reg_out[0]_i_2 
       (.I0(crc_blk_sel[1]),
        .I1(p_291_in),
        .I2(p_305_in),
        .I3(p_56_in),
        .I4(p_314_in),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h28828228)) 
    \crc_reg_out[0]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(\crc_reg_out[0]_i_5_n_0 ),
        .I2(\c_data_reg[0] ),
        .I3(\c_data_reg[4] ),
        .I4(p_153_in),
        .O(\crc_reg_out[0]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crc_reg_out[0]_i_4 
       (.I0(Q[0]),
        .I1(Q[4]),
        .O(p_56_in));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[0]_i_5 
       (.I0(prv_crc_cr0[0]),
        .I1(prv_crc_cr1[0]),
        .I2(c_en),
        .O(\crc_reg_out[0]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \crc_reg_out[0]_i_6 
       (.I0(prv_crc_cr1[4]),
        .I1(prv_crc_cr0[4]),
        .I2(c_en),
        .I3(prv_crc_cr1[8]),
        .I4(prv_crc_cr0[8]),
        .O(p_153_in));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[10]_i_1 
       (.I0(\crc_reg_out[10]_i_2_n_0 ),
        .I1(\crc_reg_out[10]_i_3_n_0 ),
        .I2(\prv_crc_cr0[10]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[10]_i_2 
       (.I0(p_309_in),
        .I1(crc_blk_sel[1]),
        .I2(\crc_reg_out[10]_i_4_n_0 ),
        .I3(p_306_in),
        .I4(p_332_in),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crc_reg_out[10]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(p_204_in),
        .I2(\c_data_reg[15] [2]),
        .I3(p_1_in76_in),
        .I4(\c_data_reg[3] ),
        .I5(\c_data_reg[15] [0]),
        .O(\crc_reg_out[10]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \crc_reg_out[10]_i_4 
       (.I0(Q[7]),
        .I1(Q[2]),
        .I2(Q[3]),
        .O(\crc_reg_out[10]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \crc_reg_out[10]_i_5 
       (.I0(prv_crc_cr1[3]),
        .I1(prv_crc_cr0[3]),
        .I2(c_en),
        .I3(prv_crc_cr1[2]),
        .I4(prv_crc_cr0[2]),
        .O(p_204_in));
  LUT5 #(
    .INIT(32'hFFFFEA00)) 
    \crc_reg_out[11]_i_1 
       (.I0(\crc_reg_out[11]_i_2_n_0 ),
        .I1(\prv_crc_cr0[11]_i_2_n_0 ),
        .I2(crc_blk_sel[3]),
        .I3(crc_reg_out_n_0),
        .I4(rstart),
        .O(\crc_reg_out[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFAEEAAEEAAEEA)) 
    \crc_reg_out[11]_i_2 
       (.I0(\crc_reg_out[11]_i_3_n_0 ),
        .I1(crc_blk_sel[2]),
        .I2(p_317_in),
        .I3(Q[3]),
        .I4(crc_blk_sel[1]),
        .I5(p_307_in),
        .O(\crc_reg_out[11]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT5 #(
    .INIT(32'h220A88A0)) 
    \crc_reg_out[11]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(prv_crc_cr0[3]),
        .I2(prv_crc_cr1[3]),
        .I3(c_en),
        .I4(\c_data_reg[3] ),
        .O(\crc_reg_out[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crc_reg_out[11]_i_4 
       (.I0(p_0_in75_in),
        .I1(p_230_in),
        .I2(\c_data_reg[0] ),
        .I3(\c_data_reg[3] ),
        .I4(\crc_reg_out[0]_i_5_n_0 ),
        .I5(p_228_in),
        .O(p_307_in));
  LUT2 #(
    .INIT(4'h6)) 
    \crc_reg_out[11]_i_5 
       (.I0(\c_data_reg[15] [2]),
        .I1(\c_data_reg[15] [5]),
        .O(p_228_in));
  LUT5 #(
    .INIT(32'hFFFFEA00)) 
    \crc_reg_out[12]_i_1 
       (.I0(\crc_reg_out[12]_i_2_n_0 ),
        .I1(\prv_crc_cr0[12]_i_2_n_0 ),
        .I2(crc_blk_sel[3]),
        .I3(crc_reg_out_n_0),
        .I4(rstart),
        .O(\crc_reg_out[12]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFF8F8F8)) 
    \crc_reg_out[12]_i_2 
       (.I0(nxt_crc_8bit[12]),
        .I1(crc_blk_sel[0]),
        .I2(\crc_reg_out[12]_i_4_n_0 ),
        .I3(crc_blk_sel[1]),
        .I4(p_241_in),
        .O(\crc_reg_out[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6969669996969966)) 
    \crc_reg_out[12]_i_3 
       (.I0(\c_data_reg[0] ),
        .I1(\c_data_reg[4] ),
        .I2(prv_crc_cr0[4]),
        .I3(prv_crc_cr1[4]),
        .I4(c_en),
        .I5(\crc_reg_out[0]_i_5_n_0 ),
        .O(nxt_crc_8bit[12]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT5 #(
    .INIT(32'h28828228)) 
    \crc_reg_out[12]_i_4 
       (.I0(crc_blk_sel[2]),
        .I1(p_305_in),
        .I2(Q[4]),
        .I3(Q[0]),
        .I4(p_314_in),
        .O(\crc_reg_out[12]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFBEAA0000)) 
    \crc_reg_out[13]_i_1 
       (.I0(\crc_reg_out[13]_i_2_n_0 ),
        .I1(\crc_reg_out[13]_i_3_n_0 ),
        .I2(\crc_reg_out[13]_i_4_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF69960000)) 
    \crc_reg_out[13]_i_2 
       (.I0(p_17_in103_in),
        .I1(\c_data_reg[5] ),
        .I2(\c_data_reg[1] ),
        .I3(p_26_in82_in),
        .I4(crc_blk_sel[0]),
        .I5(\crc_reg_out[13]_i_7_n_0 ),
        .O(\crc_reg_out[13]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \crc_reg_out[13]_i_3 
       (.I0(p_327_in),
        .I1(p_325_in),
        .O(\crc_reg_out[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crc_reg_out[13]_i_4 
       (.I0(p_328_in),
        .I1(p_301_in),
        .I2(p_300_in),
        .I3(Q[9]),
        .I4(Q[13]),
        .I5(Q[5]),
        .O(\crc_reg_out[13]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[13]_i_5 
       (.I0(prv_crc_cr0[5]),
        .I1(prv_crc_cr1[5]),
        .I2(c_en),
        .O(p_17_in103_in));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[13]_i_6 
       (.I0(prv_crc_cr0[1]),
        .I1(prv_crc_cr1[1]),
        .I2(c_en),
        .O(p_26_in82_in));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[13]_i_7 
       (.I0(p_325_in),
        .I1(crc_blk_sel[1]),
        .I2(p_168_in),
        .I3(p_60_in),
        .I4(p_301_in),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[13]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFBEAA0000)) 
    \crc_reg_out[14]_i_1 
       (.I0(\crc_reg_out[14]_i_2_n_0 ),
        .I1(\crc_reg_out[14]_i_3_n_0 ),
        .I2(\prv_crc_cr0[14]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF60FF60FF60)) 
    \crc_reg_out[14]_i_2 
       (.I0(p_20_in107_in),
        .I1(\crc_reg_out[14]_i_5_n_0 ),
        .I2(crc_blk_sel[0]),
        .I3(\crc_reg_out[14]_i_6_n_0 ),
        .I4(crc_blk_sel[1]),
        .I5(p_330_in),
        .O(\crc_reg_out[14]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \crc_reg_out[14]_i_3 
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(p_332_in),
        .O(\crc_reg_out[14]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[14]_i_4 
       (.I0(prv_crc_cr0[6]),
        .I1(prv_crc_cr1[6]),
        .I2(c_en),
        .O(p_20_in107_in));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT5 #(
    .INIT(32'hE41B1BE4)) 
    \crc_reg_out[14]_i_5 
       (.I0(c_en),
        .I1(prv_crc_cr1[2]),
        .I2(prv_crc_cr0[2]),
        .I3(\c_data_reg[15] [0]),
        .I4(\c_data_reg[15] [1]),
        .O(\crc_reg_out[14]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT5 #(
    .INIT(32'h28828228)) 
    \crc_reg_out[14]_i_6 
       (.I0(crc_blk_sel[2]),
        .I1(p_310_in),
        .I2(Q[6]),
        .I3(Q[2]),
        .I4(p_287_in),
        .O(\crc_reg_out[14]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \crc_reg_out[15]_i_1 
       (.I0(c_en),
        .I1(rstart),
        .O(\crc_reg_out[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[15]_i_2 
       (.I0(\crc_reg_out[15]_i_3_n_0 ),
        .I1(\crc_reg_out[15]_i_4_n_0 ),
        .I2(\prv_crc_cr0[15]_i_3_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[15]_i_3 
       (.I0(p_308_in),
        .I1(crc_blk_sel[1]),
        .I2(Q[3]),
        .I3(p_66_in),
        .I4(Q[7]),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[15]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h28828228)) 
    \crc_reg_out[15]_i_4 
       (.I0(crc_blk_sel[0]),
        .I1(\c_data_reg[15] [2]),
        .I2(p_0_in75_in),
        .I3(p_1_in76_in),
        .I4(\c_data_reg[3] ),
        .O(\crc_reg_out[15]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \crc_reg_out[15]_i_5 
       (.I0(p_317_in),
        .I1(p_306_in),
        .O(p_66_in));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[15]_i_6 
       (.I0(prv_crc_cr0[3]),
        .I1(prv_crc_cr1[3]),
        .I2(c_en),
        .O(p_0_in75_in));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[15]_i_7 
       (.I0(prv_crc_cr0[7]),
        .I1(prv_crc_cr1[7]),
        .I2(c_en),
        .O(p_1_in76_in));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[1]_i_1 
       (.I0(\crc_reg_out[1]_i_2_n_0 ),
        .I1(\crc_reg_out[1]_i_3_n_0 ),
        .I2(\prv_crc_cr0[1]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBCE3E3BCA0A0A0A0)) 
    \crc_reg_out[1]_i_2 
       (.I0(crc_blk_sel[1]),
        .I1(p_60_in),
        .I2(p_168_in),
        .I3(p_301_in),
        .I4(p_300_in),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crc_reg_out[1]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(\c_data_reg[1] ),
        .I2(\c_data_reg[5] ),
        .I3(p_17_in103_in),
        .I4(p_0_in160_in),
        .I5(p_26_in82_in),
        .O(\crc_reg_out[1]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crc_reg_out[1]_i_4 
       (.I0(Q[5]),
        .I1(Q[1]),
        .O(p_60_in));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[1]_i_5 
       (.I0(prv_crc_cr0[9]),
        .I1(prv_crc_cr1[9]),
        .I2(c_en),
        .O(p_0_in160_in));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[2]_i_1 
       (.I0(\crc_reg_out[2]_i_2_n_0 ),
        .I1(\crc_reg_out[2]_i_3_n_0 ),
        .I2(\prv_crc_cr0[2]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBCCBCBBC88888888)) 
    \crc_reg_out[2]_i_2 
       (.I0(crc_blk_sel[1]),
        .I1(p_287_in),
        .I2(p_64_in),
        .I3(p_310_in),
        .I4(p_309_in),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crc_reg_out[2]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(p_27_in),
        .I2(\c_data_reg[15] [0]),
        .I3(\c_data_reg[15] [1]),
        .I4(p_20_in107_in),
        .I5(p_0_in171_in),
        .O(\crc_reg_out[2]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crc_reg_out[2]_i_4 
       (.I0(Q[2]),
        .I1(Q[6]),
        .O(p_64_in));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[2]_i_5 
       (.I0(prv_crc_cr0[10]),
        .I1(prv_crc_cr1[10]),
        .I2(c_en),
        .O(p_0_in171_in));
  LUT5 #(
    .INIT(32'hFFFFEA00)) 
    \crc_reg_out[3]_i_1 
       (.I0(\crc_reg_out[3]_i_2_n_0 ),
        .I1(\prv_crc_cr0[3]_i_2_n_0 ),
        .I2(crc_blk_sel[3]),
        .I3(crc_reg_out_n_0),
        .I4(rstart),
        .O(\crc_reg_out[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \crc_reg_out[3]_i_2 
       (.I0(nxt_crc_8bit[3]),
        .I1(crc_blk_sel[0]),
        .I2(crc_blk_sel[2]),
        .I3(nxt_crc_24bit),
        .I4(crc_blk_sel[1]),
        .I5(p_317_in),
        .O(\crc_reg_out[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crc_reg_out[3]_i_3 
       (.I0(\c_data_reg[3] ),
        .I1(\c_data_reg[0] ),
        .I2(p_5_in88_in),
        .I3(\crc_reg_out[0]_i_5_n_0 ),
        .I4(\c_data_reg[15] [2]),
        .I5(p_121_in),
        .O(nxt_crc_8bit[3]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crc_reg_out[3]_i_4 
       (.I0(Q[7]),
        .I1(p_318_in),
        .I2(p_314_in),
        .I3(p_306_in),
        .I4(p_317_in),
        .I5(p_307_in),
        .O(nxt_crc_24bit));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[3]_i_5 
       (.I0(prv_crc_cr0[11]),
        .I1(prv_crc_cr1[11]),
        .I2(c_en),
        .O(p_5_in88_in));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \crc_reg_out[3]_i_6 
       (.I0(prv_crc_cr1[7]),
        .I1(prv_crc_cr0[7]),
        .I2(c_en),
        .I3(prv_crc_cr1[3]),
        .I4(prv_crc_cr0[3]),
        .O(p_121_in));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crc_reg_out[3]_i_7 
       (.I0(Q[3]),
        .I1(Q[0]),
        .O(p_318_in));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[4]_i_1 
       (.I0(\crc_reg_out[4]_i_2_n_0 ),
        .I1(\crc_reg_out[4]_i_3_n_0 ),
        .I2(\prv_crc_cr0[4]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[4]_i_2 
       (.I0(p_305_in),
        .I1(crc_blk_sel[1]),
        .I2(Q[1]),
        .I3(p_241_in),
        .I4(p_168_in),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8882282222288288)) 
    \crc_reg_out[4]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(p_26_in82_in),
        .I2(c_en),
        .I3(prv_crc_cr1[12]),
        .I4(prv_crc_cr0[12]),
        .I5(\c_data_reg[1] ),
        .O(\crc_reg_out[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[5]_i_1 
       (.I0(\crc_reg_out[5]_i_2_n_0 ),
        .I1(\crc_reg_out[5]_i_3_n_0 ),
        .I2(\prv_crc_cr0[5]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[5]_i_2 
       (.I0(p_301_in),
        .I1(crc_blk_sel[1]),
        .I2(p_325_in),
        .I3(p_287_in),
        .I4(Q[2]),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8228822882822828)) 
    \crc_reg_out[5]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(\c_data_reg[15] [0]),
        .I2(p_27_in),
        .I3(prv_crc_cr0[13]),
        .I4(prv_crc_cr1[13]),
        .I5(c_en),
        .O(\crc_reg_out[5]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[5]_i_4 
       (.I0(prv_crc_cr0[2]),
        .I1(prv_crc_cr1[2]),
        .I2(c_en),
        .O(p_27_in));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[6]_i_1 
       (.I0(\crc_reg_out[6]_i_2_n_0 ),
        .I1(\crc_reg_out[6]_i_3_n_0 ),
        .I2(\prv_crc_cr0[6]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[6]_i_2 
       (.I0(p_310_in),
        .I1(crc_blk_sel[1]),
        .I2(p_317_in),
        .I3(p_330_in),
        .I4(Q[3]),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8228822882822828)) 
    \crc_reg_out[6]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(\c_data_reg[3] ),
        .I2(p_0_in75_in),
        .I3(prv_crc_cr0[14]),
        .I4(prv_crc_cr1[14]),
        .I5(c_en),
        .O(\crc_reg_out[6]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFEA00)) 
    \crc_reg_out[7]_i_1 
       (.I0(\crc_reg_out[7]_i_2_n_0 ),
        .I1(\prv_crc_cr0[7]_i_2_n_0 ),
        .I2(crc_blk_sel[3]),
        .I3(crc_reg_out_n_0),
        .I4(rstart),
        .O(\crc_reg_out[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF60FF60FF60)) 
    \crc_reg_out[7]_i_2 
       (.I0(p_16_in100_in),
        .I1(nxt_crc_8bit[12]),
        .I2(crc_blk_sel[0]),
        .I3(\crc_reg_out[7]_i_4_n_0 ),
        .I4(crc_blk_sel[1]),
        .I5(p_306_in),
        .O(\crc_reg_out[7]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hAC)) 
    \crc_reg_out[7]_i_3 
       (.I0(prv_crc_cr0[15]),
        .I1(prv_crc_cr1[15]),
        .I2(c_en),
        .O(p_16_in100_in));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crc_reg_out[7]_i_4 
       (.I0(crc_blk_sel[2]),
        .I1(p_308_in),
        .I2(Q[4]),
        .I3(Q[0]),
        .I4(p_314_in),
        .I5(p_305_in),
        .O(\crc_reg_out[7]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[8]_i_1 
       (.I0(\crc_reg_out[8]_i_2_n_0 ),
        .I1(\crc_reg_out[8]_i_3_n_0 ),
        .I2(\prv_crc_cr0[8]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[8]_i_2 
       (.I0(p_291_in),
        .I1(crc_blk_sel[1]),
        .I2(p_301_in),
        .I3(Q[5]),
        .I4(\prv_crc_cr0[12]_i_6_n_0 ),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crc_reg_out[8]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(p_17_in103_in),
        .I2(\c_data_reg[0] ),
        .I3(\c_data_reg[1] ),
        .I4(p_218_in),
        .I5(\c_data_reg[5] ),
        .O(\crc_reg_out[8]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \crc_reg_out[8]_i_4 
       (.I0(prv_crc_cr1[0]),
        .I1(prv_crc_cr0[0]),
        .I2(c_en),
        .I3(prv_crc_cr1[1]),
        .I4(prv_crc_cr0[1]),
        .O(p_218_in));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEEE0000)) 
    \crc_reg_out[9]_i_1 
       (.I0(\crc_reg_out[9]_i_2_n_0 ),
        .I1(\crc_reg_out[9]_i_3_n_0 ),
        .I2(\prv_crc_cr0[9]_i_2_n_0 ),
        .I3(crc_blk_sel[3]),
        .I4(crc_reg_out_n_0),
        .I5(rstart),
        .O(\crc_reg_out[9]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF88F8FF888888888)) 
    \crc_reg_out[9]_i_2 
       (.I0(p_300_in),
        .I1(crc_blk_sel[1]),
        .I2(Q[6]),
        .I3(p_327_in),
        .I4(\crc_reg_out[9]_i_4_n_0 ),
        .I5(crc_blk_sel[2]),
        .O(\crc_reg_out[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crc_reg_out[9]_i_3 
       (.I0(crc_blk_sel[0]),
        .I1(\c_data_reg[1] ),
        .I2(\c_data_reg[15] [0]),
        .I3(\c_data_reg[15] [1]),
        .I4(p_20_in107_in),
        .I5(p_185_in),
        .O(\crc_reg_out[9]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \crc_reg_out[9]_i_4 
       (.I0(p_310_in),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(\crc_reg_out[9]_i_4_n_0 ));
  FDRE \crc_reg_out_reg[0] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[0]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[0] ),
        .R(srst));
  FDRE \crc_reg_out_reg[10] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[10]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[10] ),
        .R(srst));
  FDRE \crc_reg_out_reg[11] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[11]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[11] ),
        .R(srst));
  FDRE \crc_reg_out_reg[12] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[12]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[12] ),
        .R(srst));
  FDRE \crc_reg_out_reg[13] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[13]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[13] ),
        .R(srst));
  FDRE \crc_reg_out_reg[14] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[14]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[14] ),
        .R(srst));
  FDRE \crc_reg_out_reg[15] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[15]_i_2_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[15] ),
        .R(srst));
  FDRE \crc_reg_out_reg[1] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[1]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[1] ),
        .R(srst));
  FDRE \crc_reg_out_reg[2] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[2]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[2] ),
        .R(srst));
  FDRE \crc_reg_out_reg[3] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[3]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[3] ),
        .R(srst));
  FDRE \crc_reg_out_reg[4] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[4]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[4] ),
        .R(srst));
  FDRE \crc_reg_out_reg[5] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[5]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[5] ),
        .R(srst));
  FDRE \crc_reg_out_reg[6] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[6]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[6] ),
        .R(srst));
  FDRE \crc_reg_out_reg[7] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[7]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[7] ),
        .R(srst));
  FDRE \crc_reg_out_reg[8] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[8]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[8] ),
        .R(srst));
  FDRE \crc_reg_out_reg[9] 
       (.C(m_axis_aclk),
        .CE(\crc_reg_out[15]_i_1_n_0 ),
        .D(\crc_reg_out[9]_i_1_n_0 ),
        .Q(\crc_reg_out_reg_n_0_[9] ),
        .R(srst));
  LUT3 #(
    .INIT(8'h08)) 
    crcdone_i_1
       (.I0(crc_start_d1),
        .I1(m_axis_aresetn),
        .I2(rstart),
        .O(crcdone_i_1_n_0));
  FDRE crcdone_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(crcdone_i_1_n_0),
        .Q(crc_done),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[0]_i_1 
       (.I0(\prv_crc_cr0[0]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[0]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[0]_i_2 
       (.I0(Q[12]),
        .I1(Q[8]),
        .I2(p_262_in),
        .I3(p_261_in),
        .I4(p_291_in),
        .I5(p_241_in),
        .O(\prv_crc_cr0[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[0]_i_3 
       (.I0(Q[4]),
        .I1(Q[5]),
        .O(p_261_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[0]_i_4 
       (.I0(p_216_in),
        .I1(p_218_in),
        .I2(\c_data_reg[8] ),
        .I3(\c_data_reg[4] ),
        .I4(p_153_in),
        .I5(p_219_in),
        .O(p_241_in));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[10]_i_1 
       (.I0(\prv_crc_cr0[10]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[10]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \prv_crc_cr0[10]_i_2 
       (.I0(p_309_in),
        .I1(p_308_in),
        .I2(Q[4]),
        .I3(p_310_in),
        .I4(\prv_crc_cr0[10]_i_4_n_0 ),
        .O(\prv_crc_cr0[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[10]_i_3 
       (.I0(\c_data_reg[15] [5]),
        .I1(\c_data_reg[15] [2]),
        .I2(\prv_crc_cr0[10]_i_5_n_0 ),
        .I3(p_230_in),
        .I4(p_15_in),
        .I5(p_0_in75_in),
        .O(p_308_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[10]_i_4 
       (.I0(p_305_in),
        .I1(p_317_in),
        .I2(p_287_in),
        .I3(p_307_in),
        .I4(p_306_in),
        .I5(\prv_crc_cr0[10]_i_6_n_0 ),
        .O(\prv_crc_cr0[10]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6969669996969966)) 
    \prv_crc_cr0[10]_i_5 
       (.I0(\c_data_reg[4] ),
        .I1(\c_data_reg[3] ),
        .I2(prv_crc_cr0[15]),
        .I3(prv_crc_cr1[15]),
        .I4(c_en),
        .I5(\c_data_reg[15] [9]),
        .O(\prv_crc_cr0[10]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[10]_i_6 
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[15]),
        .I3(p_335_in),
        .I4(Q[6]),
        .I5(Q[10]),
        .O(\prv_crc_cr0[10]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[11]_i_1 
       (.I0(\prv_crc_cr0[11]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[11]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[11]_i_2 
       (.I0(p_317_in),
        .I1(p_314_in),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(p_337_in),
        .I5(p_335_in),
        .O(\prv_crc_cr0[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[11]_i_3 
       (.I0(p_15_in),
        .I1(p_17_in103_in),
        .I2(\c_data_reg[4] ),
        .I3(\c_data_reg[5] ),
        .I4(\prv_crc_cr0[14]_i_21_n_0 ),
        .I5(p_216_in),
        .O(p_314_in));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \prv_crc_cr0[11]_i_4 
       (.I0(prv_crc_cr0[4]),
        .I1(prv_crc_cr1[4]),
        .I2(c_en),
        .O(p_15_in));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT4 #(
    .INIT(16'h1BE4)) 
    \prv_crc_cr0[11]_i_5 
       (.I0(c_en),
        .I1(prv_crc_cr1[12]),
        .I2(prv_crc_cr0[12]),
        .I3(\c_data_reg[15] [6]),
        .O(p_216_in));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[12]_i_1 
       (.I0(\prv_crc_cr0[12]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[12]));
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \prv_crc_cr0[12]_i_10 
       (.I0(prv_crc_cr1[4]),
        .I1(prv_crc_cr0[4]),
        .I2(c_en),
        .I3(prv_crc_cr1[5]),
        .I4(prv_crc_cr0[5]),
        .O(p_209_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[12]_i_2 
       (.I0(Q[4]),
        .I1(Q[8]),
        .I2(p_291_in),
        .I3(p_305_in),
        .I4(p_320_in),
        .I5(\prv_crc_cr0[12]_i_6_n_0 ),
        .O(\prv_crc_cr0[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[12]_i_3 
       (.I0(\prv_crc_cr0[14]_i_14_n_0 ),
        .I1(\prv_crc_cr0[12]_i_7_n_0 ),
        .I2(p_17_in103_in),
        .I3(\c_data_reg[5] ),
        .I4(p_164_in),
        .I5(p_219_in),
        .O(p_291_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[12]_i_4 
       (.I0(\prv_crc_cr0[12]_i_9_n_0 ),
        .I1(p_218_in),
        .I2(p_219_in),
        .I3(\c_data_reg[5] ),
        .I4(\c_data_reg[4] ),
        .I5(p_209_in),
        .O(p_305_in));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[12]_i_5 
       (.I0(p_241_in),
        .I1(Q[12]),
        .O(p_320_in));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \prv_crc_cr0[12]_i_6 
       (.I0(p_168_in),
        .I1(p_314_in),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(\prv_crc_cr0[12]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[12]_i_7 
       (.I0(p_0_in160_in),
        .I1(p_11_in95_in),
        .I2(p_218_in),
        .I3(\c_data_reg[4] ),
        .I4(\c_data_reg[8] ),
        .I5(p_153_in),
        .O(\prv_crc_cr0[12]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[12]_i_8 
       (.I0(\c_data_reg[1] ),
        .I1(\c_data_reg[0] ),
        .O(p_219_in));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT4 #(
    .INIT(16'h1BE4)) 
    \prv_crc_cr0[12]_i_9 
       (.I0(c_en),
        .I1(prv_crc_cr1[9]),
        .I2(prv_crc_cr0[9]),
        .I3(\c_data_reg[15] [3]),
        .O(\prv_crc_cr0[12]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \prv_crc_cr0[13]_i_1 
       (.I0(p_328_in),
        .I1(p_326_in),
        .I2(\prv_crc_cr0[13]_i_4_n_0 ),
        .I3(p_327_in),
        .I4(p_325_in),
        .I5(rstart),
        .O(p_1_in[13]));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \prv_crc_cr0[13]_i_10 
       (.I0(prv_crc_cr1[2]),
        .I1(prv_crc_cr0[2]),
        .I2(c_en),
        .I3(prv_crc_cr1[1]),
        .I4(prv_crc_cr0[1]),
        .O(p_185_in));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \prv_crc_cr0[13]_i_11 
       (.I0(prv_crc_cr1[9]),
        .I1(prv_crc_cr0[9]),
        .I2(c_en),
        .I3(prv_crc_cr1[5]),
        .I4(prv_crc_cr0[5]),
        .O(p_184_in));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \prv_crc_cr0[13]_i_12 
       (.I0(prv_crc_cr0[13]),
        .I1(prv_crc_cr1[13]),
        .I2(c_en),
        .O(p_11_in95_in));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[13]_i_13 
       (.I0(\c_data_reg[15] [7]),
        .I1(\c_data_reg[15] [3]),
        .O(p_164_in));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[13]_i_14 
       (.I0(\c_data_reg[15] [0]),
        .I1(\c_data_reg[1] ),
        .O(p_186_in));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[13]_i_15 
       (.I0(\c_data_reg[15] [1]),
        .I1(\c_data_reg[5] ),
        .O(p_172_in));
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \prv_crc_cr0[13]_i_16 
       (.I0(prv_crc_cr1[6]),
        .I1(prv_crc_cr0[6]),
        .I2(c_en),
        .I3(prv_crc_cr1[5]),
        .I4(prv_crc_cr0[5]),
        .O(p_174_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[13]_i_17 
       (.I0(\c_data_reg[15] [3]),
        .I1(\c_data_reg[15] [0]),
        .I2(\c_data_reg[1] ),
        .I3(nxt_crc_8bit0114_out__0),
        .I4(p_20_in107_in),
        .I5(\c_data_reg[15] [1]),
        .O(\prv_crc_cr0[13]_i_17_n_0 ));
  LUT6 #(
    .INIT(64'h665A99A599A5665A)) 
    \prv_crc_cr0[13]_i_18 
       (.I0(p_0_in171_in),
        .I1(prv_crc_cr0[14]),
        .I2(prv_crc_cr1[14]),
        .I3(c_en),
        .I4(\c_data_reg[15] [8]),
        .I5(\c_data_reg[15] [4]),
        .O(\prv_crc_cr0[13]_i_18_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \prv_crc_cr0[13]_i_19 
       (.I0(prv_crc_cr1[9]),
        .I1(prv_crc_cr0[9]),
        .I2(c_en),
        .I3(prv_crc_cr1[13]),
        .I4(prv_crc_cr0[13]),
        .O(p_165_in));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[13]_i_2 
       (.I0(Q[2]),
        .I1(Q[1]),
        .O(p_328_in));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[13]_i_3 
       (.I0(p_301_in),
        .I1(p_300_in),
        .O(p_326_in));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \prv_crc_cr0[13]_i_4 
       (.I0(Q[5]),
        .I1(Q[13]),
        .I2(Q[9]),
        .O(\prv_crc_cr0[13]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[13]_i_5 
       (.I0(p_168_in),
        .I1(p_287_in),
        .O(p_327_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[13]_i_6 
       (.I0(p_185_in),
        .I1(p_184_in),
        .I2(p_11_in95_in),
        .I3(p_164_in),
        .I4(\c_data_reg[5] ),
        .I5(p_186_in),
        .O(p_325_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[13]_i_7 
       (.I0(p_0_in171_in),
        .I1(\c_data_reg[15] [4]),
        .I2(p_185_in),
        .I3(p_186_in),
        .I4(p_172_in),
        .I5(p_174_in),
        .O(p_301_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[13]_i_8 
       (.I0(\c_data_reg[5] ),
        .I1(p_0_in160_in),
        .I2(\prv_crc_cr0[13]_i_17_n_0 ),
        .I3(p_185_in),
        .I4(p_17_in103_in),
        .I5(\prv_crc_cr0[13]_i_18_n_0 ),
        .O(p_300_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[13]_i_9 
       (.I0(p_165_in),
        .I1(\c_data_reg[15] [7]),
        .I2(\c_data_reg[15] [3]),
        .I3(\c_data_reg[15] [1]),
        .I4(\c_data_reg[5] ),
        .I5(p_174_in),
        .O(p_168_in));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT5 #(
    .INIT(32'hFFFF6996)) 
    \prv_crc_cr0[14]_i_1 
       (.I0(\prv_crc_cr0[14]_i_2_n_0 ),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(p_332_in),
        .I4(rstart),
        .O(p_1_in[14]));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \prv_crc_cr0[14]_i_10 
       (.I0(prv_crc_cr1[6]),
        .I1(prv_crc_cr0[6]),
        .I2(c_en),
        .I3(prv_crc_cr1[10]),
        .I4(prv_crc_cr0[10]),
        .O(p_203_in));
  LUT6 #(
    .INIT(64'h1BE4E41BE41B1BE4)) 
    \prv_crc_cr0[14]_i_11 
       (.I0(c_en),
        .I1(prv_crc_cr1[0]),
        .I2(prv_crc_cr0[0]),
        .I3(\c_data_reg[15] [2]),
        .I4(\c_data_reg[15] [5]),
        .I5(\c_data_reg[0] ),
        .O(\prv_crc_cr0[14]_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT4 #(
    .INIT(16'h569A)) 
    \prv_crc_cr0[14]_i_12 
       (.I0(\c_data_reg[3] ),
        .I1(c_en),
        .I2(prv_crc_cr1[3]),
        .I3(prv_crc_cr0[3]),
        .O(nxt_crc_8bit0114_out__0));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \prv_crc_cr0[14]_i_13 
       (.I0(prv_crc_cr1[7]),
        .I1(prv_crc_cr0[7]),
        .I2(c_en),
        .I3(prv_crc_cr1[11]),
        .I4(prv_crc_cr0[11]),
        .O(p_230_in));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT4 #(
    .INIT(16'h569A)) 
    \prv_crc_cr0[14]_i_14 
       (.I0(\c_data_reg[15] [0]),
        .I1(c_en),
        .I2(prv_crc_cr1[2]),
        .I3(prv_crc_cr0[2]),
        .O(\prv_crc_cr0[14]_i_14_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \prv_crc_cr0[14]_i_15 
       (.I0(p_5_in88_in),
        .I1(\c_data_reg[3] ),
        .I2(\c_data_reg[15] [0]),
        .I3(\c_data_reg[4] ),
        .I4(p_15_in),
        .O(\prv_crc_cr0[14]_i_15_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[14]_i_16 
       (.I0(p_204_in),
        .I1(p_16_in100_in),
        .I2(p_20_in107_in),
        .I3(\c_data_reg[15] [2]),
        .I4(\c_data_reg[15] [1]),
        .I5(p_1_in76_in),
        .O(\prv_crc_cr0[14]_i_16_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \prv_crc_cr0[14]_i_17 
       (.I0(prv_crc_cr1[14]),
        .I1(prv_crc_cr0[14]),
        .I2(c_en),
        .I3(prv_crc_cr1[10]),
        .I4(prv_crc_cr0[10]),
        .O(p_190_in));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT4 #(
    .INIT(16'h569A)) 
    \prv_crc_cr0[14]_i_18 
       (.I0(\c_data_reg[15] [1]),
        .I1(c_en),
        .I2(prv_crc_cr1[7]),
        .I3(prv_crc_cr0[7]),
        .O(\prv_crc_cr0[14]_i_18_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT4 #(
    .INIT(16'h569A)) 
    \prv_crc_cr0[14]_i_19 
       (.I0(\c_data_reg[15] [9]),
        .I1(c_en),
        .I2(prv_crc_cr1[15]),
        .I3(prv_crc_cr0[15]),
        .O(p_229_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[14]_i_2 
       (.I0(p_330_in),
        .I1(p_310_in),
        .I2(p_309_in),
        .I3(Q[6]),
        .I4(Q[10]),
        .I5(Q[14]),
        .O(\prv_crc_cr0[14]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT4 #(
    .INIT(16'h1BE4)) 
    \prv_crc_cr0[14]_i_20 
       (.I0(c_en),
        .I1(prv_crc_cr1[0]),
        .I2(prv_crc_cr0[0]),
        .I3(\c_data_reg[15] [2]),
        .O(\prv_crc_cr0[14]_i_20_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT4 #(
    .INIT(16'h1BE4)) 
    \prv_crc_cr0[14]_i_21 
       (.I0(c_en),
        .I1(prv_crc_cr1[8]),
        .I2(prv_crc_cr0[8]),
        .I3(\c_data_reg[8] ),
        .O(\prv_crc_cr0[14]_i_21_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[14]_i_3 
       (.I0(p_287_in),
        .I1(p_317_in),
        .O(p_332_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[14]_i_4 
       (.I0(\prv_crc_cr0[14]_i_9_n_0 ),
        .I1(\c_data_reg[15] [0]),
        .I2(\c_data_reg[3] ),
        .I3(\c_data_reg[15] [8]),
        .I4(p_203_in),
        .I5(p_204_in),
        .O(p_330_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[14]_i_5 
       (.I0(\prv_crc_cr0[14]_i_11_n_0 ),
        .I1(\c_data_reg[15] [1]),
        .I2(p_20_in107_in),
        .I3(nxt_crc_8bit0114_out__0),
        .I4(p_230_in),
        .I5(\prv_crc_cr0[14]_i_14_n_0 ),
        .O(p_310_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[14]_i_6 
       (.I0(\prv_crc_cr0[14]_i_15_n_0 ),
        .I1(\prv_crc_cr0[14]_i_16_n_0 ),
        .I2(\c_data_reg[15] [4]),
        .I3(\c_data_reg[15] [5]),
        .I4(p_0_in171_in),
        .I5(\c_data_reg[15] [9]),
        .O(p_309_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[14]_i_7 
       (.I0(\c_data_reg[15] [4]),
        .I1(\c_data_reg[15] [8]),
        .I2(p_190_in),
        .I3(p_20_in107_in),
        .I4(\c_data_reg[15] [2]),
        .I5(\prv_crc_cr0[14]_i_18_n_0 ),
        .O(p_287_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[14]_i_8 
       (.I0(\c_data_reg[15] [5]),
        .I1(p_229_in),
        .I2(p_230_in),
        .I3(\prv_crc_cr0[14]_i_20_n_0 ),
        .I4(\c_data_reg[0] ),
        .I5(\prv_crc_cr0[14]_i_21_n_0 ),
        .O(p_317_in));
  LUT5 #(
    .INIT(32'h99A5665A)) 
    \prv_crc_cr0[14]_i_9 
       (.I0(\c_data_reg[15] [1]),
        .I1(prv_crc_cr0[14]),
        .I2(prv_crc_cr1[14]),
        .I3(c_en),
        .I4(\c_data_reg[15] [4]),
        .O(\prv_crc_cr0[14]_i_9_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[15]_i_1 
       (.I0(rstart),
        .I1(c_en),
        .O(\prv_crc_cr0[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[15]_i_2 
       (.I0(\prv_crc_cr0[15]_i_3_n_0 ),
        .I1(rstart),
        .O(p_1_in[15]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[15]_i_3 
       (.I0(p_338_in),
        .I1(Q[4]),
        .I2(Q[3]),
        .I3(p_335_in),
        .I4(p_337_in),
        .I5(p_336_in),
        .O(\prv_crc_cr0[15]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[15]_i_4 
       (.I0(p_317_in),
        .I1(p_305_in),
        .O(p_338_in));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[15]_i_5 
       (.I0(Q[11]),
        .I1(Q[7]),
        .O(p_335_in));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[15]_i_6 
       (.I0(p_306_in),
        .I1(p_307_in),
        .O(p_337_in));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[15]_i_7 
       (.I0(Q[15]),
        .I1(p_308_in),
        .O(p_336_in));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[1]_i_1 
       (.I0(\prv_crc_cr0[1]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[1]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[1]_i_2 
       (.I0(p_268_in),
        .I1(Q[9]),
        .I2(Q[13]),
        .I3(p_300_in),
        .I4(p_325_in),
        .I5(p_267_in),
        .O(\prv_crc_cr0[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[2]_i_1 
       (.I0(\prv_crc_cr0[2]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[2]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[2]_i_2 
       (.I0(Q[6]),
        .I1(Q[7]),
        .I2(p_330_in),
        .I3(p_309_in),
        .I4(p_306_in),
        .I5(\prv_crc_cr0[2]_i_4_n_0 ),
        .O(\prv_crc_cr0[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[2]_i_3 
       (.I0(\prv_crc_cr0[2]_i_5_n_0 ),
        .I1(p_216_in),
        .I2(\prv_crc_cr0[2]_i_6_n_0 ),
        .I3(\prv_crc_cr0[14]_i_21_n_0 ),
        .I4(p_231_in),
        .I5(p_218_in),
        .O(p_306_in));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \prv_crc_cr0[2]_i_4 
       (.I0(p_310_in),
        .I1(Q[10]),
        .I2(Q[14]),
        .O(\prv_crc_cr0[2]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \prv_crc_cr0[2]_i_5 
       (.I0(\c_data_reg[0] ),
        .I1(\c_data_reg[1] ),
        .I2(\c_data_reg[4] ),
        .I3(\c_data_reg[3] ),
        .O(\prv_crc_cr0[2]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT4 #(
    .INIT(16'h1BE4)) 
    \prv_crc_cr0[2]_i_6 
       (.I0(c_en),
        .I1(prv_crc_cr1[7]),
        .I2(prv_crc_cr0[7]),
        .I3(\c_data_reg[15] [2]),
        .O(\prv_crc_cr0[2]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT5 #(
    .INIT(32'h353AC5CA)) 
    \prv_crc_cr0[2]_i_7 
       (.I0(prv_crc_cr1[3]),
        .I1(prv_crc_cr0[3]),
        .I2(c_en),
        .I3(prv_crc_cr1[4]),
        .I4(prv_crc_cr0[4]),
        .O(p_231_in));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[3]_i_1 
       (.I0(\prv_crc_cr0[3]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[3]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[3]_i_2 
       (.I0(p_291_in),
        .I1(p_308_in),
        .I2(Q[15]),
        .I3(Q[11]),
        .I4(p_314_in),
        .I5(\prv_crc_cr0[3]_i_3_n_0 ),
        .O(\prv_crc_cr0[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \prv_crc_cr0[3]_i_3 
       (.I0(p_306_in),
        .I1(p_307_in),
        .I2(Q[8]),
        .I3(Q[7]),
        .I4(Q[0]),
        .O(\prv_crc_cr0[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[4]_i_1 
       (.I0(\prv_crc_cr0[4]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[4]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[4]_i_2 
       (.I0(p_300_in),
        .I1(Q[9]),
        .I2(\prv_crc_cr0[12]_i_6_n_0 ),
        .I3(Q[5]),
        .I4(Q[4]),
        .I5(p_262_in),
        .O(\prv_crc_cr0[4]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[4]_i_3 
       (.I0(p_305_in),
        .I1(p_301_in),
        .O(p_262_in));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[5]_i_1 
       (.I0(\prv_crc_cr0[5]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[5]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[5]_i_2 
       (.I0(p_327_in),
        .I1(Q[10]),
        .I2(p_309_in),
        .I3(p_267_in),
        .I4(p_268_in),
        .I5(p_328_in),
        .O(\prv_crc_cr0[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[5]_i_3 
       (.I0(Q[6]),
        .I1(Q[5]),
        .O(p_267_in));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[5]_i_4 
       (.I0(p_301_in),
        .I1(p_310_in),
        .O(p_268_in));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[6]_i_1 
       (.I0(\prv_crc_cr0[6]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[6]));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \prv_crc_cr0[6]_i_2 
       (.I0(p_332_in),
        .I1(p_337_in),
        .I2(p_310_in),
        .I3(\prv_crc_cr0[6]_i_3_n_0 ),
        .O(\prv_crc_cr0[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[6]_i_3 
       (.I0(p_314_in),
        .I1(p_335_in),
        .I2(Q[2]),
        .I3(Q[6]),
        .I4(Q[3]),
        .I5(Q[0]),
        .O(\prv_crc_cr0[6]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[7]_i_1 
       (.I0(\prv_crc_cr0[7]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[7]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[7]_i_2 
       (.I0(p_291_in),
        .I1(p_322_in),
        .I2(Q[4]),
        .I3(Q[3]),
        .I4(p_320_in),
        .I5(\prv_crc_cr0[7]_i_4_n_0 ),
        .O(\prv_crc_cr0[7]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[7]_i_3 
       (.I0(p_314_in),
        .I1(p_168_in),
        .O(p_322_in));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[7]_i_4 
       (.I0(p_323_in),
        .I1(p_317_in),
        .I2(p_305_in),
        .I3(Q[8]),
        .I4(Q[7]),
        .I5(p_306_in),
        .O(\prv_crc_cr0[7]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \prv_crc_cr0[7]_i_5 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(p_323_in));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[8]_i_1 
       (.I0(\prv_crc_cr0[8]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[8]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[8]_i_2 
       (.I0(\prv_crc_cr0[8]_i_3_n_0 ),
        .I1(\prv_crc_cr0[8]_i_4_n_0 ),
        .I2(p_291_in),
        .I3(p_300_in),
        .I4(p_325_in),
        .I5(\prv_crc_cr0[8]_i_5_n_0 ),
        .O(\prv_crc_cr0[8]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \prv_crc_cr0[8]_i_3 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[8]),
        .O(\prv_crc_cr0[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[8]_i_4 
       (.I0(p_301_in),
        .I1(p_287_in),
        .I2(Q[4]),
        .I3(Q[5]),
        .I4(Q[9]),
        .I5(Q[13]),
        .O(\prv_crc_cr0[8]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \prv_crc_cr0[8]_i_5 
       (.I0(p_305_in),
        .I1(p_168_in),
        .I2(p_314_in),
        .O(\prv_crc_cr0[8]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \prv_crc_cr0[9]_i_1 
       (.I0(\prv_crc_cr0[9]_i_2_n_0 ),
        .I1(rstart),
        .O(p_1_in[9]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[9]_i_2 
       (.I0(\prv_crc_cr0[9]_i_3_n_0 ),
        .I1(p_309_in),
        .I2(p_330_in),
        .I3(p_300_in),
        .I4(\prv_crc_cr0[9]_i_4_n_0 ),
        .I5(\prv_crc_cr0[9]_i_5_n_0 ),
        .O(\prv_crc_cr0[9]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \prv_crc_cr0[9]_i_3 
       (.I0(Q[3]),
        .I1(p_317_in),
        .I2(Q[9]),
        .O(\prv_crc_cr0[9]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \prv_crc_cr0[9]_i_4 
       (.I0(Q[10]),
        .I1(Q[14]),
        .I2(Q[5]),
        .I3(Q[6]),
        .O(\prv_crc_cr0[9]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \prv_crc_cr0[9]_i_5 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(p_168_in),
        .I3(p_287_in),
        .I4(p_301_in),
        .I5(p_310_in),
        .O(\prv_crc_cr0[9]_i_5_n_0 ));
  FDPE \prv_crc_cr0_reg[0] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[0]),
        .PRE(srst),
        .Q(prv_crc_cr0[0]));
  FDPE \prv_crc_cr0_reg[10] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[10]),
        .PRE(srst),
        .Q(prv_crc_cr0[10]));
  FDPE \prv_crc_cr0_reg[11] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[11]),
        .PRE(srst),
        .Q(prv_crc_cr0[11]));
  FDPE \prv_crc_cr0_reg[12] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[12]),
        .PRE(srst),
        .Q(prv_crc_cr0[12]));
  FDPE \prv_crc_cr0_reg[13] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[13]),
        .PRE(srst),
        .Q(prv_crc_cr0[13]));
  FDPE \prv_crc_cr0_reg[14] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[14]),
        .PRE(srst),
        .Q(prv_crc_cr0[14]));
  FDPE \prv_crc_cr0_reg[15] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[15]),
        .PRE(srst),
        .Q(prv_crc_cr0[15]));
  FDPE \prv_crc_cr0_reg[1] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[1]),
        .PRE(srst),
        .Q(prv_crc_cr0[1]));
  FDPE \prv_crc_cr0_reg[2] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[2]),
        .PRE(srst),
        .Q(prv_crc_cr0[2]));
  FDPE \prv_crc_cr0_reg[3] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[3]),
        .PRE(srst),
        .Q(prv_crc_cr0[3]));
  FDPE \prv_crc_cr0_reg[4] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[4]),
        .PRE(srst),
        .Q(prv_crc_cr0[4]));
  FDPE \prv_crc_cr0_reg[5] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[5]),
        .PRE(srst),
        .Q(prv_crc_cr0[5]));
  FDPE \prv_crc_cr0_reg[6] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[6]),
        .PRE(srst),
        .Q(prv_crc_cr0[6]));
  FDPE \prv_crc_cr0_reg[7] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[7]),
        .PRE(srst),
        .Q(prv_crc_cr0[7]));
  FDPE \prv_crc_cr0_reg[8] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[8]),
        .PRE(srst),
        .Q(prv_crc_cr0[8]));
  FDPE \prv_crc_cr0_reg[9] 
       (.C(m_axis_aclk),
        .CE(\prv_crc_cr0[15]_i_1_n_0 ),
        .D(p_1_in[9]),
        .PRE(srst),
        .Q(prv_crc_cr0[9]));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[0]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[0]),
        .I2(prv_crc_cr0[0]),
        .I3(rstart),
        .O(p_0_in[0]));
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[10]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[10]),
        .I2(prv_crc_cr0[10]),
        .I3(rstart),
        .O(p_0_in[10]));
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[11]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[11]),
        .I2(prv_crc_cr0[11]),
        .I3(rstart),
        .O(p_0_in[11]));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[12]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[12]),
        .I2(prv_crc_cr0[12]),
        .I3(rstart),
        .O(p_0_in[12]));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[13]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[13]),
        .I2(prv_crc_cr0[13]),
        .I3(rstart),
        .O(p_0_in[13]));
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[14]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[14]),
        .I2(prv_crc_cr0[14]),
        .I3(rstart),
        .O(p_0_in[14]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[15]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[15]),
        .I2(prv_crc_cr0[15]),
        .I3(rstart),
        .O(p_0_in[15]));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[1]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[1]),
        .I2(prv_crc_cr0[1]),
        .I3(rstart),
        .O(p_0_in[1]));
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[2]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[2]),
        .I2(prv_crc_cr0[2]),
        .I3(rstart),
        .O(p_0_in[2]));
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[3]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[3]),
        .I2(prv_crc_cr0[3]),
        .I3(rstart),
        .O(p_0_in[3]));
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[4]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[4]),
        .I2(prv_crc_cr0[4]),
        .I3(rstart),
        .O(p_0_in[4]));
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[5]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[5]),
        .I2(prv_crc_cr0[5]),
        .I3(rstart),
        .O(p_0_in[5]));
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[6]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[6]),
        .I2(prv_crc_cr0[6]),
        .I3(rstart),
        .O(p_0_in[6]));
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[7]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[7]),
        .I2(prv_crc_cr0[7]),
        .I3(rstart),
        .O(p_0_in[7]));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[8]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[8]),
        .I2(prv_crc_cr0[8]),
        .I3(rstart),
        .O(p_0_in[8]));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT4 #(
    .INIT(16'hFFE4)) 
    \prv_crc_cr1[9]_i_1 
       (.I0(c_en),
        .I1(prv_crc_cr1[9]),
        .I2(prv_crc_cr0[9]),
        .I3(rstart),
        .O(p_0_in[9]));
  FDPE \prv_crc_cr1_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[0]),
        .PRE(srst),
        .Q(prv_crc_cr1[0]));
  FDPE \prv_crc_cr1_reg[10] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[10]),
        .PRE(srst),
        .Q(prv_crc_cr1[10]));
  FDPE \prv_crc_cr1_reg[11] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[11]),
        .PRE(srst),
        .Q(prv_crc_cr1[11]));
  FDPE \prv_crc_cr1_reg[12] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[12]),
        .PRE(srst),
        .Q(prv_crc_cr1[12]));
  FDPE \prv_crc_cr1_reg[13] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[13]),
        .PRE(srst),
        .Q(prv_crc_cr1[13]));
  FDPE \prv_crc_cr1_reg[14] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[14]),
        .PRE(srst),
        .Q(prv_crc_cr1[14]));
  FDPE \prv_crc_cr1_reg[15] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[15]),
        .PRE(srst),
        .Q(prv_crc_cr1[15]));
  FDPE \prv_crc_cr1_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[1]),
        .PRE(srst),
        .Q(prv_crc_cr1[1]));
  FDPE \prv_crc_cr1_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[2]),
        .PRE(srst),
        .Q(prv_crc_cr1[2]));
  FDPE \prv_crc_cr1_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[3]),
        .PRE(srst),
        .Q(prv_crc_cr1[3]));
  FDPE \prv_crc_cr1_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[4]),
        .PRE(srst),
        .Q(prv_crc_cr1[4]));
  FDPE \prv_crc_cr1_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[5]),
        .PRE(srst),
        .Q(prv_crc_cr1[5]));
  FDPE \prv_crc_cr1_reg[6] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[6]),
        .PRE(srst),
        .Q(prv_crc_cr1[6]));
  FDPE \prv_crc_cr1_reg[7] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[7]),
        .PRE(srst),
        .Q(prv_crc_cr1[7]));
  FDPE \prv_crc_cr1_reg[8] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[8]),
        .PRE(srst),
        .Q(prv_crc_cr1[8]));
  FDPE \prv_crc_cr1_reg[9] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_in[9]),
        .PRE(srst),
        .Q(prv_crc_cr1[9]));
  LUT5 #(
    .INIT(32'hFFFFFF5D)) 
    rstart_i_1
       (.I0(core_men_r2c),
        .I1(aresetn_d1),
        .I2(aresetn_d2),
        .I3(crc_done),
        .I4(crc_rst),
        .O(rstart_reg));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_data" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_data
   (wc_gt_pload,
    data_wip_reg,
    end_mem_wr2_reg_0,
    crc_trig_d2,
    mem_wen_i,
    wc_err,
    wr_en,
    lp_count_en,
    src_in,
    fsm_wip_reg,
    \LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ,
    lbuf_blk_wen_i,
    data_shutdown,
    phecc_start_d1,
    p_7_out,
    p_6_out,
    p_3_out,
    p_0_out,
    \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_0 ,
    data_done,
    lbuf_rst_code,
    din,
    \cur_byte_cnt_reg[0]_0 ,
    out,
    S,
    \LINE_BUF_WR_64.mem_wen_i_reg_0 ,
    \cur_byte_cnt_reg[15]_0 ,
    \data_p_strb_reg[1] ,
    \data_p_strb_reg[0] ,
    D,
    E,
    \LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ,
    \FSM_sequential_cur_state_reg[0] ,
    \LINE_BUF_WR_64.mem_wdata_i_reg[66]_0 ,
    crc_blk_sel,
    srst,
    m_axis_aclk,
    data_wip,
    crc_trig_d10,
    crc_partial0,
    mem_wen0,
    lp_data,
    \syncstages_ff_reg[1] ,
    short_pkt_reg,
    ram_full_i_reg,
    phecc_start,
    pkt_valid,
    pkt_rdvld_reg,
    \ERR_FRAME_SYNC_ECCERR[0].ecc_errframesync_reg[0] ,
    pkt_rdvld_reg_0,
    p_1_in4_in,
    pkt_rdvld_reg_1,
    p_1_in1_in,
    pkt_rdvld_reg_2,
    p_1_in,
    short_pkt_reg_0,
    m_axis_aresetn,
    core_men_r2c,
    \data_type_reg_reg[2] ,
    \data_type_reg_reg[2]_0 ,
    \gaf.gaf0.ram_afull_i_reg ,
    Q,
    diwc_corrected_zero,
    \data_type_reg_reg[4] ,
    \diwc_corrected_reg[23] ,
    dout,
    \byt_cnt_adj_reg[15] ,
    \exp_ecc_reg[7] ,
    CO,
    \FSM_sequential_cur_state_reg[1] ,
    \diwc_corrected_reg[2] ,
    short_pkt_reg_1,
    crc_start_d1,
    \data_p_strb_reg[1]_0 ,
    \data_p_strb_reg[0]_0 ,
    \c_data_reg[15] ,
    \FSM_sequential_cur_state_reg[0]_0 ,
    \byt_cnt_adj_reg[15]_0 ,
    pkt_rdvld_reg_3,
    \byte_cnt_reg_reg[15] ,
    diwc_corrected_lte4,
    pkt_rdvld_reg_4,
    \gpr1.dout_i_reg[7] ,
    \byte_cnt_reg_reg[0] ,
    \byte_cnt_reg_reg[1] ,
    \byte_cnt_reg_reg[0]_0 ,
    \byte_cnt_reg_reg[1]_0 ,
    \byte_cnt_reg_reg[0]_1 ,
    \gpr1.dout_i_reg[37] ,
    \gpr1.dout_i_reg[17] ,
    \LINE_BUF_WR_64.mem_wdata_i_reg[67]_0 ,
    \syncstages_ff_reg[1]_0 );
  output wc_gt_pload;
  output data_wip_reg;
  output [2:0]end_mem_wr2_reg_0;
  output crc_trig_d2;
  output mem_wen_i;
  output wc_err;
  output wr_en;
  output [3:0]lp_count_en;
  output [0:0]src_in;
  output fsm_wip_reg;
  output \LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ;
  output lbuf_blk_wen_i;
  output data_shutdown;
  output phecc_start_d1;
  output p_7_out;
  output p_6_out;
  output p_3_out;
  output p_0_out;
  output \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_0 ;
  output data_done;
  output lbuf_rst_code;
  output [67:0]din;
  output [0:0]\cur_byte_cnt_reg[0]_0 ;
  output [12:0]out;
  output [1:0]S;
  output [3:0]\LINE_BUF_WR_64.mem_wen_i_reg_0 ;
  output [14:0]\cur_byte_cnt_reg[15]_0 ;
  output \data_p_strb_reg[1] ;
  output \data_p_strb_reg[0] ;
  output [15:0]D;
  output [1:0]E;
  output \LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ;
  output \FSM_sequential_cur_state_reg[0] ;
  output \LINE_BUF_WR_64.mem_wdata_i_reg[66]_0 ;
  output [3:0]crc_blk_sel;
  input srst;
  input m_axis_aclk;
  input data_wip;
  input crc_trig_d10;
  input crc_partial0;
  input mem_wen0;
  input lp_data;
  input \syncstages_ff_reg[1] ;
  input short_pkt_reg;
  input ram_full_i_reg;
  input phecc_start;
  input pkt_valid;
  input pkt_rdvld_reg;
  input \ERR_FRAME_SYNC_ECCERR[0].ecc_errframesync_reg[0] ;
  input pkt_rdvld_reg_0;
  input p_1_in4_in;
  input pkt_rdvld_reg_1;
  input p_1_in1_in;
  input pkt_rdvld_reg_2;
  input p_1_in;
  input short_pkt_reg_0;
  input m_axis_aresetn;
  input core_men_r2c;
  input \data_type_reg_reg[2] ;
  input \data_type_reg_reg[2]_0 ;
  input \gaf.gaf0.ram_afull_i_reg ;
  input [1:0]Q;
  input diwc_corrected_zero;
  input \data_type_reg_reg[4] ;
  input [23:0]\diwc_corrected_reg[23] ;
  input [0:0]dout;
  input [15:0]\byt_cnt_adj_reg[15] ;
  input [7:0]\exp_ecc_reg[7] ;
  input [0:0]CO;
  input \FSM_sequential_cur_state_reg[1] ;
  input \diwc_corrected_reg[2] ;
  input short_pkt_reg_1;
  input crc_start_d1;
  input \data_p_strb_reg[1]_0 ;
  input \data_p_strb_reg[0]_0 ;
  input [15:0]\c_data_reg[15] ;
  input [0:0]\FSM_sequential_cur_state_reg[0]_0 ;
  input [0:0]\byt_cnt_adj_reg[15]_0 ;
  input pkt_rdvld_reg_3;
  input [0:0]\byte_cnt_reg_reg[15] ;
  input diwc_corrected_lte4;
  input [0:0]pkt_rdvld_reg_4;
  input [31:0]\gpr1.dout_i_reg[7] ;
  input [1:0]\byte_cnt_reg_reg[0] ;
  input \byte_cnt_reg_reg[1] ;
  input \byte_cnt_reg_reg[0]_0 ;
  input \byte_cnt_reg_reg[1]_0 ;
  input \byte_cnt_reg_reg[0]_1 ;
  input [15:0]\gpr1.dout_i_reg[37] ;
  input [15:0]\gpr1.dout_i_reg[17] ;
  input [2:0]\LINE_BUF_WR_64.mem_wdata_i_reg[67]_0 ;
  input \syncstages_ff_reg[1]_0 ;

  wire [0:0]CO;
  wire [15:0]D;
  wire [1:0]E;
  wire \ERR_FRAME_SYNC[0].fe_hunt[0]_i_1_n_0 ;
  wire \ERR_FRAME_SYNC[0].fe_hunt_reg_n_0_[0] ;
  wire \ERR_FRAME_SYNC[0].fs_hunt[0]_i_1_n_0 ;
  wire \ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ;
  wire \ERR_FRAME_SYNC[0].fs_hunt_reg_n_0_[0] ;
  wire \ERR_FRAME_SYNC[1].fe_hunt[1]_i_1_n_0 ;
  wire \ERR_FRAME_SYNC[1].fs_hunt[1]_i_1_n_0 ;
  wire \ERR_FRAME_SYNC[2].fe_hunt[2]_i_1_n_0 ;
  wire \ERR_FRAME_SYNC[2].fs_hunt[2]_i_1_n_0 ;
  wire \ERR_FRAME_SYNC[3].fe_hunt[3]_i_1_n_0 ;
  wire \ERR_FRAME_SYNC[3].fe_hunt_reg_n_0_[3] ;
  wire \ERR_FRAME_SYNC[3].fs_hunt[3]_i_1_n_0 ;
  wire \ERR_FRAME_SYNC_ALL[0].errframesync[0]_i_3_n_0 ;
  wire \ERR_FRAME_SYNC_ALL[1].errframesync[1]_i_3_n_0 ;
  wire \ERR_FRAME_SYNC_ALL[2].errframesync[2]_i_3_n_0 ;
  wire \ERR_FRAME_SYNC_ALL[3].errframesync[3]_i_3_n_0 ;
  wire \ERR_FRAME_SYNC_ECCERR[0].ecc_errframesync_reg[0] ;
  wire \FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ;
  wire \FRAME_RCVD_GEN[0].frame_rcvd_i_reg ;
  wire \FRAME_RCVD_GEN[1].frame_rcvd_i_reg ;
  wire \FRAME_RCVD_GEN[2].frame_rcvd_i_reg ;
  wire \FRAME_RCVD_GEN[3].frame_rcvd_i_reg ;
  wire \FSM_sequential_cur_state_reg[0] ;
  wire [0:0]\FSM_sequential_cur_state_reg[0]_0 ;
  wire \FSM_sequential_cur_state_reg[1] ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_4_n_0 ;
  wire [31:16]\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_1 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_2 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_3 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_4 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_5 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_6 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_7 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_1 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_2 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_3 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_4 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_5 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_6 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_7 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_1 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_2 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_3 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_4 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_5 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_6 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_7 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_1 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_2 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_3 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_4 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_5 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_6 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_7 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_1 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_2 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_3 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_4 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_5 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_6 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_7 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[31]_i_1_n_7 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_0 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_0 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_1 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_2 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_3 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_4 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_5 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_6 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_7 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_1 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_2 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_3 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_4 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_5 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_6 ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_7 ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[0]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[10]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[11]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[12]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[13]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[14]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[15]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[16]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[17]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[18]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[19]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[1]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[20]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[21]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[22]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[23]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[24]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[25]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[26]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[27]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[28]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[29]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[2]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[30]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_10_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_11_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_12_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_13_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_2_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_5_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_6_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_7_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_8_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[3]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[4]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[5]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[64]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[65]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[67]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[67]_i_2_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[6]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[7]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[8]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[9]_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_1 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_2 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_3 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_1 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_2 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_3 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[66]_0 ;
  wire [2:0]\LINE_BUF_WR_64.mem_wdata_i_reg[67]_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[0] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[10] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[11] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[12] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[13] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[14] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[15] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[16] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[17] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[18] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[19] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[1] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[20] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[21] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[22] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[23] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[24] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[25] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[26] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[27] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[28] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[29] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[2] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[30] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[31] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[32] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[33] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[34] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[35] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[36] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[37] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[38] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[39] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[3] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[40] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[41] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[42] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[43] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[44] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[45] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[46] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[47] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[48] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[49] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[4] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[50] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[51] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[52] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[53] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[54] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[55] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[56] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[57] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[58] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[59] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[5] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[60] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[61] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[62] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[63] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[8] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[9] ;
  wire \LINE_BUF_WR_64.mem_wen_i_i_1_n_0 ;
  wire \LINE_BUF_WR_64.mem_wen_i_i_2_n_0 ;
  wire [3:0]\LINE_BUF_WR_64.mem_wen_i_reg_0 ;
  wire \LINE_BUF_WR_64.str_fwd_i_1_n_0 ;
  wire \LINE_BUF_WR_64.str_fwd_i_2_n_0 ;
  wire \LP_CNTS[0].lp_data[0]_i_2_n_0 ;
  wire \LP_CNTS[0].lp_data_reg_n_0_[0] ;
  wire \LP_CNTS[0].lp_header[0]_i_1_n_0 ;
  wire \LP_CNTS[0].lp_header[0]_i_2_n_0 ;
  wire \LP_CNTS[0].lp_header[0]_i_3_n_0 ;
  wire \LP_CNTS[0].lp_header[0]_i_4_n_0 ;
  wire \LP_CNTS[0].lp_header_reg_n_0_[0] ;
  wire \LP_CNTS[1].lp_header[1]_i_1_n_0 ;
  wire \LP_CNTS[2].lp_header[2]_i_1_n_0 ;
  wire \LP_CNTS[3].lp_header[3]_i_1_n_0 ;
  wire [1:0]Q;
  wire [1:0]S;
  wire [15:0]\byt_cnt_adj_reg[15] ;
  wire [0:0]\byt_cnt_adj_reg[15]_0 ;
  wire [1:0]\byte_cnt_reg_reg[0] ;
  wire \byte_cnt_reg_reg[0]_0 ;
  wire \byte_cnt_reg_reg[0]_1 ;
  wire [0:0]\byte_cnt_reg_reg[15] ;
  wire \byte_cnt_reg_reg[1] ;
  wire \byte_cnt_reg_reg[1]_0 ;
  wire [15:0]\c_data_reg[15] ;
  wire core_men_f;
  wire core_men_f_i_1_n_0;
  wire core_men_r2c;
  wire [3:0]crc_blk_sel;
  wire [1:0]crc_p_strb;
  wire [15:0]crc_p_value;
  wire crc_partial;
  wire crc_partial0;
  wire crc_start_d1;
  wire crc_trig_d1;
  wire crc_trig_d10;
  wire crc_trig_d2;
  wire crc_trig_d3;
  wire crc_trig_d3_i_1_n_0;
  wire [15:1]cur_byte_cnt;
  wire \cur_byte_cnt[15]_i_1_n_0 ;
  wire \cur_byte_cnt[15]_i_2_n_0 ;
  wire \cur_byte_cnt[15]_i_7_n_0 ;
  wire \cur_byte_cnt[4]_i_3_n_0 ;
  wire [0:0]\cur_byte_cnt_reg[0]_0 ;
  wire \cur_byte_cnt_reg[12]_i_2_n_0 ;
  wire \cur_byte_cnt_reg[12]_i_2_n_1 ;
  wire \cur_byte_cnt_reg[12]_i_2_n_2 ;
  wire \cur_byte_cnt_reg[12]_i_2_n_3 ;
  wire [14:0]\cur_byte_cnt_reg[15]_0 ;
  wire \cur_byte_cnt_reg[15]_i_5_n_2 ;
  wire \cur_byte_cnt_reg[15]_i_5_n_3 ;
  wire \cur_byte_cnt_reg[4]_i_2_n_0 ;
  wire \cur_byte_cnt_reg[4]_i_2_n_1 ;
  wire \cur_byte_cnt_reg[4]_i_2_n_2 ;
  wire \cur_byte_cnt_reg[4]_i_2_n_3 ;
  wire \cur_byte_cnt_reg[8]_i_2_n_0 ;
  wire \cur_byte_cnt_reg[8]_i_2_n_1 ;
  wire \cur_byte_cnt_reg[8]_i_2_n_2 ;
  wire \cur_byte_cnt_reg[8]_i_2_n_3 ;
  wire data_done;
  wire \data_p_strb_reg[0] ;
  wire \data_p_strb_reg[0]_0 ;
  wire \data_p_strb_reg[1] ;
  wire \data_p_strb_reg[1]_0 ;
  wire data_sdown_reg_i_1_n_0;
  wire data_shutdown;
  wire \data_type_reg_reg[2] ;
  wire \data_type_reg_reg[2]_0 ;
  wire \data_type_reg_reg[4] ;
  wire data_wip;
  wire data_wip_reg;
  wire [67:0]din;
  wire diwc_corrected_lte4;
  wire [23:0]\diwc_corrected_reg[23] ;
  wire \diwc_corrected_reg[2] ;
  wire diwc_corrected_zero;
  wire [0:0]dout;
  wire end_mem_wr1;
  wire end_mem_wr10;
  wire end_mem_wr1_i_1_n_0;
  wire end_mem_wr1_i_3_n_0;
  wire end_mem_wr1_i_4_n_0;
  wire end_mem_wr1_i_5_n_0;
  wire end_mem_wr2;
  wire end_mem_wr2_i_1_n_0;
  wire end_mem_wr2_i_2_n_0;
  wire [2:0]end_mem_wr2_reg_0;
  wire \exp_crc_i[15]_i_3_n_0 ;
  wire \exp_crc_i[7]_i_3_n_0 ;
  wire [15:0]exp_crc_r;
  wire [7:0]\exp_ecc_reg[7] ;
  wire fsm_wip_reg;
  wire fsm_wip_reg_i_1_n_0;
  wire \gaf.gaf0.ram_afull_i_reg ;
  wire [15:0]\gpr1.dout_i_reg[17] ;
  wire [15:0]\gpr1.dout_i_reg[37] ;
  wire [31:0]\gpr1.dout_i_reg[7] ;
  wire lbuf_blk_wen_i;
  wire lbuf_rst_code;
  wire lbuf_wr_byte_cnt0;
  wire [3:0]lp_count_en;
  wire lp_data;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire [31:0]mem_data_l32;
  wire [31:0]mem_data_l32_d;
  wire [1:0]mem_vc;
  wire \mem_wdata[0]_i_1_n_0 ;
  wire \mem_wdata[10]_i_1_n_0 ;
  wire \mem_wdata[11]_i_1_n_0 ;
  wire \mem_wdata[12]_i_1_n_0 ;
  wire \mem_wdata[13]_i_1_n_0 ;
  wire \mem_wdata[14]_i_1_n_0 ;
  wire \mem_wdata[15]_i_1_n_0 ;
  wire \mem_wdata[16]_i_1_n_0 ;
  wire \mem_wdata[17]_i_1_n_0 ;
  wire \mem_wdata[18]_i_1_n_0 ;
  wire \mem_wdata[19]_i_1_n_0 ;
  wire \mem_wdata[1]_i_1_n_0 ;
  wire \mem_wdata[20]_i_1_n_0 ;
  wire \mem_wdata[21]_i_1_n_0 ;
  wire \mem_wdata[22]_i_1_n_0 ;
  wire \mem_wdata[23]_i_1_n_0 ;
  wire \mem_wdata[2]_i_1_n_0 ;
  wire \mem_wdata[3]_i_1_n_0 ;
  wire \mem_wdata[4]_i_1_n_0 ;
  wire \mem_wdata[5]_i_1_n_0 ;
  wire \mem_wdata[63]_i_1_n_0 ;
  wire \mem_wdata[64]_i_1_n_0 ;
  wire \mem_wdata[6]_i_1_n_0 ;
  wire \mem_wdata[7]_i_1_n_0 ;
  wire \mem_wdata[8]_i_1_n_0 ;
  wire \mem_wdata[9]_i_1_n_0 ;
  wire mem_wen0;
  wire mem_wen_i;
  wire [12:0]out;
  wire [0:0]p_0_in;
  wire p_0_in31_in;
  wire p_0_in32_in;
  wire p_0_in33_in;
  wire p_0_in34_in;
  wire p_0_in40_in;
  wire p_0_in46_in;
  wire p_0_out;
  wire p_13_out;
  wire p_17_out;
  wire p_1_in;
  wire p_1_in1_in;
  wire p_1_in35_in;
  wire p_1_in41_in;
  wire p_1_in47_in;
  wire p_1_in4_in;
  wire p_1_in67_in;
  wire p_21_out;
  wire p_22_out;
  wire p_24_out;
  wire p_26_out;
  wire p_28_out;
  wire [15:0]p_2_in;
  wire p_36_out;
  wire p_37_out;
  wire p_3_in68_in;
  wire p_3_out;
  wire p_42_out;
  wire p_43_out;
  wire p_48_out;
  wire p_49_out;
  wire p_54_out;
  wire p_55_out;
  wire p_6_out;
  wire p_7_out;
  wire p_9_out;
  wire phecc_start;
  wire phecc_start_d1;
  wire pkt_rdvld_reg;
  wire pkt_rdvld_reg_0;
  wire pkt_rdvld_reg_1;
  wire pkt_rdvld_reg_2;
  wire pkt_rdvld_reg_3;
  wire [0:0]pkt_rdvld_reg_4;
  wire pkt_valid;
  wire pkt_valid_d1;
  wire pre_byt_cnt1_i_1_n_0;
  wire pre_byt_cnt1_reg_n_0;
  wire pre_byt_cnt2;
  wire pre_byt_cnt2_i_1_n_0;
  wire pre_byt_cnt2_reg_n_0;
  wire ram_full_i_reg;
  wire short_pkt_reg;
  wire short_pkt_reg_0;
  wire short_pkt_reg_1;
  wire [0:0]src_in;
  wire srst;
  wire \syncstages_ff_reg[1] ;
  wire \syncstages_ff_reg[1]_0 ;
  wire wc_err;
  wire wc_gt_pload;
  wire wc_gt_pload0;
  wire wr_en;
  wire [3:0]\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[31]_i_1_CO_UNCONNECTED ;
  wire [3:1]\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[31]_i_1_O_UNCONNECTED ;
  wire [3:0]\NLW_LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_O_UNCONNECTED ;
  wire [3:0]\NLW_LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_O_UNCONNECTED ;
  wire [3:2]\NLW_cur_byte_cnt_reg[15]_i_5_CO_UNCONNECTED ;
  wire [3:3]\NLW_cur_byte_cnt_reg[15]_i_5_O_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT5 #(
    .INIT(32'hFFFD0005)) 
    \ERR_FRAME_SYNC[0].fe_hunt[0]_i_1 
       (.I0(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I1(\FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ),
        .I2(mem_vc[0]),
        .I3(mem_vc[1]),
        .I4(\ERR_FRAME_SYNC[0].fe_hunt_reg_n_0_[0] ),
        .O(\ERR_FRAME_SYNC[0].fe_hunt[0]_i_1_n_0 ));
  FDRE \ERR_FRAME_SYNC[0].fe_hunt_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\ERR_FRAME_SYNC[0].fe_hunt[0]_i_1_n_0 ),
        .Q(\ERR_FRAME_SYNC[0].fe_hunt_reg_n_0_[0] ),
        .R(\syncstages_ff_reg[1] ));
  LUT6 #(
    .INIT(64'hFCFCFCFCFCFCFDDD)) 
    \ERR_FRAME_SYNC[0].fs_hunt[0]_i_1 
       (.I0(\FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ),
        .I1(\syncstages_ff_reg[1] ),
        .I2(\ERR_FRAME_SYNC[0].fs_hunt_reg_n_0_[0] ),
        .I3(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I4(mem_vc[0]),
        .I5(mem_vc[1]),
        .O(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT5 #(
    .INIT(32'hFFFFFDFF)) 
    \ERR_FRAME_SYNC[0].fs_hunt[0]_i_2 
       (.I0(end_mem_wr2_reg_0[2]),
        .I1(p_0_in),
        .I2(end_mem_wr2_reg_0[1]),
        .I3(mem_wen_i),
        .I4(end_mem_wr2_reg_0[0]),
        .O(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ));
  FDRE \ERR_FRAME_SYNC[0].fs_hunt_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_1_n_0 ),
        .Q(\ERR_FRAME_SYNC[0].fs_hunt_reg_n_0_[0] ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT5 #(
    .INIT(32'hFFDF0050)) 
    \ERR_FRAME_SYNC[1].fe_hunt[1]_i_1 
       (.I0(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I1(\FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ),
        .I2(mem_vc[0]),
        .I3(mem_vc[1]),
        .I4(p_1_in67_in),
        .O(\ERR_FRAME_SYNC[1].fe_hunt[1]_i_1_n_0 ));
  FDRE \ERR_FRAME_SYNC[1].fe_hunt_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\ERR_FRAME_SYNC[1].fe_hunt[1]_i_1_n_0 ),
        .Q(p_1_in67_in),
        .R(\syncstages_ff_reg[1] ));
  LUT6 #(
    .INIT(64'hFCFCFCFCFDDDFCFC)) 
    \ERR_FRAME_SYNC[1].fs_hunt[1]_i_1 
       (.I0(\FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ),
        .I1(\syncstages_ff_reg[1] ),
        .I2(p_0_in31_in),
        .I3(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I4(mem_vc[0]),
        .I5(mem_vc[1]),
        .O(\ERR_FRAME_SYNC[1].fs_hunt[1]_i_1_n_0 ));
  FDRE \ERR_FRAME_SYNC[1].fs_hunt_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\ERR_FRAME_SYNC[1].fs_hunt[1]_i_1_n_0 ),
        .Q(p_0_in31_in),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT5 #(
    .INIT(32'hFFDF0050)) 
    \ERR_FRAME_SYNC[2].fe_hunt[2]_i_1 
       (.I0(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I1(\FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ),
        .I2(mem_vc[1]),
        .I3(mem_vc[0]),
        .I4(p_3_in68_in),
        .O(\ERR_FRAME_SYNC[2].fe_hunt[2]_i_1_n_0 ));
  FDRE \ERR_FRAME_SYNC[2].fe_hunt_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\ERR_FRAME_SYNC[2].fe_hunt[2]_i_1_n_0 ),
        .Q(p_3_in68_in),
        .R(\syncstages_ff_reg[1] ));
  LUT6 #(
    .INIT(64'hFCFCFCFCFDDDFCFC)) 
    \ERR_FRAME_SYNC[2].fs_hunt[2]_i_1 
       (.I0(\FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ),
        .I1(\syncstages_ff_reg[1] ),
        .I2(p_0_in32_in),
        .I3(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I4(mem_vc[1]),
        .I5(mem_vc[0]),
        .O(\ERR_FRAME_SYNC[2].fs_hunt[2]_i_1_n_0 ));
  FDRE \ERR_FRAME_SYNC[2].fs_hunt_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\ERR_FRAME_SYNC[2].fs_hunt[2]_i_1_n_0 ),
        .Q(p_0_in32_in),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT5 #(
    .INIT(32'hDFFF5000)) 
    \ERR_FRAME_SYNC[3].fe_hunt[3]_i_1 
       (.I0(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I1(\FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ),
        .I2(mem_vc[0]),
        .I3(mem_vc[1]),
        .I4(\ERR_FRAME_SYNC[3].fe_hunt_reg_n_0_[3] ),
        .O(\ERR_FRAME_SYNC[3].fe_hunt[3]_i_1_n_0 ));
  FDRE \ERR_FRAME_SYNC[3].fe_hunt_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\ERR_FRAME_SYNC[3].fe_hunt[3]_i_1_n_0 ),
        .Q(\ERR_FRAME_SYNC[3].fe_hunt_reg_n_0_[3] ),
        .R(\syncstages_ff_reg[1] ));
  LUT6 #(
    .INIT(64'hFDDDFCFCFCFCFCFC)) 
    \ERR_FRAME_SYNC[3].fs_hunt[3]_i_1 
       (.I0(\FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ),
        .I1(\syncstages_ff_reg[1] ),
        .I2(p_0_in33_in),
        .I3(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .I4(mem_vc[0]),
        .I5(mem_vc[1]),
        .O(\ERR_FRAME_SYNC[3].fs_hunt[3]_i_1_n_0 ));
  FDRE \ERR_FRAME_SYNC[3].fs_hunt_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\ERR_FRAME_SYNC[3].fs_hunt[3]_i_1_n_0 ),
        .Q(p_0_in33_in),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \ERR_FRAME_SYNC_ALL[0].errframesync[0]_i_1 
       (.I0(pkt_rdvld_reg),
        .I1(\ERR_FRAME_SYNC_ALL[0].errframesync[0]_i_3_n_0 ),
        .I2(\ERR_FRAME_SYNC[0].fs_hunt_reg_n_0_[0] ),
        .I3(p_28_out),
        .I4(\ERR_FRAME_SYNC[0].fe_hunt_reg_n_0_[0] ),
        .I5(\ERR_FRAME_SYNC_ECCERR[0].ecc_errframesync_reg[0] ),
        .O(p_7_out));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \ERR_FRAME_SYNC_ALL[0].errframesync[0]_i_3 
       (.I0(mem_vc[1]),
        .I1(mem_vc[0]),
        .I2(\FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ),
        .O(\ERR_FRAME_SYNC_ALL[0].errframesync[0]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \ERR_FRAME_SYNC_ALL[0].errframesync[0]_i_4 
       (.I0(mem_vc[1]),
        .I1(mem_vc[0]),
        .I2(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .O(p_28_out));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \ERR_FRAME_SYNC_ALL[1].errframesync[1]_i_1 
       (.I0(pkt_rdvld_reg_0),
        .I1(\ERR_FRAME_SYNC_ALL[1].errframesync[1]_i_3_n_0 ),
        .I2(p_0_in31_in),
        .I3(p_26_out),
        .I4(p_1_in67_in),
        .I5(p_1_in4_in),
        .O(p_6_out));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \ERR_FRAME_SYNC_ALL[1].errframesync[1]_i_3 
       (.I0(mem_vc[1]),
        .I1(mem_vc[0]),
        .I2(\FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ),
        .O(\ERR_FRAME_SYNC_ALL[1].errframesync[1]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \ERR_FRAME_SYNC_ALL[1].errframesync[1]_i_4 
       (.I0(mem_vc[1]),
        .I1(mem_vc[0]),
        .I2(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .O(p_26_out));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \ERR_FRAME_SYNC_ALL[2].errframesync[2]_i_1 
       (.I0(pkt_rdvld_reg_1),
        .I1(\ERR_FRAME_SYNC_ALL[2].errframesync[2]_i_3_n_0 ),
        .I2(p_0_in32_in),
        .I3(p_24_out),
        .I4(p_3_in68_in),
        .I5(p_1_in1_in),
        .O(p_3_out));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \ERR_FRAME_SYNC_ALL[2].errframesync[2]_i_3 
       (.I0(mem_vc[0]),
        .I1(mem_vc[1]),
        .I2(\FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ),
        .O(\ERR_FRAME_SYNC_ALL[2].errframesync[2]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \ERR_FRAME_SYNC_ALL[2].errframesync[2]_i_4 
       (.I0(mem_vc[0]),
        .I1(mem_vc[1]),
        .I2(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .O(p_24_out));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \ERR_FRAME_SYNC_ALL[3].errframesync[3]_i_1 
       (.I0(pkt_rdvld_reg_2),
        .I1(\ERR_FRAME_SYNC_ALL[3].errframesync[3]_i_3_n_0 ),
        .I2(p_0_in33_in),
        .I3(p_22_out),
        .I4(\ERR_FRAME_SYNC[3].fe_hunt_reg_n_0_[3] ),
        .I5(p_1_in),
        .O(p_0_out));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \ERR_FRAME_SYNC_ALL[3].errframesync[3]_i_3 
       (.I0(mem_vc[1]),
        .I1(mem_vc[0]),
        .I2(\FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ),
        .O(\ERR_FRAME_SYNC_ALL[3].errframesync[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \ERR_FRAME_SYNC_ALL[3].errframesync[3]_i_4 
       (.I0(mem_vc[1]),
        .I1(mem_vc[0]),
        .I2(\ERR_FRAME_SYNC[0].fs_hunt[0]_i_2_n_0 ),
        .O(p_22_out));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_2 
       (.I0(\FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .I3(\ERR_FRAME_SYNC[0].fs_hunt_reg_n_0_[0] ),
        .O(p_21_out));
  LUT5 #(
    .INIT(32'hFFDFFFFF)) 
    \FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3 
       (.I0(p_0_in),
        .I1(end_mem_wr2_reg_0[0]),
        .I2(mem_wen_i),
        .I3(end_mem_wr2_reg_0[1]),
        .I4(end_mem_wr2_reg_0[2]),
        .O(\FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ));
  FDRE \FRAME_RCVD_GEN[0].frame_rcvd_i_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_21_out),
        .Q(\FRAME_RCVD_GEN[0].frame_rcvd_i_reg ),
        .R(\syncstages_ff_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \FRAME_RCVD_GEN[1].frame_rcvd_i[1]_i_1 
       (.I0(\FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .I3(p_0_in31_in),
        .O(p_17_out));
  FDRE \FRAME_RCVD_GEN[1].frame_rcvd_i_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_17_out),
        .Q(\FRAME_RCVD_GEN[1].frame_rcvd_i_reg ),
        .R(\syncstages_ff_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \FRAME_RCVD_GEN[2].frame_rcvd_i[2]_i_1 
       (.I0(\FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .I3(p_0_in32_in),
        .O(p_13_out));
  FDRE \FRAME_RCVD_GEN[2].frame_rcvd_i_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_13_out),
        .Q(\FRAME_RCVD_GEN[2].frame_rcvd_i_reg ),
        .R(\syncstages_ff_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    \FRAME_RCVD_GEN[3].frame_rcvd_i[3]_i_1 
       (.I0(\FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_3_n_0 ),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .I3(p_0_in33_in),
        .O(p_9_out));
  FDRE \FRAME_RCVD_GEN[3].frame_rcvd_i_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_9_out),
        .Q(\FRAME_RCVD_GEN[3].frame_rcvd_i_reg ),
        .R(\syncstages_ff_reg[1] ));
  LUT5 #(
    .INIT(32'h44455555)) 
    \FSM_sequential_cur_state[0]_i_4 
       (.I0(\FSM_sequential_cur_state_reg[0]_0 ),
        .I1(wc_gt_pload),
        .I2(\diwc_corrected_reg[23] [5]),
        .I3(\diwc_corrected_reg[23] [4]),
        .I4(data_done),
        .O(\FSM_sequential_cur_state_reg[0] ));
  LUT3 #(
    .INIT(8'h80)) 
    \LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_2 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_0 ),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(pkt_valid),
        .O(lbuf_wr_byte_cnt0));
  LUT1 #(
    .INIT(2'h1)) 
    \LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_4 
       (.I0(out[0]),
        .O(\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_4_n_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[10] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_4 ),
        .Q(out[7]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_7 ),
        .Q(out[8]),
        .R(\syncstages_ff_reg[1]_0 ));
  CARRY4 \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1 
       (.CI(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_0 ),
        .CO({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_0 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_1 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_2 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_4 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_5 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_6 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_7 }),
        .S(out[11:8]));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[12] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_6 ),
        .Q(out[9]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[13] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_5 ),
        .Q(out[10]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[14] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_4 ),
        .Q(out[11]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_7 ),
        .Q(out[12]),
        .R(\syncstages_ff_reg[1]_0 ));
  CARRY4 \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1 
       (.CI(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[11]_i_1_n_0 ),
        .CO({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_0 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_1 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_2 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_4 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_5 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_6 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_7 }),
        .S({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [18:16],out[12]}));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[16] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_6 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [16]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[17] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_5 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [17]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[18] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_4 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [18]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_7 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [19]),
        .R(\syncstages_ff_reg[1]_0 ));
  CARRY4 \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1 
       (.CI(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_i_1_n_0 ),
        .CO({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_0 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_1 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_2 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_4 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_5 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_6 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_7 }),
        .S(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [22:19]));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[20] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_6 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [20]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[21] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_5 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [21]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[22] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_4 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [22]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_7 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [23]),
        .R(\syncstages_ff_reg[1]_0 ));
  CARRY4 \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1 
       (.CI(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[19]_i_1_n_0 ),
        .CO({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_0 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_1 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_2 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_4 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_5 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_6 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_7 }),
        .S(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [26:23]));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[24] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_6 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [24]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[25] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_5 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [25]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[26] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_4 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [26]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_7 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [27]),
        .R(\syncstages_ff_reg[1]_0 ));
  CARRY4 \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1 
       (.CI(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[23]_i_1_n_0 ),
        .CO({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_0 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_1 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_2 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_4 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_5 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_6 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_7 }),
        .S(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [30:27]));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[28] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_6 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [28]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[29] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_5 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [29]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[30] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_4 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [30]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[31] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[31]_i_1_n_7 ),
        .Q(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [31]),
        .R(\syncstages_ff_reg[1]_0 ));
  CARRY4 \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[31]_i_1 
       (.CI(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[27]_i_1_n_0 ),
        .CO(\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[31]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[31]_i_1_O_UNCONNECTED [3:1],\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[31]_i_1_n_7 }),
        .S({1'b0,1'b0,1'b0,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [31]}));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_7 ),
        .Q(out[0]),
        .R(\syncstages_ff_reg[1]_0 ));
  CARRY4 \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3 
       (.CI(1'b0),
        .CO({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_0 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_1 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_2 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_4 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_5 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_6 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_7 }),
        .S({out[3:1],\LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_4_n_0 }));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[4] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_6 ),
        .Q(out[1]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[5] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_5 ),
        .Q(out[2]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[6] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_4 ),
        .Q(out[3]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_7 ),
        .Q(out[4]),
        .R(\syncstages_ff_reg[1]_0 ));
  CARRY4 \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1 
       (.CI(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_i_3_n_0 ),
        .CO({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_0 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_1 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_2 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_4 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_5 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_6 ,\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_7 }),
        .S(out[7:4]));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[8] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_6 ),
        .Q(out[5]),
        .R(\syncstages_ff_reg[1]_0 ));
  FDRE \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[9] 
       (.C(m_axis_aclk),
        .CE(lbuf_wr_byte_cnt0),
        .D(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[7]_i_1_n_5 ),
        .Q(out[6]),
        .R(\syncstages_ff_reg[1]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT4 #(
    .INIT(16'hDFFF)) 
    \LINE_BUF_WR_64.mem_data_l32[31]_i_5 
       (.I0(data_wip_reg),
        .I1(short_pkt_reg_0),
        .I2(pkt_valid),
        .I3(m_axis_aresetn),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[0]),
        .Q(mem_data_l32_d[0]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[10] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[10]),
        .Q(mem_data_l32_d[10]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[11] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[11]),
        .Q(mem_data_l32_d[11]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[12] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[12]),
        .Q(mem_data_l32_d[12]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[13] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[13]),
        .Q(mem_data_l32_d[13]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[14] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[14]),
        .Q(mem_data_l32_d[14]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[15] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[15]),
        .Q(mem_data_l32_d[15]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[16] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[16]),
        .Q(mem_data_l32_d[16]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[17] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[17]),
        .Q(mem_data_l32_d[17]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[18] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[18]),
        .Q(mem_data_l32_d[18]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[19] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[19]),
        .Q(mem_data_l32_d[19]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[1]),
        .Q(mem_data_l32_d[1]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[20] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[20]),
        .Q(mem_data_l32_d[20]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[21] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[21]),
        .Q(mem_data_l32_d[21]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[22] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[22]),
        .Q(mem_data_l32_d[22]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[23] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[23]),
        .Q(mem_data_l32_d[23]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[24] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[24]),
        .Q(mem_data_l32_d[24]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[25] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[25]),
        .Q(mem_data_l32_d[25]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[26] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[26]),
        .Q(mem_data_l32_d[26]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[27] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[27]),
        .Q(mem_data_l32_d[27]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[28] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[28]),
        .Q(mem_data_l32_d[28]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[29] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[29]),
        .Q(mem_data_l32_d[29]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[2]),
        .Q(mem_data_l32_d[2]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[30] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[30]),
        .Q(mem_data_l32_d[30]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[31] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[31]),
        .Q(mem_data_l32_d[31]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[3]),
        .Q(mem_data_l32_d[3]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[4]),
        .Q(mem_data_l32_d[4]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[5]),
        .Q(mem_data_l32_d[5]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[6] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[6]),
        .Q(mem_data_l32_d[6]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[7] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[7]),
        .Q(mem_data_l32_d[7]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[8] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[8]),
        .Q(mem_data_l32_d[8]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_d_reg[9] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_data_l32[9]),
        .Q(mem_data_l32_d[9]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[0] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [0]),
        .Q(mem_data_l32[0]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[10] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [10]),
        .Q(mem_data_l32[10]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[11] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [11]),
        .Q(mem_data_l32[11]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[12] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [12]),
        .Q(mem_data_l32[12]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[13] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [13]),
        .Q(mem_data_l32[13]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[14] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [14]),
        .Q(mem_data_l32[14]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[15] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [15]),
        .Q(mem_data_l32[15]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[16] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [16]),
        .Q(mem_data_l32[16]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[17] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [17]),
        .Q(mem_data_l32[17]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[18] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [18]),
        .Q(mem_data_l32[18]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[19] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [19]),
        .Q(mem_data_l32[19]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[1] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [1]),
        .Q(mem_data_l32[1]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[20] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [20]),
        .Q(mem_data_l32[20]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[21] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [21]),
        .Q(mem_data_l32[21]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[22] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [22]),
        .Q(mem_data_l32[22]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[23] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [23]),
        .Q(mem_data_l32[23]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[24] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [24]),
        .Q(mem_data_l32[24]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[25] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [25]),
        .Q(mem_data_l32[25]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[26] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [26]),
        .Q(mem_data_l32[26]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[27] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [27]),
        .Q(mem_data_l32[27]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[28] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [28]),
        .Q(mem_data_l32[28]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[29] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [29]),
        .Q(mem_data_l32[29]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[2] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [2]),
        .Q(mem_data_l32[2]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[30] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [30]),
        .Q(mem_data_l32[30]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[31] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [31]),
        .Q(mem_data_l32[31]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[3] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [3]),
        .Q(mem_data_l32[3]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[4] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [4]),
        .Q(mem_data_l32[4]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[5] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [5]),
        .Q(mem_data_l32[5]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[6] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [6]),
        .Q(mem_data_l32[6]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[7] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [7]),
        .Q(mem_data_l32[7]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[8] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [8]),
        .Q(mem_data_l32[8]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_data_l32_reg[9] 
       (.C(m_axis_aclk),
        .CE(pkt_rdvld_reg_4),
        .D(\gpr1.dout_i_reg[7] [9]),
        .Q(mem_data_l32[9]),
        .R(srst));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[0]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [0]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[0]),
        .I5(mem_data_l32[0]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[10]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [10]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[10]),
        .I5(mem_data_l32[10]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[11]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [11]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[11]),
        .I5(mem_data_l32[11]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[12]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [12]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[12]),
        .I5(mem_data_l32[12]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[13]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [13]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[13]),
        .I5(mem_data_l32[13]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[14]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [14]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[14]),
        .I5(mem_data_l32[14]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF077F088F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[15]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [15]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32[15]),
        .I5(mem_data_l32_d[15]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[16]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [16]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[16]),
        .I5(mem_data_l32[16]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[17]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [17]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[17]),
        .I5(mem_data_l32[17]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[17]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[18]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [18]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[18]),
        .I5(mem_data_l32[18]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[18]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[19]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [19]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[19]),
        .I5(mem_data_l32[19]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[19]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[1]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [1]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[1]),
        .I5(mem_data_l32[1]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[20]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [20]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[20]),
        .I5(mem_data_l32[20]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[20]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[21]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [21]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[21]),
        .I5(mem_data_l32[21]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[21]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[22]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [22]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[22]),
        .I5(mem_data_l32[22]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[22]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[23]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [23]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[23]),
        .I5(mem_data_l32[23]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[23]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0000EA2A)) 
    \LINE_BUF_WR_64.mem_wdata_i[24]_i_1 
       (.I0(mem_data_l32_d[24]),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(pkt_valid),
        .I3(mem_data_l32[24]),
        .I4(short_pkt_reg_0),
        .O(\LINE_BUF_WR_64.mem_wdata_i[24]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0000EA2A)) 
    \LINE_BUF_WR_64.mem_wdata_i[25]_i_1 
       (.I0(mem_data_l32_d[25]),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(pkt_valid),
        .I3(mem_data_l32[25]),
        .I4(short_pkt_reg_0),
        .O(\LINE_BUF_WR_64.mem_wdata_i[25]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0000EA2A)) 
    \LINE_BUF_WR_64.mem_wdata_i[26]_i_1 
       (.I0(mem_data_l32_d[26]),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(pkt_valid),
        .I3(mem_data_l32[26]),
        .I4(short_pkt_reg_0),
        .O(\LINE_BUF_WR_64.mem_wdata_i[26]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0000EA2A)) 
    \LINE_BUF_WR_64.mem_wdata_i[27]_i_1 
       (.I0(mem_data_l32_d[27]),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(pkt_valid),
        .I3(mem_data_l32[27]),
        .I4(short_pkt_reg_0),
        .O(\LINE_BUF_WR_64.mem_wdata_i[27]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0000EA2A)) 
    \LINE_BUF_WR_64.mem_wdata_i[28]_i_1 
       (.I0(mem_data_l32_d[28]),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(pkt_valid),
        .I3(mem_data_l32[28]),
        .I4(short_pkt_reg_0),
        .O(\LINE_BUF_WR_64.mem_wdata_i[28]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0000EA2A)) 
    \LINE_BUF_WR_64.mem_wdata_i[29]_i_1 
       (.I0(mem_data_l32_d[29]),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(pkt_valid),
        .I3(mem_data_l32[29]),
        .I4(short_pkt_reg_0),
        .O(\LINE_BUF_WR_64.mem_wdata_i[29]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[2]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [2]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[2]),
        .I5(mem_data_l32[2]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0000EA2A)) 
    \LINE_BUF_WR_64.mem_wdata_i[30]_i_1 
       (.I0(mem_data_l32_d[30]),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(pkt_valid),
        .I3(mem_data_l32[30]),
        .I4(short_pkt_reg_0),
        .O(\LINE_BUF_WR_64.mem_wdata_i[30]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFAABAAA)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_1 
       (.I0(short_pkt_reg_0),
        .I1(data_wip_reg),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_0 ),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I4(pkt_valid),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_10 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [23]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [22]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_10_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_11 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [21]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [20]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_11_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_12 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [19]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [18]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_12_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_13 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [17]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [16]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_13_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_19 
       (.I0(out[12]),
        .I1(\diwc_corrected_reg[23] [23]),
        .I2(out[11]),
        .I3(\diwc_corrected_reg[23] [22]),
        .O(\LINE_BUF_WR_64.mem_wen_i_reg_0 [3]));
  LUT5 #(
    .INIT(32'h0000EA2A)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_2 
       (.I0(mem_data_l32_d[31]),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(pkt_valid),
        .I3(mem_data_l32[31]),
        .I4(short_pkt_reg_0),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_20 
       (.I0(out[10]),
        .I1(\diwc_corrected_reg[23] [21]),
        .I2(out[9]),
        .I3(\diwc_corrected_reg[23] [20]),
        .O(\LINE_BUF_WR_64.mem_wen_i_reg_0 [2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_21 
       (.I0(out[8]),
        .I1(\diwc_corrected_reg[23] [19]),
        .I2(out[7]),
        .I3(\diwc_corrected_reg[23] [18]),
        .O(\LINE_BUF_WR_64.mem_wen_i_reg_0 [1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_22 
       (.I0(out[6]),
        .I1(\diwc_corrected_reg[23] [17]),
        .I2(out[5]),
        .I3(\diwc_corrected_reg[23] [16]),
        .O(\LINE_BUF_WR_64.mem_wen_i_reg_0 [0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_27 
       (.I0(out[4]),
        .I1(\diwc_corrected_reg[23] [15]),
        .I2(out[3]),
        .I3(\diwc_corrected_reg[23] [14]),
        .O(S[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_28 
       (.I0(out[2]),
        .I1(\diwc_corrected_reg[23] [13]),
        .I2(out[1]),
        .I3(\diwc_corrected_reg[23] [12]),
        .O(S[0]));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_5 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [31]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [30]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_6 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [29]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [28]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_7 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [27]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [26]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_8 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [25]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg [24]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[3]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [3]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[3]),
        .I5(mem_data_l32[3]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[4]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [4]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[4]),
        .I5(mem_data_l32[4]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[5]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [5]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[5]),
        .I5(mem_data_l32[5]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFE00FE000000FE00)) 
    \LINE_BUF_WR_64.mem_wdata_i[64]_i_1 
       (.I0(crc_trig_d2),
        .I1(\LINE_BUF_WR_64.mem_wdata_i[67]_i_2_n_0 ),
        .I2(\data_type_reg_reg[2]_0 ),
        .I3(m_axis_aresetn),
        .I4(end_mem_wr2),
        .I5(core_men_r2c),
        .O(\LINE_BUF_WR_64.mem_wdata_i[64]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h3FBB3FBB3FBB00AA)) 
    \LINE_BUF_WR_64.mem_wdata_i[65]_i_1 
       (.I0(end_mem_wr2),
        .I1(end_mem_wr1),
        .I2(wc_gt_pload),
        .I3(core_men_r2c),
        .I4(crc_trig_d2),
        .I5(\data_type_reg_reg[2] ),
        .O(\LINE_BUF_WR_64.mem_wdata_i[65]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT5 #(
    .INIT(32'h8F8FFFCF)) 
    \LINE_BUF_WR_64.mem_wdata_i[66]_i_3 
       (.I0(wc_gt_pload),
        .I1(end_mem_wr1),
        .I2(m_axis_aresetn),
        .I3(end_mem_wr2),
        .I4(core_men_r2c),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[66]_0 ));
  LUT6 #(
    .INIT(64'h00000000D0DD0000)) 
    \LINE_BUF_WR_64.mem_wdata_i[67]_i_1 
       (.I0(short_pkt_reg_1),
        .I1(crc_trig_d2),
        .I2(core_men_r2c),
        .I3(end_mem_wr2),
        .I4(m_axis_aresetn),
        .I5(\LINE_BUF_WR_64.mem_wdata_i[67]_i_2_n_0 ),
        .O(\LINE_BUF_WR_64.mem_wdata_i[67]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    \LINE_BUF_WR_64.mem_wdata_i[67]_i_2 
       (.I0(end_mem_wr1),
        .I1(wc_gt_pload),
        .I2(core_men_r2c),
        .O(\LINE_BUF_WR_64.mem_wdata_i[67]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[6]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [6]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[6]),
        .I5(mem_data_l32[6]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[7]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [7]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[7]),
        .I5(mem_data_l32[7]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[8]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [8]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[8]),
        .I5(mem_data_l32[8]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0FFF088F077F000)) 
    \LINE_BUF_WR_64.mem_wdata_i[9]_i_1 
       (.I0(pkt_valid),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(\diwc_corrected_reg[23] [9]),
        .I3(short_pkt_reg_0),
        .I4(mem_data_l32_d[9]),
        .I5(mem_data_l32[9]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[9]_i_1_n_0 ));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[0] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[0]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[0] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[10] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[10]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[10] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[11] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[11]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[11] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[12] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[12]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[12] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[13] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[13]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[13] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[14] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[14]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[14] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[15] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[15]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[15] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[16] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[16]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[16] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[17] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[17]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[17] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[18] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[18]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[18] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[19] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[19]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[19] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[1] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[1]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[1] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[20] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[20]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[20] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[21] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[21]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[21] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[22] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[22]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[22] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[23] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[23]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[23] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[24] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[24]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[24] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[25] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[25]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[25] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[26] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[26]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[26] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[27] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[27]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[27] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[28] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[28]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[28] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[29] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[29]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[29] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[2] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[2]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[2] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[30] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[30]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[30] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[31] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[31]_i_2_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[31] ),
        .R(srst));
  CARRY4 \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3 
       (.CI(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_0 ),
        .CO({\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_0 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_1 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_2 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_O_UNCONNECTED [3:0]),
        .S({\LINE_BUF_WR_64.mem_wdata_i[31]_i_5_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_6_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_7_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_8_n_0 }));
  CARRY4 \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4 
       (.CI(CO),
        .CO({\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_0 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_1 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_2 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_4_O_UNCONNECTED [3:0]),
        .S({\LINE_BUF_WR_64.mem_wdata_i[31]_i_10_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_11_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_12_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_13_n_0 }));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[32] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [0]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[32] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[33] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [1]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[33] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[34] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [2]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[34] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[35] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [3]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[35] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[36] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [4]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[36] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[37] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [5]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[37] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[38] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [6]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[38] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[39] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [7]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[39] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[3] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[3]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[3] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[40] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [8]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[40] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[41] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [9]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[41] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[42] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [10]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[42] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[43] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [11]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[43] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[44] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [12]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[44] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[45] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [13]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[45] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[46] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [14]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[46] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[47] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [15]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[47] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[48] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [16]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[48] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[49] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [17]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[49] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[4] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[4]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[4] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[50] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [18]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[50] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[51] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [19]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[51] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[52] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [20]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[52] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[53] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [21]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[53] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[54] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [22]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[54] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[55] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [23]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[55] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[56] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [24]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[56] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[57] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [25]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[57] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[58] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [26]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[58] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[59] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [27]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[59] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[5] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[5]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[5] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[60] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [28]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[60] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[61] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [29]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[61] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[62] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [30]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[62] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[63] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[7] [31]),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[63] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[64] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i[64]_i_1_n_0 ),
        .Q(p_0_in),
        .R(1'b0));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[65] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i[65]_i_1_n_0 ),
        .Q(end_mem_wr2_reg_0[0]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[66] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(short_pkt_reg),
        .Q(end_mem_wr2_reg_0[1]),
        .R(1'b0));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[67] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i[67]_i_1_n_0 ),
        .Q(end_mem_wr2_reg_0[2]),
        .R(1'b0));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[6] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[6]_i_1_n_0 ),
        .Q(mem_vc[0]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[7] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[7]_i_1_n_0 ),
        .Q(mem_vc[1]),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[8] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[8]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[8] ),
        .R(srst));
  FDRE \LINE_BUF_WR_64.mem_wdata_i_reg[9] 
       (.C(m_axis_aclk),
        .CE(\LINE_BUF_WR_64.mem_wdata_i[31]_i_1_n_0 ),
        .D(\LINE_BUF_WR_64.mem_wdata_i[9]_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[9] ),
        .R(srst));
  LUT6 #(
    .INIT(64'hFFFFFFFF80CC8080)) 
    \LINE_BUF_WR_64.mem_wen_i_i_1 
       (.I0(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_0 ),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I2(pkt_valid),
        .I3(data_wip_reg),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_0 ),
        .I5(\LINE_BUF_WR_64.mem_wen_i_i_2_n_0 ),
        .O(\LINE_BUF_WR_64.mem_wen_i_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF232)) 
    \LINE_BUF_WR_64.mem_wen_i_i_2 
       (.I0(end_mem_wr2),
        .I1(core_men_r2c),
        .I2(end_mem_wr1),
        .I3(wc_gt_pload),
        .I4(short_pkt_reg_0),
        .I5(crc_trig_d2),
        .O(\LINE_BUF_WR_64.mem_wen_i_i_2_n_0 ));
  FDRE \LINE_BUF_WR_64.mem_wen_i_reg 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wen_i_i_1_n_0 ),
        .Q(mem_wen_i),
        .R(srst));
  LUT6 #(
    .INIT(64'h0000000088880888)) 
    \LINE_BUF_WR_64.str_fwd_i_1 
       (.I0(\LINE_BUF_WR_64.str_fwd_i_2_n_0 ),
        .I1(m_axis_aresetn),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_0 ),
        .I4(data_wip_reg),
        .I5(\LINE_BUF_WR_64.mem_wen_i_i_2_n_0 ),
        .O(\LINE_BUF_WR_64.str_fwd_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h3F80)) 
    \LINE_BUF_WR_64.str_fwd_i_2 
       (.I0(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_3_n_0 ),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_0 ),
        .I2(pkt_valid),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .O(\LINE_BUF_WR_64.str_fwd_i_2_n_0 ));
  FDRE \LINE_BUF_WR_64.str_fwd_reg 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.str_fwd_i_1_n_0 ),
        .Q(\LINE_BUF_WR_64.mem_wdata_i_reg[24]_0 ),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNTS[0].lp_count_en[0]_i_1 
       (.I0(\LP_CNTS[0].lp_header_reg_n_0_[0] ),
        .I1(\LP_CNTS[0].lp_data_reg_n_0_[0] ),
        .O(p_54_out));
  FDRE \LP_CNTS[0].lp_count_en_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_54_out),
        .Q(lp_count_en[0]),
        .R(srst));
  LUT3 #(
    .INIT(8'h01)) 
    \LP_CNTS[0].lp_data[0]_i_2 
       (.I0(end_mem_wr2_reg_0[0]),
        .I1(end_mem_wr2_reg_0[1]),
        .I2(end_mem_wr2_reg_0[2]),
        .O(\LP_CNTS[0].lp_data[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNTS[0].lp_data[0]_i_3 
       (.I0(mem_wen_i),
        .I1(\LP_CNTS[0].lp_header_reg_n_0_[0] ),
        .O(p_55_out));
  FDRE \LP_CNTS[0].lp_data_reg[0] 
       (.C(m_axis_aclk),
        .CE(\LP_CNTS[0].lp_data[0]_i_2_n_0 ),
        .D(p_55_out),
        .Q(\LP_CNTS[0].lp_data_reg_n_0_[0] ),
        .R(lp_data));
  LUT5 #(
    .INIT(32'h555D000C)) 
    \LP_CNTS[0].lp_header[0]_i_1 
       (.I0(\LP_CNTS[0].lp_header[0]_i_2_n_0 ),
        .I1(\LP_CNTS[0].lp_header[0]_i_3_n_0 ),
        .I2(mem_vc[0]),
        .I3(mem_vc[1]),
        .I4(\LP_CNTS[0].lp_header_reg_n_0_[0] ),
        .O(\LP_CNTS[0].lp_header[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \LP_CNTS[0].lp_header[0]_i_2 
       (.I0(p_0_in34_in),
        .I1(\LP_CNTS[0].lp_data_reg_n_0_[0] ),
        .I2(p_0_in40_in),
        .I3(p_0_in46_in),
        .O(\LP_CNTS[0].lp_header[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    \LP_CNTS[0].lp_header[0]_i_3 
       (.I0(\LP_CNTS[0].lp_header[0]_i_4_n_0 ),
        .I1(end_mem_wr2_reg_0[1]),
        .I2(mem_wen_i),
        .I3(end_mem_wr2_reg_0[2]),
        .I4(end_mem_wr2_reg_0[0]),
        .I5(p_0_in),
        .O(\LP_CNTS[0].lp_header[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFEFFFFFFFFFF)) 
    \LP_CNTS[0].lp_header[0]_i_4 
       (.I0(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[3] ),
        .I1(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[5] ),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[0] ),
        .I3(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[4] ),
        .I4(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[2] ),
        .I5(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[1] ),
        .O(\LP_CNTS[0].lp_header[0]_i_4_n_0 ));
  FDRE \LP_CNTS[0].lp_header_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LP_CNTS[0].lp_header[0]_i_1_n_0 ),
        .Q(\LP_CNTS[0].lp_header_reg_n_0_[0] ),
        .R(lp_data));
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNTS[1].lp_count_en[1]_i_1 
       (.I0(p_1_in47_in),
        .I1(p_0_in46_in),
        .O(p_48_out));
  FDRE \LP_CNTS[1].lp_count_en_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_48_out),
        .Q(lp_count_en[1]),
        .R(srst));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNTS[1].lp_data[1]_i_1 
       (.I0(mem_wen_i),
        .I1(p_1_in47_in),
        .O(p_49_out));
  FDRE \LP_CNTS[1].lp_data_reg[1] 
       (.C(m_axis_aclk),
        .CE(\LP_CNTS[0].lp_data[0]_i_2_n_0 ),
        .D(p_49_out),
        .Q(p_0_in46_in),
        .R(lp_data));
  LUT5 #(
    .INIT(32'h5D550C00)) 
    \LP_CNTS[1].lp_header[1]_i_1 
       (.I0(\LP_CNTS[0].lp_header[0]_i_2_n_0 ),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .I3(\LP_CNTS[0].lp_header[0]_i_3_n_0 ),
        .I4(p_1_in47_in),
        .O(\LP_CNTS[1].lp_header[1]_i_1_n_0 ));
  FDRE \LP_CNTS[1].lp_header_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LP_CNTS[1].lp_header[1]_i_1_n_0 ),
        .Q(p_1_in47_in),
        .R(lp_data));
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNTS[2].lp_count_en[2]_i_1 
       (.I0(p_1_in41_in),
        .I1(p_0_in40_in),
        .O(p_42_out));
  FDRE \LP_CNTS[2].lp_count_en_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_42_out),
        .Q(lp_count_en[2]),
        .R(srst));
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNTS[2].lp_data[2]_i_1 
       (.I0(mem_wen_i),
        .I1(p_1_in41_in),
        .O(p_43_out));
  FDRE \LP_CNTS[2].lp_data_reg[2] 
       (.C(m_axis_aclk),
        .CE(\LP_CNTS[0].lp_data[0]_i_2_n_0 ),
        .D(p_43_out),
        .Q(p_0_in40_in),
        .R(lp_data));
  LUT5 #(
    .INIT(32'h5D550C00)) 
    \LP_CNTS[2].lp_header[2]_i_1 
       (.I0(\LP_CNTS[0].lp_header[0]_i_2_n_0 ),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .I3(\LP_CNTS[0].lp_header[0]_i_3_n_0 ),
        .I4(p_1_in41_in),
        .O(\LP_CNTS[2].lp_header[2]_i_1_n_0 ));
  FDRE \LP_CNTS[2].lp_header_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LP_CNTS[2].lp_header[2]_i_1_n_0 ),
        .Q(p_1_in41_in),
        .R(lp_data));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNTS[3].lp_count_en[3]_i_1 
       (.I0(p_1_in35_in),
        .I1(p_0_in34_in),
        .O(p_36_out));
  FDRE \LP_CNTS[3].lp_count_en_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_36_out),
        .Q(lp_count_en[3]),
        .R(srst));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNTS[3].lp_data[3]_i_1 
       (.I0(mem_wen_i),
        .I1(p_1_in35_in),
        .O(p_37_out));
  FDRE \LP_CNTS[3].lp_data_reg[3] 
       (.C(m_axis_aclk),
        .CE(\LP_CNTS[0].lp_data[0]_i_2_n_0 ),
        .D(p_37_out),
        .Q(p_0_in34_in),
        .R(lp_data));
  LUT5 #(
    .INIT(32'hD555C000)) 
    \LP_CNTS[3].lp_header[3]_i_1 
       (.I0(\LP_CNTS[0].lp_header[0]_i_2_n_0 ),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .I3(\LP_CNTS[0].lp_header[0]_i_3_n_0 ),
        .I4(p_1_in35_in),
        .O(\LP_CNTS[3].lp_header[3]_i_1_n_0 ));
  FDRE \LP_CNTS[3].lp_header_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LP_CNTS[3].lp_header[3]_i_1_n_0 ),
        .Q(p_1_in35_in),
        .R(lp_data));
  LUT3 #(
    .INIT(8'h0D)) 
    core_men_f_i_1
       (.I0(core_men_r2c),
        .I1(core_men_f),
        .I2(\cur_byte_cnt[15]_i_1_n_0 ),
        .O(core_men_f_i_1_n_0));
  FDRE core_men_f_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(core_men_f_i_1_n_0),
        .Q(core_men_f),
        .R(1'b0));
  FDRE \crc_blk_sel_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\byte_cnt_reg_reg[0]_1 ),
        .Q(crc_blk_sel[0]),
        .R(srst));
  FDRE \crc_blk_sel_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\byte_cnt_reg_reg[1]_0 ),
        .Q(crc_blk_sel[1]),
        .R(srst));
  FDRE \crc_blk_sel_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\byte_cnt_reg_reg[0]_0 ),
        .Q(crc_blk_sel[2]),
        .R(srst));
  FDRE \crc_blk_sel_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\byte_cnt_reg_reg[1] ),
        .Q(crc_blk_sel[3]),
        .R(srst));
  FDRE \crc_p_strb_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\byte_cnt_reg_reg[0] [0]),
        .Q(crc_p_strb[0]),
        .R(srst));
  FDRE \crc_p_strb_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\byte_cnt_reg_reg[0] [1]),
        .Q(crc_p_strb[1]),
        .R(srst));
  FDRE \crc_p_value_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[37] [0]),
        .Q(crc_p_value[0]),
        .R(srst));
  FDRE \crc_p_value_reg[10] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[37] [10]),
        .Q(crc_p_value[10]),
        .R(srst));
  FDRE \crc_p_value_reg[11] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[37] [11]),
        .Q(crc_p_value[11]),
        .R(srst));
  FDRE \crc_p_value_reg[12] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[37] [12]),
        .Q(crc_p_value[12]),
        .R(srst));
  FDRE \crc_p_value_reg[13] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[37] [13]),
        .Q(crc_p_value[13]),
        .R(srst));
  FDRE \crc_p_value_reg[14] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[37] [14]),
        .Q(crc_p_value[14]),
        .R(srst));
  FDRE \crc_p_value_reg[15] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[37] [15]),
        .Q(crc_p_value[15]),
        .R(srst));
  FDRE \crc_p_value_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[37] [1]),
        .Q(crc_p_value[1]),
        .R(srst));
  FDRE \crc_p_value_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[37] [2]),
        .Q(crc_p_value[2]),
        .R(srst));
  FDRE \crc_p_value_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[37] [3]),
        .Q(crc_p_value[3]),
        .R(srst));
  FDRE \crc_p_value_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[37] [4]),
        .Q(crc_p_value[4]),
        .R(srst));
  FDRE \crc_p_value_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[37] [5]),
        .Q(crc_p_value[5]),
        .R(srst));
  FDRE \crc_p_value_reg[6] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[37] [6]),
        .Q(crc_p_value[6]),
        .R(srst));
  FDRE \crc_p_value_reg[7] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[37] [7]),
        .Q(crc_p_value[7]),
        .R(srst));
  FDRE \crc_p_value_reg[8] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[37] [8]),
        .Q(crc_p_value[8]),
        .R(srst));
  FDRE \crc_p_value_reg[9] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\gpr1.dout_i_reg[37] [9]),
        .Q(crc_p_value[9]),
        .R(srst));
  FDRE crc_partial_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(crc_partial0),
        .Q(crc_partial),
        .R(srst));
  FDRE crc_trig_d1_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(crc_trig_d10),
        .Q(crc_trig_d1),
        .R(srst));
  FDRE crc_trig_d2_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(crc_trig_d1),
        .Q(crc_trig_d2),
        .R(srst));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    crc_trig_d3_i_1
       (.I0(crc_trig_d2),
        .I1(m_axis_aresetn),
        .I2(crc_trig_d3),
        .O(crc_trig_d3_i_1_n_0));
  FDRE crc_trig_d3_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(crc_trig_d3_i_1_n_0),
        .Q(crc_trig_d3),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[0]_i_1 
       (.I0(\cur_byte_cnt_reg[0]_0 ),
        .I1(phecc_start_d1),
        .I2(core_men_r2c),
        .I3(\byt_cnt_adj_reg[15] [0]),
        .O(p_2_in[0]));
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[10]_i_1 
       (.I0(\cur_byte_cnt_reg[15]_0 [9]),
        .I1(phecc_start_d1),
        .I2(core_men_r2c),
        .I3(\byt_cnt_adj_reg[15] [10]),
        .O(p_2_in[10]));
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[11]_i_1 
       (.I0(\cur_byte_cnt_reg[15]_0 [10]),
        .I1(phecc_start_d1),
        .I2(core_men_r2c),
        .I3(\byt_cnt_adj_reg[15] [11]),
        .O(p_2_in[11]));
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[12]_i_1 
       (.I0(\cur_byte_cnt_reg[15]_0 [11]),
        .I1(phecc_start_d1),
        .I2(core_men_r2c),
        .I3(\byt_cnt_adj_reg[15] [12]),
        .O(p_2_in[12]));
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[13]_i_1 
       (.I0(\cur_byte_cnt_reg[15]_0 [12]),
        .I1(phecc_start_d1),
        .I2(core_men_r2c),
        .I3(\byt_cnt_adj_reg[15] [13]),
        .O(p_2_in[13]));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[14]_i_1 
       (.I0(\cur_byte_cnt_reg[15]_0 [13]),
        .I1(phecc_start_d1),
        .I2(core_men_r2c),
        .I3(\byt_cnt_adj_reg[15] [14]),
        .O(p_2_in[14]));
  LUT2 #(
    .INIT(4'hB)) 
    \cur_byte_cnt[15]_i_1 
       (.I0(data_done),
        .I1(m_axis_aresetn),
        .O(\cur_byte_cnt[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFF8F)) 
    \cur_byte_cnt[15]_i_2 
       (.I0(fsm_wip_reg),
        .I1(pkt_valid),
        .I2(core_men_r2c),
        .I3(phecc_start_d1),
        .O(\cur_byte_cnt[15]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[15]_i_3 
       (.I0(\cur_byte_cnt_reg[15]_0 [14]),
        .I1(phecc_start_d1),
        .I2(core_men_r2c),
        .I3(\byt_cnt_adj_reg[15] [15]),
        .O(p_2_in[15]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEAA0000)) 
    \cur_byte_cnt[15]_i_4 
       (.I0(core_men_f),
        .I1(pkt_valid),
        .I2(pkt_valid_d1),
        .I3(pre_byt_cnt1_reg_n_0),
        .I4(\data_type_reg_reg[4] ),
        .I5(\cur_byte_cnt[15]_i_7_n_0 ),
        .O(data_done));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT4 #(
    .INIT(16'hABAA)) 
    \cur_byte_cnt[15]_i_7 
       (.I0(wc_gt_pload),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(mem_wen_i),
        .O(\cur_byte_cnt[15]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[1]_i_1 
       (.I0(\cur_byte_cnt_reg[15]_0 [0]),
        .I1(phecc_start_d1),
        .I2(core_men_r2c),
        .I3(\byt_cnt_adj_reg[15] [1]),
        .O(p_2_in[1]));
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[2]_i_1 
       (.I0(\cur_byte_cnt_reg[15]_0 [1]),
        .I1(phecc_start_d1),
        .I2(core_men_r2c),
        .I3(\byt_cnt_adj_reg[15] [2]),
        .O(p_2_in[2]));
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[3]_i_1 
       (.I0(\cur_byte_cnt_reg[15]_0 [2]),
        .I1(phecc_start_d1),
        .I2(core_men_r2c),
        .I3(\byt_cnt_adj_reg[15] [3]),
        .O(p_2_in[3]));
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[4]_i_1 
       (.I0(\cur_byte_cnt_reg[15]_0 [3]),
        .I1(phecc_start_d1),
        .I2(core_men_r2c),
        .I3(\byt_cnt_adj_reg[15] [4]),
        .O(p_2_in[4]));
  LUT1 #(
    .INIT(2'h1)) 
    \cur_byte_cnt[4]_i_3 
       (.I0(cur_byte_cnt[2]),
        .O(\cur_byte_cnt[4]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[5]_i_1 
       (.I0(\cur_byte_cnt_reg[15]_0 [4]),
        .I1(phecc_start_d1),
        .I2(core_men_r2c),
        .I3(\byt_cnt_adj_reg[15] [5]),
        .O(p_2_in[5]));
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[6]_i_1 
       (.I0(\cur_byte_cnt_reg[15]_0 [5]),
        .I1(phecc_start_d1),
        .I2(core_men_r2c),
        .I3(\byt_cnt_adj_reg[15] [6]),
        .O(p_2_in[6]));
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[7]_i_1 
       (.I0(\cur_byte_cnt_reg[15]_0 [6]),
        .I1(phecc_start_d1),
        .I2(core_men_r2c),
        .I3(\byt_cnt_adj_reg[15] [7]),
        .O(p_2_in[7]));
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[8]_i_1 
       (.I0(\cur_byte_cnt_reg[15]_0 [7]),
        .I1(phecc_start_d1),
        .I2(core_men_r2c),
        .I3(\byt_cnt_adj_reg[15] [8]),
        .O(p_2_in[8]));
  LUT4 #(
    .INIT(16'h2F20)) 
    \cur_byte_cnt[9]_i_1 
       (.I0(\cur_byte_cnt_reg[15]_0 [8]),
        .I1(phecc_start_d1),
        .I2(core_men_r2c),
        .I3(\byt_cnt_adj_reg[15] [9]),
        .O(p_2_in[9]));
  FDRE \cur_byte_cnt_reg[0] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[0]),
        .Q(\cur_byte_cnt_reg[0]_0 ),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[10] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[10]),
        .Q(cur_byte_cnt[10]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[11] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[11]),
        .Q(cur_byte_cnt[11]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[12] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[12]),
        .Q(cur_byte_cnt[12]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  CARRY4 \cur_byte_cnt_reg[12]_i_2 
       (.CI(\cur_byte_cnt_reg[8]_i_2_n_0 ),
        .CO({\cur_byte_cnt_reg[12]_i_2_n_0 ,\cur_byte_cnt_reg[12]_i_2_n_1 ,\cur_byte_cnt_reg[12]_i_2_n_2 ,\cur_byte_cnt_reg[12]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\cur_byte_cnt_reg[15]_0 [11:8]),
        .S(cur_byte_cnt[12:9]));
  FDRE \cur_byte_cnt_reg[13] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[13]),
        .Q(cur_byte_cnt[13]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[14] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[14]),
        .Q(cur_byte_cnt[14]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[15] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[15]),
        .Q(cur_byte_cnt[15]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  CARRY4 \cur_byte_cnt_reg[15]_i_5 
       (.CI(\cur_byte_cnt_reg[12]_i_2_n_0 ),
        .CO({\NLW_cur_byte_cnt_reg[15]_i_5_CO_UNCONNECTED [3:2],\cur_byte_cnt_reg[15]_i_5_n_2 ,\cur_byte_cnt_reg[15]_i_5_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_cur_byte_cnt_reg[15]_i_5_O_UNCONNECTED [3],\cur_byte_cnt_reg[15]_0 [14:12]}),
        .S({1'b0,cur_byte_cnt[15:13]}));
  FDRE \cur_byte_cnt_reg[1] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[1]),
        .Q(cur_byte_cnt[1]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[2] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[2]),
        .Q(cur_byte_cnt[2]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[3] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[3]),
        .Q(cur_byte_cnt[3]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[4] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[4]),
        .Q(cur_byte_cnt[4]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  CARRY4 \cur_byte_cnt_reg[4]_i_2 
       (.CI(1'b0),
        .CO({\cur_byte_cnt_reg[4]_i_2_n_0 ,\cur_byte_cnt_reg[4]_i_2_n_1 ,\cur_byte_cnt_reg[4]_i_2_n_2 ,\cur_byte_cnt_reg[4]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,cur_byte_cnt[2],1'b0}),
        .O(\cur_byte_cnt_reg[15]_0 [3:0]),
        .S({cur_byte_cnt[4:3],\cur_byte_cnt[4]_i_3_n_0 ,cur_byte_cnt[1]}));
  FDRE \cur_byte_cnt_reg[5] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[5]),
        .Q(cur_byte_cnt[5]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[6] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[6]),
        .Q(cur_byte_cnt[6]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[7] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[7]),
        .Q(cur_byte_cnt[7]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  FDRE \cur_byte_cnt_reg[8] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[8]),
        .Q(cur_byte_cnt[8]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  CARRY4 \cur_byte_cnt_reg[8]_i_2 
       (.CI(\cur_byte_cnt_reg[4]_i_2_n_0 ),
        .CO({\cur_byte_cnt_reg[8]_i_2_n_0 ,\cur_byte_cnt_reg[8]_i_2_n_1 ,\cur_byte_cnt_reg[8]_i_2_n_2 ,\cur_byte_cnt_reg[8]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\cur_byte_cnt_reg[15]_0 [7:4]),
        .S(cur_byte_cnt[8:5]));
  FDRE \cur_byte_cnt_reg[9] 
       (.C(m_axis_aclk),
        .CE(\cur_byte_cnt[15]_i_2_n_0 ),
        .D(p_2_in[9]),
        .Q(cur_byte_cnt[9]),
        .R(\cur_byte_cnt[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT5 #(
    .INIT(32'hFF7F0070)) 
    \data_p_strb[0]_i_1 
       (.I0(crc_p_strb[0]),
        .I1(crc_p_strb[1]),
        .I2(crc_partial),
        .I3(crc_start_d1),
        .I4(\data_p_strb_reg[0]_0 ),
        .O(\data_p_strb_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT4 #(
    .INIT(16'hF704)) 
    \data_p_strb[1]_i_1 
       (.I0(crc_p_strb[0]),
        .I1(crc_partial),
        .I2(crc_start_d1),
        .I3(\data_p_strb_reg[1]_0 ),
        .O(\data_p_strb_reg[1] ));
  LUT5 #(
    .INIT(32'h0000EF00)) 
    data_sdown_reg_i_1
       (.I0(data_shutdown),
        .I1(end_mem_wr1_i_3_n_0),
        .I2(end_mem_wr1),
        .I3(m_axis_aresetn),
        .I4(core_men_r2c),
        .O(data_sdown_reg_i_1_n_0));
  FDRE data_sdown_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(data_sdown_reg_i_1_n_0),
        .Q(data_shutdown),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT2 #(
    .INIT(4'h2)) 
    data_wip_reg_i_3
       (.I0(data_wip_reg),
        .I1(end_mem_wr1_i_4_n_0),
        .O(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[3]_0 ));
  FDRE data_wip_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(data_wip),
        .Q(data_wip_reg),
        .R(srst));
  LUT5 #(
    .INIT(32'h000000A8)) 
    end_mem_wr1_i_1
       (.I0(m_axis_aresetn),
        .I1(end_mem_wr1),
        .I2(end_mem_wr10),
        .I3(end_mem_wr1_i_3_n_0),
        .I4(end_mem_wr1_i_4_n_0),
        .O(end_mem_wr1_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000000100000)) 
    end_mem_wr1_i_2
       (.I0(end_mem_wr2_reg_0[0]),
        .I1(p_0_in),
        .I2(data_wip_reg),
        .I3(end_mem_wr2_reg_0[1]),
        .I4(mem_wen_i),
        .I5(end_mem_wr2_reg_0[2]),
        .O(end_mem_wr10));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    end_mem_wr1_i_3
       (.I0(end_mem_wr2_reg_0[2]),
        .I1(p_0_in),
        .I2(end_mem_wr2_reg_0[0]),
        .I3(mem_wen_i),
        .I4(end_mem_wr2_reg_0[1]),
        .O(end_mem_wr1_i_3_n_0));
  LUT6 #(
    .INIT(64'hCCCCCCEECFCFCFEE)) 
    end_mem_wr1_i_4
       (.I0(mem_wen_i),
        .I1(wc_gt_pload),
        .I2(end_mem_wr1_i_5_n_0),
        .I3(Q[0]),
        .I4(Q[1]),
        .I5(diwc_corrected_zero),
        .O(end_mem_wr1_i_4_n_0));
  LUT4 #(
    .INIT(16'h0155)) 
    end_mem_wr1_i_5
       (.I0(core_men_f),
        .I1(pkt_valid),
        .I2(pkt_valid_d1),
        .I3(pre_byt_cnt2_reg_n_0),
        .O(end_mem_wr1_i_5_n_0));
  FDRE end_mem_wr1_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(end_mem_wr1_i_1_n_0),
        .Q(end_mem_wr1),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFB000000000000)) 
    end_mem_wr2_i_1
       (.I0(end_mem_wr2_reg_0[2]),
        .I1(mem_wen_i),
        .I2(end_mem_wr2_reg_0[1]),
        .I3(p_0_in),
        .I4(end_mem_wr2_i_2_n_0),
        .I5(m_axis_aresetn),
        .O(end_mem_wr2_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF00404040)) 
    end_mem_wr2_i_2
       (.I0(p_0_in),
        .I1(end_mem_wr2_reg_0[2]),
        .I2(mem_wen_i),
        .I3(end_mem_wr2_reg_0[0]),
        .I4(end_mem_wr2_reg_0[1]),
        .I5(end_mem_wr2),
        .O(end_mem_wr2_i_2_n_0));
  FDRE end_mem_wr2_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(end_mem_wr2_i_1_n_0),
        .Q(end_mem_wr2),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_i[0]_i_1 
       (.I0(crc_p_value[0]),
        .I1(crc_partial),
        .I2(\c_data_reg[15] [0]),
        .O(D[0]));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \exp_crc_i[10]_i_1 
       (.I0(crc_p_value[10]),
        .I1(crc_partial),
        .I2(\exp_crc_i[15]_i_3_n_0 ),
        .I3(\c_data_reg[15] [10]),
        .I4(\data_p_strb_reg[1]_0 ),
        .I5(\c_data_reg[15] [2]),
        .O(D[10]));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \exp_crc_i[11]_i_1 
       (.I0(crc_p_value[11]),
        .I1(crc_partial),
        .I2(\exp_crc_i[15]_i_3_n_0 ),
        .I3(\c_data_reg[15] [11]),
        .I4(\data_p_strb_reg[1]_0 ),
        .I5(\c_data_reg[15] [3]),
        .O(D[11]));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \exp_crc_i[12]_i_1 
       (.I0(crc_p_value[12]),
        .I1(crc_partial),
        .I2(\exp_crc_i[15]_i_3_n_0 ),
        .I3(\c_data_reg[15] [12]),
        .I4(\data_p_strb_reg[1]_0 ),
        .I5(\c_data_reg[15] [4]),
        .O(D[12]));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \exp_crc_i[13]_i_1 
       (.I0(crc_p_value[13]),
        .I1(crc_partial),
        .I2(\exp_crc_i[15]_i_3_n_0 ),
        .I3(\c_data_reg[15] [13]),
        .I4(\data_p_strb_reg[1]_0 ),
        .I5(\c_data_reg[15] [5]),
        .O(D[13]));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \exp_crc_i[14]_i_1 
       (.I0(crc_p_value[14]),
        .I1(crc_partial),
        .I2(\exp_crc_i[15]_i_3_n_0 ),
        .I3(\c_data_reg[15] [14]),
        .I4(\data_p_strb_reg[1]_0 ),
        .I5(\c_data_reg[15] [6]),
        .O(D[14]));
  LUT6 #(
    .INIT(64'h5000500044450000)) 
    \exp_crc_i[15]_i_1 
       (.I0(crc_start_d1),
        .I1(\data_p_strb_reg[0]_0 ),
        .I2(crc_p_strb[1]),
        .I3(crc_p_strb[0]),
        .I4(pkt_valid_d1),
        .I5(crc_partial),
        .O(E[1]));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \exp_crc_i[15]_i_2 
       (.I0(crc_p_value[15]),
        .I1(crc_partial),
        .I2(\exp_crc_i[15]_i_3_n_0 ),
        .I3(\c_data_reg[15] [15]),
        .I4(\data_p_strb_reg[1]_0 ),
        .I5(\c_data_reg[15] [7]),
        .O(D[15]));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \exp_crc_i[15]_i_3 
       (.I0(crc_p_strb[0]),
        .I1(crc_p_strb[1]),
        .O(\exp_crc_i[15]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_i[1]_i_1 
       (.I0(crc_p_value[1]),
        .I1(crc_partial),
        .I2(\c_data_reg[15] [1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_i[2]_i_1 
       (.I0(crc_p_value[2]),
        .I1(crc_partial),
        .I2(\c_data_reg[15] [2]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_i[3]_i_1 
       (.I0(crc_p_value[3]),
        .I1(crc_partial),
        .I2(\c_data_reg[15] [3]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_i[4]_i_1 
       (.I0(crc_p_value[4]),
        .I1(crc_partial),
        .I2(\c_data_reg[15] [4]),
        .O(D[4]));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_i[5]_i_1 
       (.I0(crc_p_value[5]),
        .I1(crc_partial),
        .I2(\c_data_reg[15] [5]),
        .O(D[5]));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_i[6]_i_1 
       (.I0(crc_p_value[6]),
        .I1(crc_partial),
        .I2(\c_data_reg[15] [6]),
        .O(D[6]));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \exp_crc_i[7]_i_1 
       (.I0(\exp_crc_i[7]_i_3_n_0 ),
        .I1(crc_start_d1),
        .O(E[0]));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_i[7]_i_2 
       (.I0(crc_p_value[7]),
        .I1(crc_partial),
        .I2(\c_data_reg[15] [7]),
        .O(D[7]));
  LUT6 #(
    .INIT(64'hE4E4A0A4A0A4A0A4)) 
    \exp_crc_i[7]_i_3 
       (.I0(crc_partial),
        .I1(pkt_valid_d1),
        .I2(crc_p_strb[0]),
        .I3(crc_p_strb[1]),
        .I4(\data_p_strb_reg[0]_0 ),
        .I5(\data_p_strb_reg[1]_0 ),
        .O(\exp_crc_i[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \exp_crc_i[8]_i_1 
       (.I0(crc_p_value[8]),
        .I1(crc_partial),
        .I2(\exp_crc_i[15]_i_3_n_0 ),
        .I3(\c_data_reg[15] [8]),
        .I4(\data_p_strb_reg[1]_0 ),
        .I5(\c_data_reg[15] [0]),
        .O(D[8]));
  LUT6 #(
    .INIT(64'hBB88BB8BBB88B888)) 
    \exp_crc_i[9]_i_1 
       (.I0(crc_p_value[9]),
        .I1(crc_partial),
        .I2(\exp_crc_i[15]_i_3_n_0 ),
        .I3(\c_data_reg[15] [9]),
        .I4(\data_p_strb_reg[1]_0 ),
        .I5(\c_data_reg[15] [1]),
        .O(D[9]));
  FDRE \exp_crc_r_reg[0] 
       (.C(m_axis_aclk),
        .CE(crc_trig_d1),
        .D(\gpr1.dout_i_reg[17] [0]),
        .Q(exp_crc_r[0]),
        .R(srst));
  FDRE \exp_crc_r_reg[10] 
       (.C(m_axis_aclk),
        .CE(crc_trig_d1),
        .D(\gpr1.dout_i_reg[17] [10]),
        .Q(exp_crc_r[10]),
        .R(srst));
  FDRE \exp_crc_r_reg[11] 
       (.C(m_axis_aclk),
        .CE(crc_trig_d1),
        .D(\gpr1.dout_i_reg[17] [11]),
        .Q(exp_crc_r[11]),
        .R(srst));
  FDRE \exp_crc_r_reg[12] 
       (.C(m_axis_aclk),
        .CE(crc_trig_d1),
        .D(\gpr1.dout_i_reg[17] [12]),
        .Q(exp_crc_r[12]),
        .R(srst));
  FDRE \exp_crc_r_reg[13] 
       (.C(m_axis_aclk),
        .CE(crc_trig_d1),
        .D(\gpr1.dout_i_reg[17] [13]),
        .Q(exp_crc_r[13]),
        .R(srst));
  FDRE \exp_crc_r_reg[14] 
       (.C(m_axis_aclk),
        .CE(crc_trig_d1),
        .D(\gpr1.dout_i_reg[17] [14]),
        .Q(exp_crc_r[14]),
        .R(srst));
  FDRE \exp_crc_r_reg[15] 
       (.C(m_axis_aclk),
        .CE(crc_trig_d1),
        .D(\gpr1.dout_i_reg[17] [15]),
        .Q(exp_crc_r[15]),
        .R(srst));
  FDRE \exp_crc_r_reg[1] 
       (.C(m_axis_aclk),
        .CE(crc_trig_d1),
        .D(\gpr1.dout_i_reg[17] [1]),
        .Q(exp_crc_r[1]),
        .R(srst));
  FDRE \exp_crc_r_reg[2] 
       (.C(m_axis_aclk),
        .CE(crc_trig_d1),
        .D(\gpr1.dout_i_reg[17] [2]),
        .Q(exp_crc_r[2]),
        .R(srst));
  FDRE \exp_crc_r_reg[3] 
       (.C(m_axis_aclk),
        .CE(crc_trig_d1),
        .D(\gpr1.dout_i_reg[17] [3]),
        .Q(exp_crc_r[3]),
        .R(srst));
  FDRE \exp_crc_r_reg[4] 
       (.C(m_axis_aclk),
        .CE(crc_trig_d1),
        .D(\gpr1.dout_i_reg[17] [4]),
        .Q(exp_crc_r[4]),
        .R(srst));
  FDRE \exp_crc_r_reg[5] 
       (.C(m_axis_aclk),
        .CE(crc_trig_d1),
        .D(\gpr1.dout_i_reg[17] [5]),
        .Q(exp_crc_r[5]),
        .R(srst));
  FDRE \exp_crc_r_reg[6] 
       (.C(m_axis_aclk),
        .CE(crc_trig_d1),
        .D(\gpr1.dout_i_reg[17] [6]),
        .Q(exp_crc_r[6]),
        .R(srst));
  FDRE \exp_crc_r_reg[7] 
       (.C(m_axis_aclk),
        .CE(crc_trig_d1),
        .D(\gpr1.dout_i_reg[17] [7]),
        .Q(exp_crc_r[7]),
        .R(srst));
  FDRE \exp_crc_r_reg[8] 
       (.C(m_axis_aclk),
        .CE(crc_trig_d1),
        .D(\gpr1.dout_i_reg[17] [8]),
        .Q(exp_crc_r[8]),
        .R(srst));
  FDRE \exp_crc_r_reg[9] 
       (.C(m_axis_aclk),
        .CE(crc_trig_d1),
        .D(\gpr1.dout_i_reg[17] [9]),
        .Q(exp_crc_r[9]),
        .R(srst));
  LUT4 #(
    .INIT(16'hFFFE)) 
    frame_rcvd
       (.I0(\FRAME_RCVD_GEN[1].frame_rcvd_i_reg ),
        .I1(\FRAME_RCVD_GEN[0].frame_rcvd_i_reg ),
        .I2(\FRAME_RCVD_GEN[3].frame_rcvd_i_reg ),
        .I3(\FRAME_RCVD_GEN[2].frame_rcvd_i_reg ),
        .O(src_in));
  LUT4 #(
    .INIT(16'h8F88)) 
    fsm_wip_reg_i_1
       (.I0(\FSM_sequential_cur_state_reg[1] ),
        .I1(\diwc_corrected_reg[2] ),
        .I2(data_done),
        .I3(fsm_wip_reg),
        .O(fsm_wip_reg_i_1_n_0));
  FDRE fsm_wip_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsm_wip_reg_i_1_n_0),
        .Q(fsm_wip_reg),
        .R(srst));
  LUT5 #(
    .INIT(32'h00800000)) 
    lbuf_blk_wen_i_i_2
       (.I0(din[65]),
        .I1(din[67]),
        .I2(din[66]),
        .I3(din[64]),
        .I4(wr_en),
        .O(lbuf_rst_code));
  FDRE lbuf_blk_wen_i_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ram_full_i_reg),
        .Q(lbuf_blk_wen_i),
        .R(\syncstages_ff_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[0]_i_1 
       (.I0(\exp_ecc_reg[7] [0]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[0] ),
        .O(\mem_wdata[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[10]_i_1 
       (.I0(exp_crc_r[2]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[10] ),
        .O(\mem_wdata[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[11]_i_1 
       (.I0(exp_crc_r[3]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[11] ),
        .O(\mem_wdata[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[12]_i_1 
       (.I0(exp_crc_r[4]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[12] ),
        .O(\mem_wdata[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[13]_i_1 
       (.I0(exp_crc_r[5]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[13] ),
        .O(\mem_wdata[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[14]_i_1 
       (.I0(exp_crc_r[6]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[14] ),
        .O(\mem_wdata[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[15]_i_1 
       (.I0(exp_crc_r[7]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[15] ),
        .O(\mem_wdata[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[16]_i_1 
       (.I0(exp_crc_r[8]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[16] ),
        .O(\mem_wdata[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[17]_i_1 
       (.I0(exp_crc_r[9]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[17] ),
        .O(\mem_wdata[17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[18]_i_1 
       (.I0(exp_crc_r[10]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[18] ),
        .O(\mem_wdata[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[19]_i_1 
       (.I0(exp_crc_r[11]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[19] ),
        .O(\mem_wdata[19]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[1]_i_1 
       (.I0(\exp_ecc_reg[7] [1]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[1] ),
        .O(\mem_wdata[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[20]_i_1 
       (.I0(exp_crc_r[12]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[20] ),
        .O(\mem_wdata[20]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[21]_i_1 
       (.I0(exp_crc_r[13]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[21] ),
        .O(\mem_wdata[21]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[22]_i_1 
       (.I0(exp_crc_r[14]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[22] ),
        .O(\mem_wdata[22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[23]_i_1 
       (.I0(exp_crc_r[15]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[23] ),
        .O(\mem_wdata[23]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[2]_i_1 
       (.I0(\exp_ecc_reg[7] [2]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[2] ),
        .O(\mem_wdata[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[3]_i_1 
       (.I0(\exp_ecc_reg[7] [3]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[3] ),
        .O(\mem_wdata[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[4]_i_1 
       (.I0(\exp_ecc_reg[7] [4]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[4] ),
        .O(\mem_wdata[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[5]_i_1 
       (.I0(\exp_ecc_reg[7] [5]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[5] ),
        .O(\mem_wdata[5]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \mem_wdata[63]_i_1 
       (.I0(crc_trig_d3),
        .I1(m_axis_aresetn),
        .O(\mem_wdata[63]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \mem_wdata[64]_i_1 
       (.I0(p_0_in),
        .I1(m_axis_aresetn),
        .I2(\gaf.gaf0.ram_afull_i_reg ),
        .O(\mem_wdata[64]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[6]_i_1 
       (.I0(\exp_ecc_reg[7] [6]),
        .I1(crc_trig_d3),
        .I2(mem_vc[0]),
        .O(\mem_wdata[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[7]_i_1 
       (.I0(\exp_ecc_reg[7] [7]),
        .I1(crc_trig_d3),
        .I2(mem_vc[1]),
        .O(\mem_wdata[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[8]_i_1 
       (.I0(exp_crc_r[0]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[8] ),
        .O(\mem_wdata[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \mem_wdata[9]_i_1 
       (.I0(exp_crc_r[1]),
        .I1(crc_trig_d3),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[9] ),
        .O(\mem_wdata[9]_i_1_n_0 ));
  FDRE \mem_wdata_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[0]_i_1_n_0 ),
        .Q(din[0]),
        .R(srst));
  FDRE \mem_wdata_reg[10] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[10]_i_1_n_0 ),
        .Q(din[10]),
        .R(srst));
  FDRE \mem_wdata_reg[11] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[11]_i_1_n_0 ),
        .Q(din[11]),
        .R(srst));
  FDRE \mem_wdata_reg[12] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[12]_i_1_n_0 ),
        .Q(din[12]),
        .R(srst));
  FDRE \mem_wdata_reg[13] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[13]_i_1_n_0 ),
        .Q(din[13]),
        .R(srst));
  FDRE \mem_wdata_reg[14] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[14]_i_1_n_0 ),
        .Q(din[14]),
        .R(srst));
  FDRE \mem_wdata_reg[15] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[15]_i_1_n_0 ),
        .Q(din[15]),
        .R(srst));
  FDRE \mem_wdata_reg[16] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[16]_i_1_n_0 ),
        .Q(din[16]),
        .R(srst));
  FDRE \mem_wdata_reg[17] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[17]_i_1_n_0 ),
        .Q(din[17]),
        .R(srst));
  FDRE \mem_wdata_reg[18] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[18]_i_1_n_0 ),
        .Q(din[18]),
        .R(srst));
  FDRE \mem_wdata_reg[19] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[19]_i_1_n_0 ),
        .Q(din[19]),
        .R(srst));
  FDRE \mem_wdata_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[1]_i_1_n_0 ),
        .Q(din[1]),
        .R(srst));
  FDRE \mem_wdata_reg[20] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[20]_i_1_n_0 ),
        .Q(din[20]),
        .R(srst));
  FDRE \mem_wdata_reg[21] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[21]_i_1_n_0 ),
        .Q(din[21]),
        .R(srst));
  FDRE \mem_wdata_reg[22] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[22]_i_1_n_0 ),
        .Q(din[22]),
        .R(srst));
  FDRE \mem_wdata_reg[23] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[23]_i_1_n_0 ),
        .Q(din[23]),
        .R(srst));
  FDRE \mem_wdata_reg[24] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[24] ),
        .Q(din[24]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[25] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[25] ),
        .Q(din[25]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[26] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[26] ),
        .Q(din[26]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[27] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[27] ),
        .Q(din[27]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[28] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[28] ),
        .Q(din[28]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[29] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[29] ),
        .Q(din[29]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[2]_i_1_n_0 ),
        .Q(din[2]),
        .R(srst));
  FDRE \mem_wdata_reg[30] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[30] ),
        .Q(din[30]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[31] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[31] ),
        .Q(din[31]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[32] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[32] ),
        .Q(din[32]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[33] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[33] ),
        .Q(din[33]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[34] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[34] ),
        .Q(din[34]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[35] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[35] ),
        .Q(din[35]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[36] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[36] ),
        .Q(din[36]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[37] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[37] ),
        .Q(din[37]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[38] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[38] ),
        .Q(din[38]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[39] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[39] ),
        .Q(din[39]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[3]_i_1_n_0 ),
        .Q(din[3]),
        .R(srst));
  FDRE \mem_wdata_reg[40] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[40] ),
        .Q(din[40]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[41] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[41] ),
        .Q(din[41]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[42] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[42] ),
        .Q(din[42]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[43] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[43] ),
        .Q(din[43]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[44] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[44] ),
        .Q(din[44]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[45] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[45] ),
        .Q(din[45]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[46] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[46] ),
        .Q(din[46]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[47] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[47] ),
        .Q(din[47]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[48] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[48] ),
        .Q(din[48]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[49] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[49] ),
        .Q(din[49]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[4]_i_1_n_0 ),
        .Q(din[4]),
        .R(srst));
  FDRE \mem_wdata_reg[50] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[50] ),
        .Q(din[50]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[51] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[51] ),
        .Q(din[51]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[52] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[52] ),
        .Q(din[52]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[53] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[53] ),
        .Q(din[53]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[54] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[54] ),
        .Q(din[54]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[55] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[55] ),
        .Q(din[55]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[56] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[56] ),
        .Q(din[56]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[57] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[57] ),
        .Q(din[57]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[58] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[58] ),
        .Q(din[58]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[59] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[59] ),
        .Q(din[59]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[5]_i_1_n_0 ),
        .Q(din[5]),
        .R(srst));
  FDRE \mem_wdata_reg[60] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[60] ),
        .Q(din[60]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[61] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[61] ),
        .Q(din[61]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[62] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[62] ),
        .Q(din[62]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[63] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg_n_0_[63] ),
        .Q(din[63]),
        .R(\mem_wdata[63]_i_1_n_0 ));
  FDRE \mem_wdata_reg[64] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[64]_i_1_n_0 ),
        .Q(din[64]),
        .R(1'b0));
  FDRE \mem_wdata_reg[65] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg[67]_0 [0]),
        .Q(din[65]),
        .R(1'b0));
  FDRE \mem_wdata_reg[66] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg[67]_0 [1]),
        .Q(din[66]),
        .R(1'b0));
  FDRE \mem_wdata_reg[67] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_BUF_WR_64.mem_wdata_i_reg[67]_0 [2]),
        .Q(din[67]),
        .R(1'b0));
  FDRE \mem_wdata_reg[6] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[6]_i_1_n_0 ),
        .Q(din[6]),
        .R(srst));
  FDRE \mem_wdata_reg[7] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[7]_i_1_n_0 ),
        .Q(din[7]),
        .R(srst));
  FDRE \mem_wdata_reg[8] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[8]_i_1_n_0 ),
        .Q(din[8]),
        .R(srst));
  FDRE \mem_wdata_reg[9] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\mem_wdata[9]_i_1_n_0 ),
        .Q(din[9]),
        .R(srst));
  FDRE mem_wen_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(mem_wen0),
        .Q(wr_en),
        .R(srst));
  FDRE phecc_start_d1_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(phecc_start),
        .Q(phecc_start_d1),
        .R(srst));
  FDRE pkt_valid_d1_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(pkt_valid),
        .Q(pkt_valid_d1),
        .R(srst));
  LUT6 #(
    .INIT(64'h0000000000EA0000)) 
    pre_byt_cnt1_i_1
       (.I0(pre_byt_cnt1_reg_n_0),
        .I1(\byt_cnt_adj_reg[15]_0 ),
        .I2(pkt_rdvld_reg_3),
        .I3(phecc_start_d1),
        .I4(core_men_r2c),
        .I5(\cur_byte_cnt[15]_i_1_n_0 ),
        .O(pre_byt_cnt1_i_1_n_0));
  FDRE pre_byt_cnt1_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(pre_byt_cnt1_i_1_n_0),
        .Q(pre_byt_cnt1_reg_n_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000EAEAEAAA)) 
    pre_byt_cnt2_i_1
       (.I0(pre_byt_cnt2_reg_n_0),
        .I1(fsm_wip_reg),
        .I2(pkt_valid),
        .I3(\byte_cnt_reg_reg[15] ),
        .I4(diwc_corrected_lte4),
        .I5(pre_byt_cnt2),
        .O(pre_byt_cnt2_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'hFB)) 
    pre_byt_cnt2_i_3
       (.I0(\cur_byte_cnt[15]_i_1_n_0 ),
        .I1(core_men_r2c),
        .I2(phecc_start_d1),
        .O(pre_byt_cnt2));
  FDRE pre_byt_cnt2_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(pre_byt_cnt2_i_1_n_0),
        .Q(pre_byt_cnt2_reg_n_0),
        .R(1'b0));
  FDRE wc_err_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(wc_gt_pload),
        .Q(wc_err),
        .R(srst));
  LUT4 #(
    .INIT(16'h4000)) 
    wc_gt_pload_i_1
       (.I0(pre_byt_cnt1_reg_n_0),
        .I1(fsm_wip_reg),
        .I2(dout),
        .I3(pkt_valid_d1),
        .O(wc_gt_pload0));
  FDRE wc_gt_pload_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(wc_gt_pload0),
        .Q(wc_gt_pload),
        .R(srst));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_gen_spkt_fifo" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_gen_spkt_fifo
   (src_ff_reg,
    D,
    \s_axi_rdata_reg[23] ,
    interrupt,
    E,
    m_axis_aclk,
    s_axi_aclk,
    diwc_corrected,
    wr_en,
    s_axi_wdata,
    \isr_i_reg[19] ,
    wr2_isr,
    m_axis_aresetn,
    dest_out,
    Q,
    \core_config_reg[1] ,
    \syncstages_ff_reg[1][1] ,
    \LX_INFO_GEN[1].lx_info_reg[1][3] ,
    \rd_addr_reg[2] ,
    \rd_addr_reg[5] ,
    \img_info2_vc0_reg[0] ,
    \rd_addr_reg[2]_0 ,
    \syncstages_ff_reg[1][0] ,
    \ier_reg[17] ,
    \ier_reg[15] ,
    \ier_reg[7] ,
    \gie_reg[0] ,
    \rd_addr_reg[4] ,
    lp_count_all,
    \rd_addr_reg[3] ,
    \rd_addr_reg[4]_0 ,
    \rd_addr_reg[3]_0 ,
    \rd_addr_reg[2]_1 ,
    \rd_addr_reg[2]_2 ,
    \syncstages_ff_reg[1][1]_0 ,
    \rd_addr_reg[3]_1 ,
    \rd_addr_reg[4]_1 ,
    \rd_addr_reg[2]_3 ,
    \rd_addr_reg[2]_4 ,
    \LX_INFO_GEN[1].lx_info_reg[1][4] ,
    \rd_addr_reg[2]_5 ,
    \rd_addr_reg[2]_6 ,
    \LX_INFO_GEN[1].lx_info_reg[1][5] ,
    \ier_reg[21] ,
    isr_o,
    \syncstages_ff_reg[1][1]_1 ,
    \ier_reg[31] ,
    src_in,
    \rd_addr_reg[3]_2 ,
    \rd_addr_reg[3]_3 ,
    \rd_addr_reg[3]_4 ,
    \rd_addr_reg[3]_5 ,
    \img_info1_vc0_reg[19] ,
    \img_info1_vc1_reg[19] ,
    \rd_addr_reg[2]_7 ,
    \rd_addr_reg[2]_8 ,
    s_axi_araddr,
    rd_req,
    reset_released,
    wr_req,
    s_axi_arvalid,
    \img_info1_vc3_reg[0] ,
    \rd_addr_reg[4]_2 ,
    disable_in_progress,
    \img_info1_vc3_reg[1] ,
    \rd_addr_reg[2]_9 ,
    \img_info2_vc3_reg[5] ,
    \img_info1_vc3_reg[23] ,
    \rd_addr_reg[2]_10 ,
    \img_info1_vc0_reg[23] ,
    \img_info2_vc2_reg[5] ,
    \img_info1_vc2_reg[23] ,
    \rd_addr_reg[3]_6 ,
    \rd_addr_reg[3]_7 ,
    \rd_addr_reg[3]_8 ,
    \rd_addr_reg[3]_9 ,
    \img_info1_vc1_reg[6] ,
    \HSC2R_CDC[6].hsc2r_vld_out_reg[6] ,
    \img_info1_vc1_reg[7] ,
    \HSC2R_CDC[7].hsc2r_vld_out_reg[7] ,
    \img_info1_vc1_reg[8] ,
    \HSC2R_CDC[8].hsc2r_vld_out_reg[8] ,
    \img_info1_vc1_reg[9] ,
    \HSC2R_CDC[9].hsc2r_vld_out_reg[9] ,
    \img_info1_vc1_reg[12] ,
    \HSC2R_CDC[10].hsc2r_vld_out_reg[10] ,
    \img_info1_vc1_reg[13] ,
    \HSC2R_CDC[11].hsc2r_vld_out_reg[11] );
  output src_ff_reg;
  output [0:0]D;
  output [23:0]\s_axi_rdata_reg[23] ;
  output interrupt;
  output [0:0]E;
  input m_axis_aclk;
  input s_axi_aclk;
  input [23:0]diwc_corrected;
  input wr_en;
  input [0:0]s_axi_wdata;
  input [0:0]\isr_i_reg[19] ;
  input wr2_isr;
  input m_axis_aresetn;
  input dest_out;
  input [4:0]Q;
  input \core_config_reg[1] ;
  input [1:0]\syncstages_ff_reg[1][1] ;
  input \LX_INFO_GEN[1].lx_info_reg[1][3] ;
  input \rd_addr_reg[2] ;
  input \rd_addr_reg[5] ;
  input \img_info2_vc0_reg[0] ;
  input \rd_addr_reg[2]_0 ;
  input \syncstages_ff_reg[1][0] ;
  input \ier_reg[17] ;
  input \ier_reg[15] ;
  input \ier_reg[7] ;
  input \gie_reg[0] ;
  input \rd_addr_reg[4] ;
  input [6:0]lp_count_all;
  input \rd_addr_reg[3] ;
  input \rd_addr_reg[4]_0 ;
  input \rd_addr_reg[3]_0 ;
  input \rd_addr_reg[2]_1 ;
  input \rd_addr_reg[2]_2 ;
  input \syncstages_ff_reg[1][1]_0 ;
  input \rd_addr_reg[3]_1 ;
  input \rd_addr_reg[4]_1 ;
  input \rd_addr_reg[2]_3 ;
  input \rd_addr_reg[2]_4 ;
  input \LX_INFO_GEN[1].lx_info_reg[1][4] ;
  input \rd_addr_reg[2]_5 ;
  input \rd_addr_reg[2]_6 ;
  input \LX_INFO_GEN[1].lx_info_reg[1][5] ;
  input [3:0]\ier_reg[21] ;
  input [0:0]isr_o;
  input [1:0]\syncstages_ff_reg[1][1]_1 ;
  input \ier_reg[31] ;
  input [0:0]src_in;
  input \rd_addr_reg[3]_2 ;
  input \rd_addr_reg[3]_3 ;
  input \rd_addr_reg[3]_4 ;
  input \rd_addr_reg[3]_5 ;
  input [0:0]\img_info1_vc0_reg[19] ;
  input [0:0]\img_info1_vc1_reg[19] ;
  input \rd_addr_reg[2]_7 ;
  input \rd_addr_reg[2]_8 ;
  input [4:0]s_axi_araddr;
  input rd_req;
  input reset_released;
  input wr_req;
  input s_axi_arvalid;
  input \img_info1_vc3_reg[0] ;
  input \rd_addr_reg[4]_2 ;
  input disable_in_progress;
  input \img_info1_vc3_reg[1] ;
  input \rd_addr_reg[2]_9 ;
  input [3:0]\img_info2_vc3_reg[5] ;
  input [21:0]\img_info1_vc3_reg[23] ;
  input \rd_addr_reg[2]_10 ;
  input \img_info1_vc0_reg[23] ;
  input [5:0]\img_info2_vc2_reg[5] ;
  input [23:0]\img_info1_vc2_reg[23] ;
  input \rd_addr_reg[3]_6 ;
  input \rd_addr_reg[3]_7 ;
  input \rd_addr_reg[3]_8 ;
  input \rd_addr_reg[3]_9 ;
  input \img_info1_vc1_reg[6] ;
  input \HSC2R_CDC[6].hsc2r_vld_out_reg[6] ;
  input \img_info1_vc1_reg[7] ;
  input \HSC2R_CDC[7].hsc2r_vld_out_reg[7] ;
  input \img_info1_vc1_reg[8] ;
  input \HSC2R_CDC[8].hsc2r_vld_out_reg[8] ;
  input \img_info1_vc1_reg[9] ;
  input \HSC2R_CDC[9].hsc2r_vld_out_reg[9] ;
  input \img_info1_vc1_reg[12] ;
  input \HSC2R_CDC[10].hsc2r_vld_out_reg[10] ;
  input \img_info1_vc1_reg[13] ;
  input \HSC2R_CDC[11].hsc2r_vld_out_reg[11] ;

  wire [0:0]D;
  wire [0:0]E;
  wire \HSC2R_CDC[10].hsc2r_vld_out_reg[10] ;
  wire \HSC2R_CDC[11].hsc2r_vld_out_reg[11] ;
  wire \HSC2R_CDC[6].hsc2r_vld_out_reg[6] ;
  wire \HSC2R_CDC[7].hsc2r_vld_out_reg[7] ;
  wire \HSC2R_CDC[8].hsc2r_vld_out_reg[8] ;
  wire \HSC2R_CDC[9].hsc2r_vld_out_reg[9] ;
  wire \LX_INFO_GEN[1].lx_info_reg[1][3] ;
  wire \LX_INFO_GEN[1].lx_info_reg[1][4] ;
  wire \LX_INFO_GEN[1].lx_info_reg[1][5] ;
  wire [4:0]Q;
  wire \core_config_reg[1] ;
  wire dest_out;
  wire disable_in_progress;
  wire [23:0]diwc_corrected;
  wire \gie_reg[0] ;
  wire \ier_reg[15] ;
  wire \ier_reg[17] ;
  wire [3:0]\ier_reg[21] ;
  wire \ier_reg[31] ;
  wire \ier_reg[7] ;
  wire [0:0]\img_info1_vc0_reg[19] ;
  wire \img_info1_vc0_reg[23] ;
  wire \img_info1_vc1_reg[12] ;
  wire \img_info1_vc1_reg[13] ;
  wire [0:0]\img_info1_vc1_reg[19] ;
  wire \img_info1_vc1_reg[6] ;
  wire \img_info1_vc1_reg[7] ;
  wire \img_info1_vc1_reg[8] ;
  wire \img_info1_vc1_reg[9] ;
  wire [23:0]\img_info1_vc2_reg[23] ;
  wire \img_info1_vc3_reg[0] ;
  wire \img_info1_vc3_reg[1] ;
  wire [21:0]\img_info1_vc3_reg[23] ;
  wire \img_info2_vc0_reg[0] ;
  wire [5:0]\img_info2_vc2_reg[5] ;
  wire [3:0]\img_info2_vc3_reg[5] ;
  wire interrupt;
  wire interrupt_INST_0_i_15_n_0;
  wire interrupt_INST_0_i_4_n_0;
  wire [0:0]\isr_i_reg[19] ;
  wire [0:0]isr_o;
  wire [6:0]lp_count_all;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire \rd_addr_reg[2] ;
  wire \rd_addr_reg[2]_0 ;
  wire \rd_addr_reg[2]_1 ;
  wire \rd_addr_reg[2]_10 ;
  wire \rd_addr_reg[2]_2 ;
  wire \rd_addr_reg[2]_3 ;
  wire \rd_addr_reg[2]_4 ;
  wire \rd_addr_reg[2]_5 ;
  wire \rd_addr_reg[2]_6 ;
  wire \rd_addr_reg[2]_7 ;
  wire \rd_addr_reg[2]_8 ;
  wire \rd_addr_reg[2]_9 ;
  wire \rd_addr_reg[3] ;
  wire \rd_addr_reg[3]_0 ;
  wire \rd_addr_reg[3]_1 ;
  wire \rd_addr_reg[3]_2 ;
  wire \rd_addr_reg[3]_3 ;
  wire \rd_addr_reg[3]_4 ;
  wire \rd_addr_reg[3]_5 ;
  wire \rd_addr_reg[3]_6 ;
  wire \rd_addr_reg[3]_7 ;
  wire \rd_addr_reg[3]_8 ;
  wire \rd_addr_reg[3]_9 ;
  wire \rd_addr_reg[4] ;
  wire \rd_addr_reg[4]_0 ;
  wire \rd_addr_reg[4]_1 ;
  wire \rd_addr_reg[4]_2 ;
  wire \rd_addr_reg[5] ;
  wire rd_req;
  wire reset_released;
  wire rstn_o;
  wire s_axi_aclk;
  wire [4:0]s_axi_araddr;
  wire s_axi_arvalid;
  wire \s_axi_rdata[0]_i_2_n_0 ;
  wire \s_axi_rdata[0]_i_7_n_0 ;
  wire \s_axi_rdata[10]_i_3_n_0 ;
  wire \s_axi_rdata[11]_i_3_n_0 ;
  wire \s_axi_rdata[12]_i_4_n_0 ;
  wire \s_axi_rdata[13]_i_4_n_0 ;
  wire \s_axi_rdata[14]_i_3_n_0 ;
  wire \s_axi_rdata[15]_i_3_n_0 ;
  wire \s_axi_rdata[16]_i_2_n_0 ;
  wire \s_axi_rdata[17]_i_2_n_0 ;
  wire \s_axi_rdata[18]_i_2_n_0 ;
  wire \s_axi_rdata[19]_i_12_n_0 ;
  wire \s_axi_rdata[19]_i_2_n_0 ;
  wire \s_axi_rdata[19]_i_4_n_0 ;
  wire \s_axi_rdata[1]_i_2_n_0 ;
  wire \s_axi_rdata[1]_i_6_n_0 ;
  wire \s_axi_rdata[20]_i_2_n_0 ;
  wire \s_axi_rdata[21]_i_2_n_0 ;
  wire \s_axi_rdata[22]_i_2_n_0 ;
  wire \s_axi_rdata[23]_i_2_n_0 ;
  wire \s_axi_rdata[2]_i_2_n_0 ;
  wire \s_axi_rdata[2]_i_4_n_0 ;
  wire \s_axi_rdata[3]_i_2_n_0 ;
  wire \s_axi_rdata[3]_i_6_n_0 ;
  wire \s_axi_rdata[4]_i_5_n_0 ;
  wire \s_axi_rdata[4]_i_7_n_0 ;
  wire \s_axi_rdata[5]_i_6_n_0 ;
  wire \s_axi_rdata[5]_i_9_n_0 ;
  wire \s_axi_rdata[6]_i_4_n_0 ;
  wire \s_axi_rdata[7]_i_4_n_0 ;
  wire \s_axi_rdata[8]_i_4_n_0 ;
  wire \s_axi_rdata[9]_i_4_n_0 ;
  wire [23:0]\s_axi_rdata_reg[23] ;
  wire [0:0]s_axi_wdata;
  wire spkt_fifo_empty;
  wire [23:0]spkt_fifo_rdata;
  wire spkt_fifo_ren;
  wire spkt_fifo_rst;
  wire src_ff_reg;
  wire [0:0]src_in;
  wire \syncstages_ff_reg[1][0] ;
  wire [1:0]\syncstages_ff_reg[1][1] ;
  wire \syncstages_ff_reg[1][1]_0 ;
  wire [1:0]\syncstages_ff_reg[1][1]_1 ;
  wire wr2_isr;
  wire wr_en;
  wire wr_req;
  wire xpm_arst_03_i_1_n_0;

  (* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_8_fifo2,fifo_generator_v13_2_2,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_fifo2 generic_pkt
       (.din(diwc_corrected),
        .dout(spkt_fifo_rdata),
        .empty(spkt_fifo_empty),
        .full(src_ff_reg),
        .rd_clk(s_axi_aclk),
        .rd_en(spkt_fifo_ren),
        .rst(spkt_fifo_rst),
        .wr_clk(m_axis_aclk),
        .wr_en(wr_en));
  LUT1 #(
    .INIT(2'h1)) 
    generic_pkt_i_1
       (.I0(rstn_o),
        .O(spkt_fifo_rst));
  LUT6 #(
    .INIT(64'h0000020000000000)) 
    generic_pkt_i_3
       (.I0(s_axi_araddr[3]),
        .I1(s_axi_araddr[4]),
        .I2(s_axi_araddr[1]),
        .I3(s_axi_araddr[2]),
        .I4(s_axi_araddr[0]),
        .I5(E),
        .O(spkt_fifo_ren));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    interrupt_INST_0
       (.I0(\ier_reg[17] ),
        .I1(\ier_reg[15] ),
        .I2(\ier_reg[7] ),
        .I3(interrupt_INST_0_i_4_n_0),
        .I4(\gie_reg[0] ),
        .O(interrupt));
  LUT6 #(
    .INIT(64'hFFFF00A200A200A2)) 
    interrupt_INST_0_i_15
       (.I0(\ier_reg[21] [1]),
        .I1(spkt_fifo_empty),
        .I2(\isr_i_reg[19] ),
        .I3(src_in),
        .I4(\ier_reg[21] [0]),
        .I5(\syncstages_ff_reg[1][1]_1 [0]),
        .O(interrupt_INST_0_i_15_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    interrupt_INST_0_i_4
       (.I0(interrupt_INST_0_i_15_n_0),
        .I1(\ier_reg[21] [3]),
        .I2(isr_o),
        .I3(\ier_reg[21] [2]),
        .I4(\syncstages_ff_reg[1][1]_1 [1]),
        .I5(\ier_reg[31] ),
        .O(interrupt_INST_0_i_4_n_0));
  LUT4 #(
    .INIT(16'h73F3)) 
    \isr_i[19]_i_1 
       (.I0(s_axi_wdata),
        .I1(spkt_fifo_empty),
        .I2(\isr_i_reg[19] ),
        .I3(wr2_isr),
        .O(D));
  LUT4 #(
    .INIT(16'h0400)) 
    \rd_addr[6]_i_1 
       (.I0(rd_req),
        .I1(reset_released),
        .I2(wr_req),
        .I3(s_axi_arvalid),
        .O(E));
  LUT6 #(
    .INIT(64'hDDDDDDDDDDDDDCCC)) 
    \s_axi_rdata[0]_i_1 
       (.I0(Q[2]),
        .I1(\s_axi_rdata[0]_i_2_n_0 ),
        .I2(\rd_addr_reg[5] ),
        .I3(\img_info2_vc0_reg[0] ),
        .I4(\rd_addr_reg[2]_0 ),
        .I5(\syncstages_ff_reg[1][0] ),
        .O(\s_axi_rdata_reg[23] [0]));
  LUT6 #(
    .INIT(64'hFF000000E4E4E4E4)) 
    \s_axi_rdata[0]_i_2 
       (.I0(\rd_addr_reg[3]_1 ),
        .I1(\s_axi_rdata[0]_i_7_n_0 ),
        .I2(\img_info1_vc3_reg[0] ),
        .I3(\rd_addr_reg[4]_2 ),
        .I4(disable_in_progress),
        .I5(\rd_addr_reg[4] ),
        .O(\s_axi_rdata[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF000CCAA)) 
    \s_axi_rdata[0]_i_7 
       (.I0(spkt_fifo_rdata[0]),
        .I1(\img_info1_vc2_reg[23] [0]),
        .I2(\img_info2_vc2_reg[5] [0]),
        .I3(Q[4]),
        .I4(Q[0]),
        .O(\s_axi_rdata[0]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \s_axi_rdata[10]_i_1 
       (.I0(\rd_addr_reg[3]_8 ),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(\s_axi_rdata[10]_i_3_n_0 ),
        .O(\s_axi_rdata_reg[23] [10]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[10]_i_3 
       (.I0(spkt_fifo_rdata[10]),
        .I1(\img_info1_vc2_reg[23] [10]),
        .I2(\img_info1_vc3_reg[23] [8]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[10]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \s_axi_rdata[11]_i_1 
       (.I0(\rd_addr_reg[3]_9 ),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(\s_axi_rdata[11]_i_3_n_0 ),
        .O(\s_axi_rdata_reg[23] [11]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[11]_i_3 
       (.I0(spkt_fifo_rdata[11]),
        .I1(\img_info1_vc2_reg[23] [11]),
        .I2(\img_info1_vc3_reg[23] [9]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[11]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFE000E00)) 
    \s_axi_rdata[12]_i_1 
       (.I0(\img_info1_vc1_reg[12] ),
        .I1(\HSC2R_CDC[10].hsc2r_vld_out_reg[10] ),
        .I2(Q[2]),
        .I3(Q[3]),
        .I4(\s_axi_rdata[12]_i_4_n_0 ),
        .O(\s_axi_rdata_reg[23] [12]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[12]_i_4 
       (.I0(spkt_fifo_rdata[12]),
        .I1(\img_info1_vc2_reg[23] [12]),
        .I2(\img_info1_vc3_reg[23] [10]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[12]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFE000E00)) 
    \s_axi_rdata[13]_i_1 
       (.I0(\img_info1_vc1_reg[13] ),
        .I1(\HSC2R_CDC[11].hsc2r_vld_out_reg[11] ),
        .I2(Q[2]),
        .I3(Q[3]),
        .I4(\s_axi_rdata[13]_i_4_n_0 ),
        .O(\s_axi_rdata_reg[23] [13]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[13]_i_4 
       (.I0(spkt_fifo_rdata[13]),
        .I1(\img_info1_vc2_reg[23] [13]),
        .I2(\img_info1_vc3_reg[23] [11]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[13]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \s_axi_rdata[14]_i_1 
       (.I0(\rd_addr_reg[3]_6 ),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(\s_axi_rdata[14]_i_3_n_0 ),
        .O(\s_axi_rdata_reg[23] [14]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[14]_i_3 
       (.I0(spkt_fifo_rdata[14]),
        .I1(\img_info1_vc2_reg[23] [14]),
        .I2(\img_info1_vc3_reg[23] [12]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[14]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \s_axi_rdata[15]_i_1 
       (.I0(\rd_addr_reg[3]_7 ),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(\s_axi_rdata[15]_i_3_n_0 ),
        .O(\s_axi_rdata_reg[23] [15]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[15]_i_3 
       (.I0(spkt_fifo_rdata[15]),
        .I1(\img_info1_vc2_reg[23] [15]),
        .I2(\img_info1_vc3_reg[23] [13]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[15]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \s_axi_rdata[16]_i_1 
       (.I0(\s_axi_rdata[16]_i_2_n_0 ),
        .I1(\rd_addr_reg[4] ),
        .I2(\core_config_reg[1] ),
        .I3(lp_count_all[0]),
        .I4(\rd_addr_reg[3] ),
        .I5(\rd_addr_reg[4]_0 ),
        .O(\s_axi_rdata_reg[23] [16]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[16]_i_2 
       (.I0(spkt_fifo_rdata[16]),
        .I1(\img_info1_vc2_reg[23] [16]),
        .I2(\img_info1_vc3_reg[23] [14]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[16]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \s_axi_rdata[17]_i_1 
       (.I0(\s_axi_rdata[17]_i_2_n_0 ),
        .I1(\rd_addr_reg[4] ),
        .I2(\core_config_reg[1] ),
        .I3(lp_count_all[1]),
        .I4(\rd_addr_reg[3]_0 ),
        .I5(\rd_addr_reg[4]_0 ),
        .O(\s_axi_rdata_reg[23] [17]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[17]_i_2 
       (.I0(spkt_fifo_rdata[17]),
        .I1(\img_info1_vc2_reg[23] [17]),
        .I2(\img_info1_vc3_reg[23] [15]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[17]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \s_axi_rdata[18]_i_1 
       (.I0(\s_axi_rdata[18]_i_2_n_0 ),
        .I1(\rd_addr_reg[4] ),
        .I2(\core_config_reg[1] ),
        .I3(lp_count_all[2]),
        .I4(\rd_addr_reg[3]_2 ),
        .I5(\rd_addr_reg[4]_0 ),
        .O(\s_axi_rdata_reg[23] [18]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[18]_i_2 
       (.I0(spkt_fifo_rdata[18]),
        .I1(\img_info1_vc2_reg[23] [18]),
        .I2(\img_info1_vc3_reg[23] [16]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[18]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \s_axi_rdata[19]_i_1 
       (.I0(\s_axi_rdata[19]_i_2_n_0 ),
        .I1(\rd_addr_reg[4] ),
        .I2(\core_config_reg[1] ),
        .I3(lp_count_all[3]),
        .I4(\s_axi_rdata[19]_i_4_n_0 ),
        .I5(\rd_addr_reg[4]_0 ),
        .O(\s_axi_rdata_reg[23] [19]));
  LUT6 #(
    .INIT(64'hFFFF0D000D000D00)) 
    \s_axi_rdata[19]_i_12 
       (.I0(spkt_fifo_empty),
        .I1(\isr_i_reg[19] ),
        .I2(src_in),
        .I3(\rd_addr_reg[2]_7 ),
        .I4(\ier_reg[21] [1]),
        .I5(\rd_addr_reg[2]_8 ),
        .O(\s_axi_rdata[19]_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[19]_i_2 
       (.I0(spkt_fifo_rdata[19]),
        .I1(\img_info1_vc2_reg[23] [19]),
        .I2(\img_info1_vc3_reg[23] [17]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[19]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF0C080400)) 
    \s_axi_rdata[19]_i_4 
       (.I0(Q[1]),
        .I1(Q[4]),
        .I2(Q[0]),
        .I3(\img_info1_vc0_reg[19] ),
        .I4(\img_info1_vc1_reg[19] ),
        .I5(\s_axi_rdata[19]_i_12_n_0 ),
        .O(\s_axi_rdata[19]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEAAAAAAAAAAAA)) 
    \s_axi_rdata[1]_i_1 
       (.I0(\s_axi_rdata[1]_i_2_n_0 ),
        .I1(\rd_addr_reg[2]_1 ),
        .I2(\rd_addr_reg[2]_2 ),
        .I3(\syncstages_ff_reg[1][1]_0 ),
        .I4(\rd_addr_reg[4] ),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata_reg[23] [1]));
  LUT6 #(
    .INIT(64'hFFFF541054105410)) 
    \s_axi_rdata[1]_i_2 
       (.I0(\rd_addr_reg[4] ),
        .I1(\rd_addr_reg[3]_1 ),
        .I2(\s_axi_rdata[1]_i_6_n_0 ),
        .I3(\img_info1_vc3_reg[1] ),
        .I4(\syncstages_ff_reg[1][1] [0]),
        .I5(\core_config_reg[1] ),
        .O(\s_axi_rdata[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF000CCAA)) 
    \s_axi_rdata[1]_i_6 
       (.I0(spkt_fifo_rdata[1]),
        .I1(\img_info1_vc2_reg[23] [1]),
        .I2(\img_info2_vc2_reg[5] [1]),
        .I3(Q[4]),
        .I4(Q[0]),
        .O(\s_axi_rdata[1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \s_axi_rdata[20]_i_1 
       (.I0(\s_axi_rdata[20]_i_2_n_0 ),
        .I1(\rd_addr_reg[4] ),
        .I2(\core_config_reg[1] ),
        .I3(lp_count_all[4]),
        .I4(\rd_addr_reg[3]_3 ),
        .I5(\rd_addr_reg[4]_0 ),
        .O(\s_axi_rdata_reg[23] [20]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[20]_i_2 
       (.I0(spkt_fifo_rdata[20]),
        .I1(\img_info1_vc2_reg[23] [20]),
        .I2(\img_info1_vc3_reg[23] [18]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[20]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \s_axi_rdata[21]_i_1 
       (.I0(\s_axi_rdata[21]_i_2_n_0 ),
        .I1(\rd_addr_reg[4] ),
        .I2(\core_config_reg[1] ),
        .I3(lp_count_all[5]),
        .I4(\rd_addr_reg[3]_4 ),
        .I5(\rd_addr_reg[4]_0 ),
        .O(\s_axi_rdata_reg[23] [21]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[21]_i_2 
       (.I0(spkt_fifo_rdata[21]),
        .I1(\img_info1_vc2_reg[23] [21]),
        .I2(\img_info1_vc3_reg[23] [19]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[21]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \s_axi_rdata[22]_i_1 
       (.I0(\s_axi_rdata[22]_i_2_n_0 ),
        .I1(\rd_addr_reg[4] ),
        .I2(\core_config_reg[1] ),
        .I3(lp_count_all[6]),
        .I4(\rd_addr_reg[3]_5 ),
        .I5(\rd_addr_reg[4]_0 ),
        .O(\s_axi_rdata_reg[23] [22]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[22]_i_2 
       (.I0(spkt_fifo_rdata[22]),
        .I1(\img_info1_vc2_reg[23] [22]),
        .I2(\img_info1_vc3_reg[23] [20]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[22]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[23]_i_2 
       (.I0(spkt_fifo_rdata[23]),
        .I1(\img_info1_vc2_reg[23] [23]),
        .I2(\img_info1_vc3_reg[23] [21]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[23]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF8080FF80)) 
    \s_axi_rdata[2]_i_1 
       (.I0(\s_axi_rdata[2]_i_2_n_0 ),
        .I1(Q[3]),
        .I2(Q[2]),
        .I3(\core_config_reg[1] ),
        .I4(spkt_fifo_empty),
        .I5(\rd_addr_reg[4]_1 ),
        .O(\s_axi_rdata_reg[23] [2]));
  LUT6 #(
    .INIT(64'hF0CC0000AAAAAAAA)) 
    \s_axi_rdata[2]_i_2 
       (.I0(\s_axi_rdata[2]_i_4_n_0 ),
        .I1(\img_info1_vc3_reg[23] [0]),
        .I2(\img_info2_vc3_reg[5] [0]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[2]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF000CCAA)) 
    \s_axi_rdata[2]_i_4 
       (.I0(spkt_fifo_rdata[2]),
        .I1(\img_info1_vc2_reg[23] [2]),
        .I2(\img_info2_vc2_reg[5] [2]),
        .I3(Q[4]),
        .I4(Q[0]),
        .O(\s_axi_rdata[2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFDDDFDDDFDDDFCCC)) 
    \s_axi_rdata[3]_i_1 
       (.I0(Q[2]),
        .I1(\s_axi_rdata[3]_i_2_n_0 ),
        .I2(\core_config_reg[1] ),
        .I3(\syncstages_ff_reg[1][1] [1]),
        .I4(\LX_INFO_GEN[1].lx_info_reg[1][3] ),
        .I5(\rd_addr_reg[2] ),
        .O(\s_axi_rdata_reg[23] [3]));
  LUT6 #(
    .INIT(64'h00000000FFFFF888)) 
    \s_axi_rdata[3]_i_2 
       (.I0(\rd_addr_reg[2]_9 ),
        .I1(\img_info2_vc3_reg[5] [1]),
        .I2(\img_info1_vc3_reg[23] [1]),
        .I3(\rd_addr_reg[2]_10 ),
        .I4(\s_axi_rdata[3]_i_6_n_0 ),
        .I5(\rd_addr_reg[4] ),
        .O(\s_axi_rdata[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00000000D591C480)) 
    \s_axi_rdata[3]_i_6 
       (.I0(Q[0]),
        .I1(Q[4]),
        .I2(\img_info2_vc2_reg[5] [3]),
        .I3(\img_info1_vc2_reg[23] [3]),
        .I4(spkt_fifo_rdata[3]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[3]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFE00FFFFFE000000)) 
    \s_axi_rdata[4]_i_1 
       (.I0(\rd_addr_reg[2]_3 ),
        .I1(\rd_addr_reg[2]_4 ),
        .I2(\LX_INFO_GEN[1].lx_info_reg[1][4] ),
        .I3(\rd_addr_reg[3]_1 ),
        .I4(\rd_addr_reg[4] ),
        .I5(\s_axi_rdata[4]_i_5_n_0 ),
        .O(\s_axi_rdata_reg[23] [4]));
  LUT6 #(
    .INIT(64'hF0CC0000AAAAAAAA)) 
    \s_axi_rdata[4]_i_5 
       (.I0(\s_axi_rdata[4]_i_7_n_0 ),
        .I1(\img_info1_vc3_reg[23] [2]),
        .I2(\img_info2_vc3_reg[5] [2]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[4]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hF000CCAA)) 
    \s_axi_rdata[4]_i_7 
       (.I0(spkt_fifo_rdata[4]),
        .I1(\img_info1_vc2_reg[23] [4]),
        .I2(\img_info2_vc2_reg[5] [4]),
        .I3(Q[4]),
        .I4(Q[0]),
        .O(\s_axi_rdata[4]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFE00FFFFFE000000)) 
    \s_axi_rdata[5]_i_1 
       (.I0(\rd_addr_reg[2]_5 ),
        .I1(\rd_addr_reg[2]_6 ),
        .I2(\LX_INFO_GEN[1].lx_info_reg[1][5] ),
        .I3(\rd_addr_reg[3]_1 ),
        .I4(\rd_addr_reg[4] ),
        .I5(\s_axi_rdata[5]_i_6_n_0 ),
        .O(\s_axi_rdata_reg[23] [5]));
  LUT6 #(
    .INIT(64'hF0CC0000AAAAAAAA)) 
    \s_axi_rdata[5]_i_6 
       (.I0(\s_axi_rdata[5]_i_9_n_0 ),
        .I1(\img_info1_vc3_reg[23] [3]),
        .I2(\img_info2_vc3_reg[5] [3]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[5]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'hF000CCAA)) 
    \s_axi_rdata[5]_i_9 
       (.I0(spkt_fifo_rdata[5]),
        .I1(\img_info1_vc2_reg[23] [5]),
        .I2(\img_info2_vc2_reg[5] [5]),
        .I3(Q[4]),
        .I4(Q[0]),
        .O(\s_axi_rdata[5]_i_9_n_0 ));
  LUT5 #(
    .INIT(32'hFE000E00)) 
    \s_axi_rdata[6]_i_1 
       (.I0(\img_info1_vc1_reg[6] ),
        .I1(\HSC2R_CDC[6].hsc2r_vld_out_reg[6] ),
        .I2(Q[2]),
        .I3(Q[3]),
        .I4(\s_axi_rdata[6]_i_4_n_0 ),
        .O(\s_axi_rdata_reg[23] [6]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[6]_i_4 
       (.I0(spkt_fifo_rdata[6]),
        .I1(\img_info1_vc2_reg[23] [6]),
        .I2(\img_info1_vc3_reg[23] [4]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[6]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFE000E00)) 
    \s_axi_rdata[7]_i_1 
       (.I0(\img_info1_vc1_reg[7] ),
        .I1(\HSC2R_CDC[7].hsc2r_vld_out_reg[7] ),
        .I2(Q[2]),
        .I3(Q[3]),
        .I4(\s_axi_rdata[7]_i_4_n_0 ),
        .O(\s_axi_rdata_reg[23] [7]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[7]_i_4 
       (.I0(spkt_fifo_rdata[7]),
        .I1(\img_info1_vc2_reg[23] [7]),
        .I2(\img_info1_vc3_reg[23] [5]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[7]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFE000E00)) 
    \s_axi_rdata[8]_i_1 
       (.I0(\img_info1_vc1_reg[8] ),
        .I1(\HSC2R_CDC[8].hsc2r_vld_out_reg[8] ),
        .I2(Q[2]),
        .I3(Q[3]),
        .I4(\s_axi_rdata[8]_i_4_n_0 ),
        .O(\s_axi_rdata_reg[23] [8]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[8]_i_4 
       (.I0(spkt_fifo_rdata[8]),
        .I1(\img_info1_vc2_reg[23] [8]),
        .I2(\img_info1_vc3_reg[23] [6]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[8]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFE000E00)) 
    \s_axi_rdata[9]_i_1 
       (.I0(\img_info1_vc1_reg[9] ),
        .I1(\HSC2R_CDC[9].hsc2r_vld_out_reg[9] ),
        .I2(Q[2]),
        .I3(Q[3]),
        .I4(\s_axi_rdata[9]_i_4_n_0 ),
        .O(\s_axi_rdata_reg[23] [9]));
  LUT6 #(
    .INIT(64'h00F0000000CC00AA)) 
    \s_axi_rdata[9]_i_4 
       (.I0(spkt_fifo_rdata[9]),
        .I1(\img_info1_vc2_reg[23] [9]),
        .I2(\img_info1_vc3_reg[23] [7]),
        .I3(Q[0]),
        .I4(Q[4]),
        .I5(\rd_addr_reg[3]_1 ),
        .O(\s_axi_rdata[9]_i_4_n_0 ));
  MUXF7 \s_axi_rdata_reg[23]_i_1 
       (.I0(\s_axi_rdata[23]_i_2_n_0 ),
        .I1(\img_info1_vc0_reg[23] ),
        .O(\s_axi_rdata_reg[23] [23]),
        .S(\rd_addr_reg[4] ));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b0" *) 
  (* RST_ACTIVE_HIGH = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_async_rst__parameterized0 xpm_arst_03
       (.dest_arst(rstn_o),
        .dest_clk(m_axis_aclk),
        .src_arst(xpm_arst_03_i_1_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    xpm_arst_03_i_1
       (.I0(m_axis_aresetn),
        .I1(dest_out),
        .O(xpm_arst_03_i_1_n_0));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_isr_cdc" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_isr_cdc
   (dest_out,
    dest_pulse,
    lx_info_all,
    cl_info_all,
    p_0_in19_in,
    p_0_in15_in,
    p_0_in14_in,
    p_0_in13_in,
    p_0_in12_in,
    p_0_in11_in,
    p_0_in10_in,
    p_0_in9_in,
    p_0_in,
    isr_o,
    \isr_i_reg[31]_0 ,
    m_axis_aclk,
    src_in,
    s_axi_aclk,
    Q,
    wc_err,
    srst,
    SS,
    dl0_errcontrol,
    dl0_erresc,
    dl0_rxulpmesc,
    dl0_stopstate,
    dl1_errcontrol,
    dl1_erresc,
    dl1_rxulpmesc,
    dl1_stopstate,
    dl2_errcontrol,
    dl2_erresc,
    dl2_rxulpmesc,
    dl2_stopstate,
    dl3_errcontrol,
    dl3_erresc,
    dl3_rxulpmesc,
    dl3_stopstate,
    cl_rxulpsclknot,
    cl_stopstate,
    reg_status,
    \FRAME_RCVD_GEN[1].frame_rcvd_i_reg[1] ,
    soft_rst,
    D,
    s_axi_wdata,
    wr2_isr,
    SR,
    m_axis_aresetn,
    pkt_valid,
    dout,
    pkt_rdvld_reg,
    diwc_valid,
    \diwc_corrected_reg[4] ,
    CO,
    crc_done,
    \errframedata_d1_reg[3] ,
    p_0_in_0,
    \ERR_FRAME_DATA[2].errframedata_reg[2] ,
    \ERR_FRAME_DATA[1].errframedata_reg[1] ,
    \ERR_FRAME_DATA[0].errframedata_reg[0] ,
    phecc_done);
  output [1:0]dest_out;
  output dest_pulse;
  output [7:0]lx_info_all;
  output [1:0]cl_info_all;
  output p_0_in19_in;
  output p_0_in15_in;
  output p_0_in14_in;
  output p_0_in13_in;
  output p_0_in12_in;
  output p_0_in11_in;
  output p_0_in10_in;
  output p_0_in9_in;
  output p_0_in;
  output [18:0]isr_o;
  output [13:0]\isr_i_reg[31]_0 ;
  input m_axis_aclk;
  input [1:0]src_in;
  input s_axi_aclk;
  input [1:0]Q;
  input wc_err;
  input srst;
  input [0:0]SS;
  input dl0_errcontrol;
  input dl0_erresc;
  input dl0_rxulpmesc;
  input dl0_stopstate;
  input dl1_errcontrol;
  input dl1_erresc;
  input dl1_rxulpmesc;
  input dl1_stopstate;
  input dl2_errcontrol;
  input dl2_erresc;
  input dl2_rxulpmesc;
  input dl2_stopstate;
  input dl3_errcontrol;
  input dl3_erresc;
  input dl3_rxulpmesc;
  input dl3_stopstate;
  input cl_rxulpsclknot;
  input cl_stopstate;
  input [15:0]reg_status;
  input [0:0]\FRAME_RCVD_GEN[1].frame_rcvd_i_reg[1] ;
  input soft_rst;
  input [1:0]D;
  input [21:0]s_axi_wdata;
  input wr2_isr;
  input [0:0]SR;
  input m_axis_aresetn;
  input pkt_valid;
  input [4:0]dout;
  input pkt_rdvld_reg;
  input diwc_valid;
  input \diwc_corrected_reg[4] ;
  input [0:0]CO;
  input crc_done;
  input [3:0]\errframedata_d1_reg[3] ;
  input p_0_in_0;
  input \ERR_FRAME_DATA[2].errframedata_reg[2] ;
  input \ERR_FRAME_DATA[1].errframedata_reg[1] ;
  input \ERR_FRAME_DATA[0].errframedata_reg[0] ;
  input phecc_done;

  wire [0:0]CO;
  wire [1:0]D;
  wire \ERR_FRAME_DATA[0].errframedata_reg[0] ;
  wire \ERR_FRAME_DATA[1].errframedata_reg[1] ;
  wire \ERR_FRAME_DATA[2].errframedata_reg[2] ;
  wire [0:0]\FRAME_RCVD_GEN[1].frame_rcvd_i_reg[1] ;
  wire \HSC2R_CDC[0].hsc2r_send[0]_i_1_n_0 ;
  wire \HSC2R_CDC[10].hsc2r_send[10]_i_1_n_0 ;
  wire \HSC2R_CDC[11].hsc2r_send[11]_i_1_n_0 ;
  wire \HSC2R_CDC[12].hsc2r_send[12]_i_1_n_0 ;
  wire \HSC2R_CDC[13].hsc2r_send[13]_i_1_n_0 ;
  wire \HSC2R_CDC[14].hsc2r_send[14]_i_1_n_0 ;
  wire \HSC2R_CDC[15].hsc2r_send[15]_i_1_n_0 ;
  wire \HSC2R_CDC[1].hsc2r_send[1]_i_1_n_0 ;
  wire \HSC2R_CDC[20].hsc2r_send[20]_i_1_n_0 ;
  wire \HSC2R_CDC[2].hsc2r_send[2]_i_1_n_0 ;
  wire \HSC2R_CDC[3].hsc2r_send[3]_i_1_n_0 ;
  wire \HSC2R_CDC[4].hsc2r_send[4]_i_1_n_0 ;
  wire \HSC2R_CDC[5].hsc2r_send[5]_i_1_n_0 ;
  wire \HSC2R_CDC[6].hsc2r_send[6]_i_1_n_0 ;
  wire \HSC2R_CDC[7].hsc2r_send[7]_i_1_n_0 ;
  wire \HSC2R_CDC[8].hsc2r_send[8]_i_1_n_0 ;
  wire \HSC2R_CDC[9].hsc2r_send[9]_i_1_n_0 ;
  wire \PPI_DL_ASYNC[10].xpm_single_dl_sb_n_0 ;
  wire \PPI_DL_ASYNC[11].xpm_single_dl_sb_n_0 ;
  wire \PPI_DL_ASYNC[12].xpm_single_dl_sb_n_0 ;
  wire \PPI_DL_ASYNC[13].xpm_single_dl_sb_n_0 ;
  wire \PPI_DL_ASYNC[14].xpm_single_dl_sb_n_0 ;
  wire \PPI_DL_ASYNC[15].xpm_single_dl_sb_n_0 ;
  wire \PPI_DL_ASYNC[8].xpm_single_dl_sb_n_0 ;
  wire \PPI_DL_ASYNC[9].xpm_single_dl_sb_n_0 ;
  wire [1:0]Q;
  wire [0:0]SR;
  wire [0:0]SS;
  wire [1:0]cl_info_all;
  wire cl_rxulpsclknot;
  wire cl_stopstate;
  wire crc_done;
  wire [1:0]dest_out;
  wire dest_pulse;
  wire \diwc_corrected_reg[4] ;
  wire diwc_valid;
  wire dl0_errcontrol;
  wire dl0_erresc;
  wire dl0_rxulpmesc;
  wire dl0_stopstate;
  wire dl1_errcontrol;
  wire dl1_erresc;
  wire dl1_rxulpmesc;
  wire dl1_stopstate;
  wire dl2_errcontrol;
  wire dl2_erresc;
  wire dl2_rxulpmesc;
  wire dl2_stopstate;
  wire dl3_errcontrol;
  wire dl3_erresc;
  wire dl3_rxulpmesc;
  wire dl3_stopstate;
  wire [4:0]dout;
  wire ecc_rcv;
  wire ecc_send;
  wire ecc_send_i_1_n_0;
  wire ecc_vld;
  wire ecc_vld_i;
  wire [1:0]ecc_vld_out;
  wire \ecc_vld_out[0]_i_1_n_0 ;
  wire \ecc_vld_out[1]_i_1_n_0 ;
  wire [1:0]ecc_vld_out_i;
  wire [3:0]\errframedata_d1_reg[3] ;
  wire hsc2r_rcv_0;
  wire hsc2r_rcv_1;
  wire hsc2r_rcv_10;
  wire hsc2r_rcv_11;
  wire hsc2r_rcv_12;
  wire hsc2r_rcv_13;
  wire hsc2r_rcv_14;
  wire hsc2r_rcv_15;
  wire hsc2r_rcv_16;
  wire hsc2r_rcv_17;
  wire hsc2r_rcv_18;
  wire hsc2r_rcv_19;
  wire hsc2r_rcv_2;
  wire hsc2r_rcv_20;
  wire hsc2r_rcv_3;
  wire hsc2r_rcv_4;
  wire hsc2r_rcv_5;
  wire hsc2r_rcv_6;
  wire hsc2r_rcv_7;
  wire hsc2r_rcv_8;
  wire hsc2r_rcv_9;
  wire [20:0]hsc2r_send;
  wire hsc2r_vld_i_0;
  wire hsc2r_vld_i_1;
  wire hsc2r_vld_i_10;
  wire hsc2r_vld_i_11;
  wire hsc2r_vld_i_2;
  wire hsc2r_vld_i_20;
  wire hsc2r_vld_i_3;
  wire hsc2r_vld_i_4;
  wire hsc2r_vld_i_5;
  wire hsc2r_vld_i_6;
  wire hsc2r_vld_i_7;
  wire hsc2r_vld_i_8;
  wire hsc2r_vld_i_9;
  wire isr_0;
  wire [17:0]isr_i;
  wire [13:0]\isr_i_reg[31]_0 ;
  wire [18:0]isr_o;
  wire [7:0]lx_info_all;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire p_0_in;
  wire p_0_in10_in;
  wire p_0_in11_in;
  wire p_0_in12_in;
  wire p_0_in13_in;
  wire p_0_in14_in;
  wire p_0_in15_in;
  wire p_0_in16_in;
  wire p_0_in17_in;
  wire p_0_in18_in;
  wire p_0_in19_in;
  wire p_0_in9_in;
  wire p_0_in_0;
  wire [31:0]p_1_in;
  wire phecc_done;
  wire pkt_rdvld_reg;
  wire pkt_valid;
  wire [15:0]reg_status;
  wire s_axi_aclk;
  wire [21:0]s_axi_wdata;
  wire soft_rst;
  wire [1:0]src_in;
  wire srst;
  wire wc_err;
  wire wr2_isr;
  wire [0:0]\NLW_HSC2R_CDC[0].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[10].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[11].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire \NLW_HSC2R_CDC[12].hsc2r_bus_cdc_dest_req_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[12].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire \NLW_HSC2R_CDC[13].hsc2r_bus_cdc_dest_req_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[13].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire \NLW_HSC2R_CDC[14].hsc2r_bus_cdc_dest_req_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[14].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire \NLW_HSC2R_CDC[15].hsc2r_bus_cdc_dest_req_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[15].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire \NLW_HSC2R_CDC[16].hsc2r_bus_cdc_dest_req_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[16].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire \NLW_HSC2R_CDC[17].hsc2r_bus_cdc_dest_req_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[17].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire \NLW_HSC2R_CDC[18].hsc2r_bus_cdc_dest_req_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[18].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire \NLW_HSC2R_CDC[19].hsc2r_bus_cdc_dest_req_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[19].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[1].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[20].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[2].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[3].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[4].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[5].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[6].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[7].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[8].hsc2r_bus_cdc_dest_out_UNCONNECTED ;
  wire [0:0]\NLW_HSC2R_CDC[9].hsc2r_bus_cdc_dest_out_UNCONNECTED ;

  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__1 \HSC2R_CDC[0].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[0].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_0),
        .src_clk(m_axis_aclk),
        .src_in(reg_status[0]),
        .src_rcv(hsc2r_rcv_0),
        .src_send(hsc2r_send[0]));
  LUT5 #(
    .INIT(32'h0000AE00)) 
    \HSC2R_CDC[0].hsc2r_send[0]_i_1 
       (.I0(hsc2r_send[0]),
        .I1(\errframedata_d1_reg[3] [0]),
        .I2(\ERR_FRAME_DATA[0].errframedata_reg[0] ),
        .I3(m_axis_aresetn),
        .I4(hsc2r_rcv_0),
        .O(\HSC2R_CDC[0].hsc2r_send[0]_i_1_n_0 ));
  FDRE \HSC2R_CDC[0].hsc2r_send_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\HSC2R_CDC[0].hsc2r_send[0]_i_1_n_0 ),
        .Q(hsc2r_send[0]),
        .R(1'b0));
  FDRE \HSC2R_CDC[0].hsc2r_vld_out_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_0),
        .Q(isr_0),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__11 \HSC2R_CDC[10].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[10].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_10),
        .src_clk(m_axis_aclk),
        .src_in(reg_status[10]),
        .src_rcv(hsc2r_rcv_10),
        .src_send(hsc2r_send[10]));
  LUT4 #(
    .INIT(16'h00E0)) 
    \HSC2R_CDC[10].hsc2r_send[10]_i_1 
       (.I0(hsc2r_send[10]),
        .I1(reg_status[10]),
        .I2(m_axis_aresetn),
        .I3(hsc2r_rcv_10),
        .O(\HSC2R_CDC[10].hsc2r_send[10]_i_1_n_0 ));
  FDRE \HSC2R_CDC[10].hsc2r_send_reg[10] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\HSC2R_CDC[10].hsc2r_send[10]_i_1_n_0 ),
        .Q(hsc2r_send[10]),
        .R(1'b0));
  FDRE \HSC2R_CDC[10].hsc2r_vld_out_reg[10] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_10),
        .Q(p_0_in10_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__12 \HSC2R_CDC[11].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[11].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_11),
        .src_clk(m_axis_aclk),
        .src_in(reg_status[11]),
        .src_rcv(hsc2r_rcv_11),
        .src_send(hsc2r_send[11]));
  LUT6 #(
    .INIT(64'h00000000FAEA0000)) 
    \HSC2R_CDC[11].hsc2r_send[11]_i_1 
       (.I0(hsc2r_send[11]),
        .I1(dout[3]),
        .I2(pkt_rdvld_reg),
        .I3(dout[1]),
        .I4(m_axis_aresetn),
        .I5(hsc2r_rcv_11),
        .O(\HSC2R_CDC[11].hsc2r_send[11]_i_1_n_0 ));
  FDRE \HSC2R_CDC[11].hsc2r_send_reg[11] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\HSC2R_CDC[11].hsc2r_send[11]_i_1_n_0 ),
        .Q(hsc2r_send[11]),
        .R(1'b0));
  FDRE \HSC2R_CDC[11].hsc2r_vld_out_reg[11] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_11),
        .Q(p_0_in9_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__13 \HSC2R_CDC[12].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[12].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(\NLW_HSC2R_CDC[12].hsc2r_bus_cdc_dest_req_UNCONNECTED ),
        .src_clk(m_axis_aclk),
        .src_in(reg_status[12]),
        .src_rcv(hsc2r_rcv_12),
        .src_send(hsc2r_send[12]));
  LUT6 #(
    .INIT(64'h00000000EAAA0000)) 
    \HSC2R_CDC[12].hsc2r_send[12]_i_1 
       (.I0(hsc2r_send[12]),
        .I1(pkt_valid),
        .I2(dout[4]),
        .I3(dout[0]),
        .I4(m_axis_aresetn),
        .I5(hsc2r_rcv_12),
        .O(\HSC2R_CDC[12].hsc2r_send[12]_i_1_n_0 ));
  FDRE \HSC2R_CDC[12].hsc2r_send_reg[12] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\HSC2R_CDC[12].hsc2r_send[12]_i_1_n_0 ),
        .Q(hsc2r_send[12]),
        .R(1'b0));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__14 \HSC2R_CDC[13].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[13].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(\NLW_HSC2R_CDC[13].hsc2r_bus_cdc_dest_req_UNCONNECTED ),
        .src_clk(m_axis_aclk),
        .src_in(reg_status[13]),
        .src_rcv(hsc2r_rcv_13),
        .src_send(hsc2r_send[13]));
  LUT6 #(
    .INIT(64'h00000000EAAA0000)) 
    \HSC2R_CDC[13].hsc2r_send[13]_i_1 
       (.I0(hsc2r_send[13]),
        .I1(pkt_valid),
        .I2(dout[4]),
        .I3(dout[1]),
        .I4(m_axis_aresetn),
        .I5(hsc2r_rcv_13),
        .O(\HSC2R_CDC[13].hsc2r_send[13]_i_1_n_0 ));
  FDRE \HSC2R_CDC[13].hsc2r_send_reg[13] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\HSC2R_CDC[13].hsc2r_send[13]_i_1_n_0 ),
        .Q(hsc2r_send[13]),
        .R(1'b0));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__15 \HSC2R_CDC[14].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[14].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(\NLW_HSC2R_CDC[14].hsc2r_bus_cdc_dest_req_UNCONNECTED ),
        .src_clk(m_axis_aclk),
        .src_in(reg_status[14]),
        .src_rcv(hsc2r_rcv_14),
        .src_send(hsc2r_send[14]));
  LUT6 #(
    .INIT(64'h00000000EAAA0000)) 
    \HSC2R_CDC[14].hsc2r_send[14]_i_1 
       (.I0(hsc2r_send[14]),
        .I1(pkt_valid),
        .I2(dout[4]),
        .I3(dout[2]),
        .I4(m_axis_aresetn),
        .I5(hsc2r_rcv_14),
        .O(\HSC2R_CDC[14].hsc2r_send[14]_i_1_n_0 ));
  FDRE \HSC2R_CDC[14].hsc2r_send_reg[14] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\HSC2R_CDC[14].hsc2r_send[14]_i_1_n_0 ),
        .Q(hsc2r_send[14]),
        .R(1'b0));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__16 \HSC2R_CDC[15].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[15].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(\NLW_HSC2R_CDC[15].hsc2r_bus_cdc_dest_req_UNCONNECTED ),
        .src_clk(m_axis_aclk),
        .src_in(reg_status[15]),
        .src_rcv(hsc2r_rcv_15),
        .src_send(hsc2r_send[15]));
  LUT6 #(
    .INIT(64'h00000000EAAA0000)) 
    \HSC2R_CDC[15].hsc2r_send[15]_i_1 
       (.I0(hsc2r_send[15]),
        .I1(pkt_valid),
        .I2(dout[4]),
        .I3(dout[3]),
        .I4(m_axis_aresetn),
        .I5(hsc2r_rcv_15),
        .O(\HSC2R_CDC[15].hsc2r_send[15]_i_1_n_0 ));
  FDRE \HSC2R_CDC[15].hsc2r_send_reg[15] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\HSC2R_CDC[15].hsc2r_send[15]_i_1_n_0 ),
        .Q(hsc2r_send[15]),
        .R(1'b0));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__17 \HSC2R_CDC[16].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[16].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(\NLW_HSC2R_CDC[16].hsc2r_bus_cdc_dest_req_UNCONNECTED ),
        .src_clk(m_axis_aclk),
        .src_in(1'b0),
        .src_rcv(hsc2r_rcv_16),
        .src_send(1'b0));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__18 \HSC2R_CDC[17].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[17].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(\NLW_HSC2R_CDC[17].hsc2r_bus_cdc_dest_req_UNCONNECTED ),
        .src_clk(m_axis_aclk),
        .src_in(1'b0),
        .src_rcv(hsc2r_rcv_17),
        .src_send(1'b0));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__19 \HSC2R_CDC[18].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[18].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(\NLW_HSC2R_CDC[18].hsc2r_bus_cdc_dest_req_UNCONNECTED ),
        .src_clk(m_axis_aclk),
        .src_in(1'b0),
        .src_rcv(hsc2r_rcv_18),
        .src_send(1'b0));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__20 \HSC2R_CDC[19].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[19].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(\NLW_HSC2R_CDC[19].hsc2r_bus_cdc_dest_req_UNCONNECTED ),
        .src_clk(m_axis_aclk),
        .src_in(1'b0),
        .src_rcv(hsc2r_rcv_19),
        .src_send(1'b0));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__2 \HSC2R_CDC[1].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[1].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_1),
        .src_clk(m_axis_aclk),
        .src_in(reg_status[1]),
        .src_rcv(hsc2r_rcv_1),
        .src_send(hsc2r_send[1]));
  LUT4 #(
    .INIT(16'h00E0)) 
    \HSC2R_CDC[1].hsc2r_send[1]_i_1 
       (.I0(hsc2r_send[1]),
        .I1(reg_status[1]),
        .I2(m_axis_aresetn),
        .I3(hsc2r_rcv_1),
        .O(\HSC2R_CDC[1].hsc2r_send[1]_i_1_n_0 ));
  FDRE \HSC2R_CDC[1].hsc2r_send_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\HSC2R_CDC[1].hsc2r_send[1]_i_1_n_0 ),
        .Q(hsc2r_send[1]),
        .R(1'b0));
  FDRE \HSC2R_CDC[1].hsc2r_vld_out_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_1),
        .Q(p_0_in19_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake \HSC2R_CDC[20].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[20].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_20),
        .src_clk(m_axis_aclk),
        .src_in(\FRAME_RCVD_GEN[1].frame_rcvd_i_reg[1] ),
        .src_rcv(hsc2r_rcv_20),
        .src_send(hsc2r_send[20]));
  LUT4 #(
    .INIT(16'h00E0)) 
    \HSC2R_CDC[20].hsc2r_send[20]_i_1 
       (.I0(hsc2r_send[20]),
        .I1(\FRAME_RCVD_GEN[1].frame_rcvd_i_reg[1] ),
        .I2(m_axis_aresetn),
        .I3(hsc2r_rcv_20),
        .O(\HSC2R_CDC[20].hsc2r_send[20]_i_1_n_0 ));
  FDRE \HSC2R_CDC[20].hsc2r_send_reg[20] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\HSC2R_CDC[20].hsc2r_send[20]_i_1_n_0 ),
        .Q(hsc2r_send[20]),
        .R(1'b0));
  FDRE \HSC2R_CDC[20].hsc2r_vld_out_reg[20] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_20),
        .Q(p_0_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__3 \HSC2R_CDC[2].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[2].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_2),
        .src_clk(m_axis_aclk),
        .src_in(reg_status[2]),
        .src_rcv(hsc2r_rcv_2),
        .src_send(hsc2r_send[2]));
  LUT5 #(
    .INIT(32'h0000AE00)) 
    \HSC2R_CDC[2].hsc2r_send[2]_i_1 
       (.I0(hsc2r_send[2]),
        .I1(\errframedata_d1_reg[3] [1]),
        .I2(\ERR_FRAME_DATA[1].errframedata_reg[1] ),
        .I3(m_axis_aresetn),
        .I4(hsc2r_rcv_2),
        .O(\HSC2R_CDC[2].hsc2r_send[2]_i_1_n_0 ));
  FDRE \HSC2R_CDC[2].hsc2r_send_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\HSC2R_CDC[2].hsc2r_send[2]_i_1_n_0 ),
        .Q(hsc2r_send[2]),
        .R(1'b0));
  FDRE \HSC2R_CDC[2].hsc2r_vld_out_reg[2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_2),
        .Q(p_0_in18_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__4 \HSC2R_CDC[3].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[3].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_3),
        .src_clk(m_axis_aclk),
        .src_in(reg_status[3]),
        .src_rcv(hsc2r_rcv_3),
        .src_send(hsc2r_send[3]));
  LUT4 #(
    .INIT(16'h00E0)) 
    \HSC2R_CDC[3].hsc2r_send[3]_i_1 
       (.I0(hsc2r_send[3]),
        .I1(reg_status[3]),
        .I2(m_axis_aresetn),
        .I3(hsc2r_rcv_3),
        .O(\HSC2R_CDC[3].hsc2r_send[3]_i_1_n_0 ));
  FDRE \HSC2R_CDC[3].hsc2r_send_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\HSC2R_CDC[3].hsc2r_send[3]_i_1_n_0 ),
        .Q(hsc2r_send[3]),
        .R(1'b0));
  FDRE \HSC2R_CDC[3].hsc2r_vld_out_reg[3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_3),
        .Q(p_0_in17_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__5 \HSC2R_CDC[4].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[4].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_4),
        .src_clk(m_axis_aclk),
        .src_in(reg_status[4]),
        .src_rcv(hsc2r_rcv_4),
        .src_send(hsc2r_send[4]));
  LUT5 #(
    .INIT(32'h0000AE00)) 
    \HSC2R_CDC[4].hsc2r_send[4]_i_1 
       (.I0(hsc2r_send[4]),
        .I1(\errframedata_d1_reg[3] [2]),
        .I2(\ERR_FRAME_DATA[2].errframedata_reg[2] ),
        .I3(m_axis_aresetn),
        .I4(hsc2r_rcv_4),
        .O(\HSC2R_CDC[4].hsc2r_send[4]_i_1_n_0 ));
  FDRE \HSC2R_CDC[4].hsc2r_send_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\HSC2R_CDC[4].hsc2r_send[4]_i_1_n_0 ),
        .Q(hsc2r_send[4]),
        .R(1'b0));
  FDRE \HSC2R_CDC[4].hsc2r_vld_out_reg[4] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_4),
        .Q(p_0_in16_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__6 \HSC2R_CDC[5].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[5].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_5),
        .src_clk(m_axis_aclk),
        .src_in(reg_status[5]),
        .src_rcv(hsc2r_rcv_5),
        .src_send(hsc2r_send[5]));
  LUT4 #(
    .INIT(16'h00E0)) 
    \HSC2R_CDC[5].hsc2r_send[5]_i_1 
       (.I0(hsc2r_send[5]),
        .I1(reg_status[5]),
        .I2(m_axis_aresetn),
        .I3(hsc2r_rcv_5),
        .O(\HSC2R_CDC[5].hsc2r_send[5]_i_1_n_0 ));
  FDRE \HSC2R_CDC[5].hsc2r_send_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\HSC2R_CDC[5].hsc2r_send[5]_i_1_n_0 ),
        .Q(hsc2r_send[5]),
        .R(1'b0));
  FDRE \HSC2R_CDC[5].hsc2r_vld_out_reg[5] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_5),
        .Q(p_0_in15_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__7 \HSC2R_CDC[6].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[6].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_6),
        .src_clk(m_axis_aclk),
        .src_in(reg_status[6]),
        .src_rcv(hsc2r_rcv_6),
        .src_send(hsc2r_send[6]));
  LUT5 #(
    .INIT(32'h0000AE00)) 
    \HSC2R_CDC[6].hsc2r_send[6]_i_1 
       (.I0(hsc2r_send[6]),
        .I1(\errframedata_d1_reg[3] [3]),
        .I2(p_0_in_0),
        .I3(m_axis_aresetn),
        .I4(hsc2r_rcv_6),
        .O(\HSC2R_CDC[6].hsc2r_send[6]_i_1_n_0 ));
  FDRE \HSC2R_CDC[6].hsc2r_send_reg[6] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\HSC2R_CDC[6].hsc2r_send[6]_i_1_n_0 ),
        .Q(hsc2r_send[6]),
        .R(1'b0));
  FDRE \HSC2R_CDC[6].hsc2r_vld_out_reg[6] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_6),
        .Q(p_0_in14_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__8 \HSC2R_CDC[7].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[7].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_7),
        .src_clk(m_axis_aclk),
        .src_in(reg_status[7]),
        .src_rcv(hsc2r_rcv_7),
        .src_send(hsc2r_send[7]));
  LUT4 #(
    .INIT(16'h00E0)) 
    \HSC2R_CDC[7].hsc2r_send[7]_i_1 
       (.I0(hsc2r_send[7]),
        .I1(reg_status[7]),
        .I2(m_axis_aresetn),
        .I3(hsc2r_rcv_7),
        .O(\HSC2R_CDC[7].hsc2r_send[7]_i_1_n_0 ));
  FDRE \HSC2R_CDC[7].hsc2r_send_reg[7] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\HSC2R_CDC[7].hsc2r_send[7]_i_1_n_0 ),
        .Q(hsc2r_send[7]),
        .R(1'b0));
  FDRE \HSC2R_CDC[7].hsc2r_vld_out_reg[7] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_7),
        .Q(p_0_in13_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__9 \HSC2R_CDC[8].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[8].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_8),
        .src_clk(m_axis_aclk),
        .src_in(reg_status[8]),
        .src_rcv(hsc2r_rcv_8),
        .src_send(hsc2r_send[8]));
  LUT5 #(
    .INIT(32'h0000AE00)) 
    \HSC2R_CDC[8].hsc2r_send[8]_i_1 
       (.I0(hsc2r_send[8]),
        .I1(diwc_valid),
        .I2(\diwc_corrected_reg[4] ),
        .I3(m_axis_aresetn),
        .I4(hsc2r_rcv_8),
        .O(\HSC2R_CDC[8].hsc2r_send[8]_i_1_n_0 ));
  FDRE \HSC2R_CDC[8].hsc2r_send_reg[8] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\HSC2R_CDC[8].hsc2r_send[8]_i_1_n_0 ),
        .Q(hsc2r_send[8]),
        .R(1'b0));
  FDRE \HSC2R_CDC[8].hsc2r_vld_out_reg[8] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_8),
        .Q(p_0_in12_in),
        .R(SS));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "1" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__xdcDup__10 \HSC2R_CDC[9].hsc2r_bus_cdc 
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(\NLW_HSC2R_CDC[9].hsc2r_bus_cdc_dest_out_UNCONNECTED [0]),
        .dest_req(hsc2r_vld_i_9),
        .src_clk(m_axis_aclk),
        .src_in(reg_status[9]),
        .src_rcv(hsc2r_rcv_9),
        .src_send(hsc2r_send[9]));
  LUT5 #(
    .INIT(32'h0000EA00)) 
    \HSC2R_CDC[9].hsc2r_send[9]_i_1 
       (.I0(hsc2r_send[9]),
        .I1(CO),
        .I2(crc_done),
        .I3(m_axis_aresetn),
        .I4(hsc2r_rcv_9),
        .O(\HSC2R_CDC[9].hsc2r_send[9]_i_1_n_0 ));
  FDRE \HSC2R_CDC[9].hsc2r_send_reg[9] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\HSC2R_CDC[9].hsc2r_send[9]_i_1_n_0 ),
        .Q(hsc2r_send[9]),
        .R(1'b0));
  FDRE \HSC2R_CDC[9].hsc2r_vld_out_reg[9] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(hsc2r_vld_i_9),
        .Q(p_0_in11_in),
        .R(SS));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__47 \PPI_CL_ASYNC[0].xpm_single_cl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(cl_info_all[0]),
        .src_clk(1'b0),
        .src_in(cl_rxulpsclknot));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__48 \PPI_CL_ASYNC[1].xpm_single_cl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(cl_info_all[1]),
        .src_clk(1'b0),
        .src_in(cl_stopstate));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__31 \PPI_DL_ASYNC[0].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[0]),
        .src_clk(1'b0),
        .src_in(dl0_errcontrol));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__41 \PPI_DL_ASYNC[10].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(\PPI_DL_ASYNC[10].xpm_single_dl_sb_n_0 ),
        .src_clk(1'b0),
        .src_in(dl2_rxulpmesc));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__42 \PPI_DL_ASYNC[11].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(\PPI_DL_ASYNC[11].xpm_single_dl_sb_n_0 ),
        .src_clk(1'b0),
        .src_in(dl2_stopstate));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__43 \PPI_DL_ASYNC[12].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(\PPI_DL_ASYNC[12].xpm_single_dl_sb_n_0 ),
        .src_clk(1'b0),
        .src_in(dl3_errcontrol));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__44 \PPI_DL_ASYNC[13].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(\PPI_DL_ASYNC[13].xpm_single_dl_sb_n_0 ),
        .src_clk(1'b0),
        .src_in(dl3_erresc));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__45 \PPI_DL_ASYNC[14].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(\PPI_DL_ASYNC[14].xpm_single_dl_sb_n_0 ),
        .src_clk(1'b0),
        .src_in(dl3_rxulpmesc));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__46 \PPI_DL_ASYNC[15].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(\PPI_DL_ASYNC[15].xpm_single_dl_sb_n_0 ),
        .src_clk(1'b0),
        .src_in(dl3_stopstate));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__32 \PPI_DL_ASYNC[1].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[1]),
        .src_clk(1'b0),
        .src_in(dl0_erresc));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__33 \PPI_DL_ASYNC[2].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[2]),
        .src_clk(1'b0),
        .src_in(dl0_rxulpmesc));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__34 \PPI_DL_ASYNC[3].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[3]),
        .src_clk(1'b0),
        .src_in(dl0_stopstate));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__35 \PPI_DL_ASYNC[4].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[4]),
        .src_clk(1'b0),
        .src_in(dl1_errcontrol));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__36 \PPI_DL_ASYNC[5].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[5]),
        .src_clk(1'b0),
        .src_in(dl1_erresc));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__37 \PPI_DL_ASYNC[6].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[6]),
        .src_clk(1'b0),
        .src_in(dl1_rxulpmesc));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__38 \PPI_DL_ASYNC[7].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(lx_info_all[7]),
        .src_clk(1'b0),
        .src_in(dl1_stopstate));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__39 \PPI_DL_ASYNC[8].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(\PPI_DL_ASYNC[8].xpm_single_dl_sb_n_0 ),
        .src_clk(1'b0),
        .src_in(dl2_errcontrol));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__40 \PPI_DL_ASYNC[9].xpm_single_dl_sb 
       (.dest_clk(s_axi_aclk),
        .dest_out(\PPI_DL_ASYNC[9].xpm_single_dl_sb_n_0 ),
        .src_clk(1'b0),
        .src_in(dl2_erresc));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "2" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__parameterized0 ecc_cdc
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(ecc_vld_out_i),
        .dest_req(ecc_vld_i),
        .src_clk(m_axis_aclk),
        .src_in(Q),
        .src_rcv(ecc_rcv),
        .src_send(ecc_send));
  LUT4 #(
    .INIT(16'h00E0)) 
    ecc_send_i_1
       (.I0(ecc_send),
        .I1(phecc_done),
        .I2(m_axis_aresetn),
        .I3(ecc_rcv),
        .O(ecc_send_i_1_n_0));
  FDRE ecc_send_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_send_i_1_n_0),
        .Q(ecc_send),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \ecc_vld_out[0]_i_1 
       (.I0(ecc_vld_i),
        .I1(ecc_vld_out_i[0]),
        .O(\ecc_vld_out[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \ecc_vld_out[1]_i_1 
       (.I0(ecc_vld_i),
        .I1(ecc_vld_out_i[1]),
        .O(\ecc_vld_out[1]_i_1_n_0 ));
  FDRE \ecc_vld_out_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\ecc_vld_out[0]_i_1_n_0 ),
        .Q(ecc_vld_out[0]),
        .R(SS));
  FDRE \ecc_vld_out_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\ecc_vld_out[1]_i_1_n_0 ),
        .Q(ecc_vld_out[1]),
        .R(SS));
  FDRE ecc_vld_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(ecc_vld_i),
        .Q(ecc_vld),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    interrupt_INST_0_i_12
       (.I0(p_0_in13_in),
        .I1(\isr_i_reg[31]_0 [3]),
        .I2(soft_rst),
        .O(isr_o[7]));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    interrupt_INST_0_i_13
       (.I0(p_0_in14_in),
        .I1(\isr_i_reg[31]_0 [2]),
        .I2(soft_rst),
        .O(isr_o[6]));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    interrupt_INST_0_i_17
       (.I0(dest_out[1]),
        .I1(\isr_i_reg[31]_0 [10]),
        .I2(soft_rst),
        .O(isr_o[17]));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    interrupt_INST_0_i_19
       (.I0(p_0_in10_in),
        .I1(\isr_i_reg[31]_0 [6]),
        .I2(soft_rst),
        .O(isr_o[11]));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    interrupt_INST_0_i_21
       (.I0(p_0_in18_in),
        .I1(isr_i[2]),
        .I2(soft_rst),
        .O(isr_o[2]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    interrupt_INST_0_i_22
       (.I0(p_0_in17_in),
        .I1(isr_i[3]),
        .I2(soft_rst),
        .O(isr_o[3]));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    interrupt_INST_0_i_24
       (.I0(dest_out[0]),
        .I1(\isr_i_reg[31]_0 [8]),
        .I2(soft_rst),
        .O(isr_o[16]));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    interrupt_INST_0_i_25
       (.I0(dest_pulse),
        .I1(\isr_i_reg[31]_0 [12]),
        .I2(soft_rst),
        .O(isr_o[18]));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    interrupt_INST_0_i_26
       (.I0(p_0_in12_in),
        .I1(\isr_i_reg[31]_0 [4]),
        .I2(soft_rst),
        .O(isr_o[8]));
  LUT5 #(
    .INIT(32'h0000FFFE)) 
    interrupt_INST_0_i_5
       (.I0(lx_info_all[3]),
        .I1(lx_info_all[7]),
        .I2(cl_info_all[1]),
        .I3(isr_i[17]),
        .I4(soft_rst),
        .O(isr_o[15]));
  LUT4 #(
    .INIT(16'h00FE)) 
    interrupt_INST_0_i_6
       (.I0(lx_info_all[2]),
        .I1(lx_info_all[6]),
        .I2(isr_i[16]),
        .I3(soft_rst),
        .O(isr_o[14]));
  LUT4 #(
    .INIT(16'h00FE)) 
    interrupt_INST_0_i_8
       (.I0(lx_info_all[1]),
        .I1(lx_info_all[5]),
        .I2(isr_i[15]),
        .I3(soft_rst),
        .O(isr_o[13]));
  LUT4 #(
    .INIT(16'h00FE)) 
    interrupt_INST_0_i_9
       (.I0(lx_info_all[0]),
        .I1(lx_info_all[4]),
        .I2(isr_i[14]),
        .I3(soft_rst),
        .O(isr_o[12]));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[0]_i_1 
       (.I0(s_axi_wdata[0]),
        .I1(isr_0),
        .I2(isr_i[0]),
        .I3(wr2_isr),
        .O(p_1_in[0]));
  LUT5 #(
    .INIT(32'hD5C0FFC0)) 
    \isr_i[10]_i_1 
       (.I0(s_axi_wdata[10]),
        .I1(ecc_vld),
        .I2(ecc_vld_out[0]),
        .I3(isr_i[10]),
        .I4(wr2_isr),
        .O(p_1_in[10]));
  LUT5 #(
    .INIT(32'hD5C0FFC0)) 
    \isr_i[11]_i_1 
       (.I0(s_axi_wdata[11]),
        .I1(ecc_vld),
        .I2(ecc_vld_out[1]),
        .I3(isr_i[11]),
        .I4(wr2_isr),
        .O(p_1_in[11]));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[12]_i_1 
       (.I0(s_axi_wdata[12]),
        .I1(p_0_in10_in),
        .I2(\isr_i_reg[31]_0 [6]),
        .I3(wr2_isr),
        .O(p_1_in[12]));
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[13]_i_1 
       (.I0(s_axi_wdata[13]),
        .I1(p_0_in9_in),
        .I2(\isr_i_reg[31]_0 [7]),
        .I3(wr2_isr),
        .O(p_1_in[13]));
  LUT5 #(
    .INIT(32'hFDFCFFFC)) 
    \isr_i[14]_i_1 
       (.I0(s_axi_wdata[14]),
        .I1(lx_info_all[0]),
        .I2(lx_info_all[4]),
        .I3(isr_i[14]),
        .I4(wr2_isr),
        .O(p_1_in[14]));
  LUT5 #(
    .INIT(32'hFDFCFFFC)) 
    \isr_i[15]_i_1 
       (.I0(s_axi_wdata[15]),
        .I1(lx_info_all[1]),
        .I2(lx_info_all[5]),
        .I3(isr_i[15]),
        .I4(wr2_isr),
        .O(p_1_in[15]));
  LUT5 #(
    .INIT(32'hFDFCFFFC)) 
    \isr_i[16]_i_1 
       (.I0(s_axi_wdata[16]),
        .I1(lx_info_all[2]),
        .I2(lx_info_all[6]),
        .I3(isr_i[16]),
        .I4(wr2_isr),
        .O(p_1_in[16]));
  LUT6 #(
    .INIT(64'hFEFFFEFEFFFFFEFE)) 
    \isr_i[17]_i_1 
       (.I0(lx_info_all[3]),
        .I1(lx_info_all[7]),
        .I2(cl_info_all[1]),
        .I3(s_axi_wdata[17]),
        .I4(isr_i[17]),
        .I5(wr2_isr),
        .O(p_1_in[17]));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[18]_i_1 
       (.I0(s_axi_wdata[18]),
        .I1(dest_out[0]),
        .I2(\isr_i_reg[31]_0 [8]),
        .I3(wr2_isr),
        .O(p_1_in[18]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[1]_i_1 
       (.I0(s_axi_wdata[1]),
        .I1(p_0_in19_in),
        .I2(\isr_i_reg[31]_0 [0]),
        .I3(wr2_isr),
        .O(p_1_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[20]_i_1 
       (.I0(s_axi_wdata[19]),
        .I1(dest_out[1]),
        .I2(\isr_i_reg[31]_0 [10]),
        .I3(wr2_isr),
        .O(p_1_in[20]));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[22]_i_1 
       (.I0(s_axi_wdata[20]),
        .I1(dest_pulse),
        .I2(\isr_i_reg[31]_0 [12]),
        .I3(wr2_isr),
        .O(p_1_in[22]));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[2]_i_1 
       (.I0(s_axi_wdata[2]),
        .I1(p_0_in18_in),
        .I2(isr_i[2]),
        .I3(wr2_isr),
        .O(p_1_in[2]));
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[31]_i_2 
       (.I0(s_axi_wdata[21]),
        .I1(p_0_in),
        .I2(\isr_i_reg[31]_0 [13]),
        .I3(wr2_isr),
        .O(p_1_in[31]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[3]_i_1 
       (.I0(s_axi_wdata[3]),
        .I1(p_0_in17_in),
        .I2(isr_i[3]),
        .I3(wr2_isr),
        .O(p_1_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[4]_i_1 
       (.I0(s_axi_wdata[4]),
        .I1(p_0_in16_in),
        .I2(isr_i[4]),
        .I3(wr2_isr),
        .O(p_1_in[4]));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[5]_i_1 
       (.I0(s_axi_wdata[5]),
        .I1(p_0_in15_in),
        .I2(\isr_i_reg[31]_0 [1]),
        .I3(wr2_isr),
        .O(p_1_in[5]));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[6]_i_1 
       (.I0(s_axi_wdata[6]),
        .I1(p_0_in14_in),
        .I2(\isr_i_reg[31]_0 [2]),
        .I3(wr2_isr),
        .O(p_1_in[6]));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[7]_i_1 
       (.I0(s_axi_wdata[7]),
        .I1(p_0_in13_in),
        .I2(\isr_i_reg[31]_0 [3]),
        .I3(wr2_isr),
        .O(p_1_in[7]));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[8]_i_1 
       (.I0(s_axi_wdata[8]),
        .I1(p_0_in12_in),
        .I2(\isr_i_reg[31]_0 [4]),
        .I3(wr2_isr),
        .O(p_1_in[8]));
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[9]_i_1 
       (.I0(s_axi_wdata[9]),
        .I1(p_0_in11_in),
        .I2(\isr_i_reg[31]_0 [5]),
        .I3(wr2_isr),
        .O(p_1_in[9]));
  FDRE \isr_i_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[0]),
        .Q(isr_i[0]),
        .R(SR));
  FDRE \isr_i_reg[10] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[10]),
        .Q(isr_i[10]),
        .R(SR));
  FDRE \isr_i_reg[11] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[11]),
        .Q(isr_i[11]),
        .R(SR));
  FDRE \isr_i_reg[12] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[12]),
        .Q(\isr_i_reg[31]_0 [6]),
        .R(SR));
  FDRE \isr_i_reg[13] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[13]),
        .Q(\isr_i_reg[31]_0 [7]),
        .R(SR));
  FDRE \isr_i_reg[14] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[14]),
        .Q(isr_i[14]),
        .R(SR));
  FDRE \isr_i_reg[15] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[15]),
        .Q(isr_i[15]),
        .R(SR));
  FDRE \isr_i_reg[16] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[16]),
        .Q(isr_i[16]),
        .R(SR));
  FDRE \isr_i_reg[17] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[17]),
        .Q(isr_i[17]),
        .R(SR));
  FDRE \isr_i_reg[18] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[18]),
        .Q(\isr_i_reg[31]_0 [8]),
        .R(SR));
  FDRE \isr_i_reg[19] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(\isr_i_reg[31]_0 [9]),
        .R(SR));
  FDRE \isr_i_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[1]),
        .Q(\isr_i_reg[31]_0 [0]),
        .R(SR));
  FDRE \isr_i_reg[20] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[20]),
        .Q(\isr_i_reg[31]_0 [10]),
        .R(SR));
  FDRE \isr_i_reg[21] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(\isr_i_reg[31]_0 [11]),
        .R(SR));
  FDRE \isr_i_reg[22] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[22]),
        .Q(\isr_i_reg[31]_0 [12]),
        .R(SR));
  FDRE \isr_i_reg[2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[2]),
        .Q(isr_i[2]),
        .R(SR));
  FDRE \isr_i_reg[31] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[31]),
        .Q(\isr_i_reg[31]_0 [13]),
        .R(SR));
  FDRE \isr_i_reg[3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[3]),
        .Q(isr_i[3]),
        .R(SR));
  FDRE \isr_i_reg[4] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[4]),
        .Q(isr_i[4]),
        .R(SR));
  FDRE \isr_i_reg[5] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[5]),
        .Q(\isr_i_reg[31]_0 [1]),
        .R(SR));
  FDRE \isr_i_reg[6] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[6]),
        .Q(\isr_i_reg[31]_0 [2]),
        .R(SR));
  FDRE \isr_i_reg[7] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[7]),
        .Q(\isr_i_reg[31]_0 [3]),
        .R(SR));
  FDRE \isr_i_reg[8] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[8]),
        .Q(\isr_i_reg[31]_0 [4]),
        .R(SR));
  FDRE \isr_i_reg[9] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(p_1_in[9]),
        .Q(\isr_i_reg[31]_0 [5]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    \s_axi_rdata[0]_i_10 
       (.I0(isr_0),
        .I1(isr_i[0]),
        .I2(soft_rst),
        .O(isr_o[0]));
  LUT4 #(
    .INIT(16'h00F8)) 
    \s_axi_rdata[10]_i_5 
       (.I0(ecc_vld),
        .I1(ecc_vld_out[0]),
        .I2(isr_i[10]),
        .I3(soft_rst),
        .O(isr_o[9]));
  LUT4 #(
    .INIT(16'h00F8)) 
    \s_axi_rdata[11]_i_5 
       (.I0(ecc_vld),
        .I1(ecc_vld_out[1]),
        .I2(isr_i[11]),
        .I3(soft_rst),
        .O(isr_o[10]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    \s_axi_rdata[1]_i_8 
       (.I0(p_0_in19_in),
        .I1(\isr_i_reg[31]_0 [0]),
        .I2(soft_rst),
        .O(isr_o[1]));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    \s_axi_rdata[4]_i_6 
       (.I0(p_0_in16_in),
        .I1(isr_i[4]),
        .I2(soft_rst),
        .O(isr_o[4]));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    \s_axi_rdata[5]_i_7 
       (.I0(p_0_in15_in),
        .I1(\isr_i_reg[31]_0 [1]),
        .I2(soft_rst),
        .O(isr_o[5]));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "2" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_array_single xpm_array_single_05
       (.dest_clk(s_axi_aclk),
        .dest_out(dest_out),
        .src_clk(m_axis_aclk),
        .src_in(src_in));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "0" *) 
  (* RST_USED = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "PULSE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_pulse__xdcDup__1 xpm_pulse_02
       (.dest_clk(s_axi_aclk),
        .dest_pulse(dest_pulse),
        .dest_rst(SS),
        .src_clk(m_axis_aclk),
        .src_pulse(wc_err),
        .src_rst(srst));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_lane_merger" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_lane_merger
   (fifos_empty,
    mst_rd_en_d1,
    \pkt_fifo_cnt_reg[0]_0 ,
    o_pkt_prcng_d1,
    wr_en,
    din,
    l0_empty,
    l1_empty,
    rd_en,
    \gpr1.dout_i_reg[0] ,
    dl0_rxbyteclkhs,
    \goreg_dm.dout_i_reg[11] ,
    \goreg_dm.dout_i_reg[11]_0 ,
    \goreg_dm.dout_i_reg[10] ,
    dout,
    empty_fwft_i_reg,
    empty,
    empty_fwft_i_reg_0,
    \goreg_dm.dout_i_reg[10]_0 ,
    \goreg_dm.dout_i_reg[10]_1 ,
    dest_arst,
    \arststages_ff_reg[1] ,
    \arststages_ff_reg[1]_0 ,
    \goreg_dm.dout_i_reg[10]_2 );
  output fifos_empty;
  output mst_rd_en_d1;
  output \pkt_fifo_cnt_reg[0]_0 ;
  output o_pkt_prcng_d1;
  output wr_en;
  output [41:0]din;
  output l0_empty;
  output l1_empty;
  output rd_en;
  output \gpr1.dout_i_reg[0] ;
  input dl0_rxbyteclkhs;
  input \goreg_dm.dout_i_reg[11] ;
  input \goreg_dm.dout_i_reg[11]_0 ;
  input \goreg_dm.dout_i_reg[10] ;
  input [11:0]dout;
  input empty_fwft_i_reg;
  input empty;
  input empty_fwft_i_reg_0;
  input \goreg_dm.dout_i_reg[10]_0 ;
  input [10:0]\goreg_dm.dout_i_reg[10]_1 ;
  input dest_arst;
  input \arststages_ff_reg[1] ;
  input \arststages_ff_reg[1]_0 ;
  input \goreg_dm.dout_i_reg[10]_2 ;

  wire \arststages_ff_reg[1] ;
  wire \arststages_ff_reg[1]_0 ;
  wire \buf0_reg_n_0_[0] ;
  wire \buf0_reg_n_0_[1] ;
  wire \buf0_reg_n_0_[2] ;
  wire \buf0_reg_n_0_[3] ;
  wire \buf0_reg_n_0_[4] ;
  wire \buf0_reg_n_0_[5] ;
  wire \buf0_reg_n_0_[6] ;
  wire \buf0_reg_n_0_[7] ;
  wire \buf0_reg_n_0_[8] ;
  wire \buf0_reg_n_0_[9] ;
  wire \buf1_reg_n_0_[0] ;
  wire \buf1_reg_n_0_[1] ;
  wire \buf1_reg_n_0_[2] ;
  wire \buf1_reg_n_0_[3] ;
  wire \buf1_reg_n_0_[4] ;
  wire \buf1_reg_n_0_[5] ;
  wire \buf1_reg_n_0_[6] ;
  wire \buf1_reg_n_0_[7] ;
  wire \buf1_reg_n_0_[8] ;
  wire \buf1_reg_n_0_[9] ;
  wire dest_arst;
  wire [41:0]din;
  wire dl0_rxbyteclkhs;
  wire [11:0]dout;
  wire empty;
  wire empty_fwft_i_reg;
  wire empty_fwft_i_reg_0;
  wire fifos_empty;
  wire fifos_empty_i_1_n_0;
  wire \goreg_dm.dout_i_reg[10] ;
  wire \goreg_dm.dout_i_reg[10]_0 ;
  wire [10:0]\goreg_dm.dout_i_reg[10]_1 ;
  wire \goreg_dm.dout_i_reg[10]_2 ;
  wire \goreg_dm.dout_i_reg[11] ;
  wire \goreg_dm.dout_i_reg[11]_0 ;
  wire \gpr1.dout_i_reg[0] ;
  wire l0_empty;
  wire l1_empty;
  wire [3:3]lane_mux_sel;
  wire mst_rd_en_d1;
  wire o_pkt_prcng;
  wire o_pkt_prcng_d1;
  wire p_17_in;
  wire [19:0]p_1_in;
  wire \pkt_fifo_cnt[0]_i_1_n_0 ;
  wire \pkt_fifo_cnt[0]_i_2_n_0 ;
  wire \pkt_fifo_cnt_reg[0]_0 ;
  wire \pkt_fifo_wdata[39]_i_1_n_0 ;
  wire pkt_fifo_wen_i_1_n_0;
  wire pkt_fifo_wen_i_2_n_0;
  wire ppi_rdvld;
  wire rd_en;
  wire wr_en;

  LUT6 #(
    .INIT(64'h1000100011111100)) 
    \CSI_OPT3_OFF.ppi_fifo_i_1 
       (.I0(fifos_empty),
        .I1(empty_fwft_i_reg_0),
        .I2(l0_empty),
        .I3(mst_rd_en_d1),
        .I4(\goreg_dm.dout_i_reg[10]_0 ),
        .I5(empty),
        .O(\gpr1.dout_i_reg[0] ));
  LUT3 #(
    .INIT(8'h10)) 
    \CSI_OPT3_OFF.ppi_fifo_i_2 
       (.I0(fifos_empty),
        .I1(empty),
        .I2(empty_fwft_i_reg),
        .O(rd_en));
  LUT6 #(
    .INIT(64'h000000002F222222)) 
    \buf0[9]_i_1 
       (.I0(empty_fwft_i_reg),
        .I1(empty),
        .I2(empty_fwft_i_reg_0),
        .I3(mst_rd_en_d1),
        .I4(l0_empty),
        .I5(fifos_empty),
        .O(ppi_rdvld));
  FDCE \buf0_reg[0] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(dout[0]),
        .Q(\buf0_reg_n_0_[0] ));
  FDCE \buf0_reg[1] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(dout[1]),
        .Q(\buf0_reg_n_0_[1] ));
  FDCE \buf0_reg[2] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(dout[2]),
        .Q(\buf0_reg_n_0_[2] ));
  FDCE \buf0_reg[3] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(dout[3]),
        .Q(\buf0_reg_n_0_[3] ));
  FDCE \buf0_reg[4] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(dout[4]),
        .Q(\buf0_reg_n_0_[4] ));
  FDCE \buf0_reg[5] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(dout[5]),
        .Q(\buf0_reg_n_0_[5] ));
  FDCE \buf0_reg[6] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(dout[6]),
        .Q(\buf0_reg_n_0_[6] ));
  FDCE \buf0_reg[7] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(dout[7]),
        .Q(\buf0_reg_n_0_[7] ));
  FDCE \buf0_reg[8] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(dout[8]),
        .Q(\buf0_reg_n_0_[8] ));
  FDCE \buf0_reg[9] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(dout[9]),
        .Q(\buf0_reg_n_0_[9] ));
  FDCE \buf1_reg[0] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [0]),
        .Q(\buf1_reg_n_0_[0] ));
  FDCE \buf1_reg[1] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [1]),
        .Q(\buf1_reg_n_0_[1] ));
  FDCE \buf1_reg[2] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [2]),
        .Q(\buf1_reg_n_0_[2] ));
  FDCE \buf1_reg[3] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [3]),
        .Q(\buf1_reg_n_0_[3] ));
  FDCE \buf1_reg[4] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [4]),
        .Q(\buf1_reg_n_0_[4] ));
  FDCE \buf1_reg[5] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [5]),
        .Q(\buf1_reg_n_0_[5] ));
  FDCE \buf1_reg[6] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [6]),
        .Q(\buf1_reg_n_0_[6] ));
  FDCE \buf1_reg[7] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [7]),
        .Q(\buf1_reg_n_0_[7] ));
  FDCE \buf1_reg[8] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [8]),
        .Q(\buf1_reg_n_0_[8] ));
  FDCE \buf1_reg[9] 
       (.C(dl0_rxbyteclkhs),
        .CE(ppi_rdvld),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [9]),
        .Q(\buf1_reg_n_0_[9] ));
  LUT2 #(
    .INIT(4'h8)) 
    fifos_empty_i_1
       (.I0(l0_empty),
        .I1(l1_empty),
        .O(fifos_empty_i_1_n_0));
  FDRE fifos_empty_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(fifos_empty_i_1_n_0),
        .Q(fifos_empty),
        .R(1'b0));
  FDRE l0_empty_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(\goreg_dm.dout_i_reg[11] ),
        .Q(l0_empty),
        .R(1'b0));
  FDRE l1_empty_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(\goreg_dm.dout_i_reg[11]_0 ),
        .Q(l1_empty),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000AAAAAAEA)) 
    mst_rd_en_d1_i_1
       (.I0(mst_rd_en_d1),
        .I1(\goreg_dm.dout_i_reg[10]_1 [10]),
        .I2(dout[10]),
        .I3(empty),
        .I4(empty_fwft_i_reg_0),
        .I5(fifos_empty),
        .O(p_17_in));
  LUT1 #(
    .INIT(2'h1)) 
    mst_rd_en_d1_i_2
       (.I0(\arststages_ff_reg[1]_0 ),
        .O(\pkt_fifo_cnt_reg[0]_0 ));
  FDCE mst_rd_en_d1_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(p_17_in),
        .Q(mst_rd_en_d1));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT5 #(
    .INIT(32'h40000000)) 
    o_pkt_prcng_d1_i_1
       (.I0(fifos_empty),
        .I1(dest_arst),
        .I2(\arststages_ff_reg[1] ),
        .I3(\arststages_ff_reg[1]_0 ),
        .I4(\goreg_dm.dout_i_reg[10]_2 ),
        .O(o_pkt_prcng));
  FDRE o_pkt_prcng_d1_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(o_pkt_prcng),
        .Q(o_pkt_prcng_d1),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000F000004404)) 
    \pkt_fifo_cnt[0]_i_1 
       (.I0(fifos_empty),
        .I1(\goreg_dm.dout_i_reg[10]_2 ),
        .I2(o_pkt_prcng_d1),
        .I3(pkt_fifo_wen_i_2_n_0),
        .I4(\pkt_fifo_cnt[0]_i_2_n_0 ),
        .I5(lane_mux_sel),
        .O(\pkt_fifo_cnt[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    \pkt_fifo_cnt[0]_i_2 
       (.I0(dest_arst),
        .I1(\arststages_ff_reg[1] ),
        .I2(\arststages_ff_reg[1]_0 ),
        .O(\pkt_fifo_cnt[0]_i_2_n_0 ));
  FDCE \pkt_fifo_cnt_reg[0] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .CLR(\pkt_fifo_cnt_reg[0]_0 ),
        .D(\pkt_fifo_cnt[0]_i_1_n_0 ),
        .Q(lane_mux_sel));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[0]_i_1 
       (.I0(\buf0_reg_n_0_[0] ),
        .I1(lane_mux_sel),
        .I2(dout[0]),
        .O(p_1_in[0]));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[10]_i_1 
       (.I0(\buf1_reg_n_0_[0] ),
        .I1(lane_mux_sel),
        .I2(\goreg_dm.dout_i_reg[10]_1 [0]),
        .O(p_1_in[10]));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[11]_i_1 
       (.I0(\buf1_reg_n_0_[1] ),
        .I1(lane_mux_sel),
        .I2(\goreg_dm.dout_i_reg[10]_1 [1]),
        .O(p_1_in[11]));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[12]_i_1 
       (.I0(\buf1_reg_n_0_[2] ),
        .I1(lane_mux_sel),
        .I2(\goreg_dm.dout_i_reg[10]_1 [2]),
        .O(p_1_in[12]));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[13]_i_1 
       (.I0(\buf1_reg_n_0_[3] ),
        .I1(lane_mux_sel),
        .I2(\goreg_dm.dout_i_reg[10]_1 [3]),
        .O(p_1_in[13]));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[14]_i_1 
       (.I0(\buf1_reg_n_0_[4] ),
        .I1(lane_mux_sel),
        .I2(\goreg_dm.dout_i_reg[10]_1 [4]),
        .O(p_1_in[14]));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[15]_i_1 
       (.I0(\buf1_reg_n_0_[5] ),
        .I1(lane_mux_sel),
        .I2(\goreg_dm.dout_i_reg[10]_1 [5]),
        .O(p_1_in[15]));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[16]_i_1 
       (.I0(\buf1_reg_n_0_[6] ),
        .I1(lane_mux_sel),
        .I2(\goreg_dm.dout_i_reg[10]_1 [6]),
        .O(p_1_in[16]));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[17]_i_1 
       (.I0(\buf1_reg_n_0_[7] ),
        .I1(lane_mux_sel),
        .I2(\goreg_dm.dout_i_reg[10]_1 [7]),
        .O(p_1_in[17]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[18]_i_1 
       (.I0(\buf1_reg_n_0_[8] ),
        .I1(lane_mux_sel),
        .I2(\goreg_dm.dout_i_reg[10]_1 [8]),
        .O(p_1_in[18]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[19]_i_1 
       (.I0(\buf1_reg_n_0_[9] ),
        .I1(lane_mux_sel),
        .I2(\goreg_dm.dout_i_reg[10]_1 [9]),
        .O(p_1_in[19]));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[1]_i_1 
       (.I0(\buf0_reg_n_0_[1] ),
        .I1(lane_mux_sel),
        .I2(dout[1]),
        .O(p_1_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[2]_i_1 
       (.I0(\buf0_reg_n_0_[2] ),
        .I1(lane_mux_sel),
        .I2(dout[2]),
        .O(p_1_in[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \pkt_fifo_wdata[39]_i_1 
       (.I0(pkt_fifo_wen_i_2_n_0),
        .I1(lane_mux_sel),
        .O(\pkt_fifo_wdata[39]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[3]_i_1 
       (.I0(\buf0_reg_n_0_[3] ),
        .I1(lane_mux_sel),
        .I2(dout[3]),
        .O(p_1_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[4]_i_1 
       (.I0(\buf0_reg_n_0_[4] ),
        .I1(lane_mux_sel),
        .I2(dout[4]),
        .O(p_1_in[4]));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[5]_i_1 
       (.I0(\buf0_reg_n_0_[5] ),
        .I1(lane_mux_sel),
        .I2(dout[5]),
        .O(p_1_in[5]));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[6]_i_1 
       (.I0(\buf0_reg_n_0_[6] ),
        .I1(lane_mux_sel),
        .I2(dout[6]),
        .O(p_1_in[6]));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[7]_i_1 
       (.I0(\buf0_reg_n_0_[7] ),
        .I1(lane_mux_sel),
        .I2(dout[7]),
        .O(p_1_in[7]));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[8]_i_1 
       (.I0(\buf0_reg_n_0_[8] ),
        .I1(lane_mux_sel),
        .I2(dout[8]),
        .O(p_1_in[8]));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pkt_fifo_wdata[9]_i_1 
       (.I0(\buf0_reg_n_0_[9] ),
        .I1(lane_mux_sel),
        .I2(dout[9]),
        .O(p_1_in[9]));
  FDRE \pkt_fifo_wdata_reg[0] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[0]),
        .Q(din[0]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[10] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[10]),
        .Q(din[10]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[11] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[11]),
        .Q(din[11]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[12] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[12]),
        .Q(din[12]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[13] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[13]),
        .Q(din[13]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[14] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[14]),
        .Q(din[14]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[15] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[15]),
        .Q(din[15]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[16] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[16]),
        .Q(din[16]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[17] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[17]),
        .Q(din[17]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[18] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[18]),
        .Q(din[18]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[19] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[19]),
        .Q(din[19]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[1] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[1]),
        .Q(din[1]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[20] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(dout[0]),
        .Q(din[20]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[21] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(dout[1]),
        .Q(din[21]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[22] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(dout[2]),
        .Q(din[22]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[23] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(dout[3]),
        .Q(din[23]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[24] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(dout[4]),
        .Q(din[24]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[25] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(dout[5]),
        .Q(din[25]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[26] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(dout[6]),
        .Q(din[26]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[27] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(dout[7]),
        .Q(din[27]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[28] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(dout[8]),
        .Q(din[28]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[29] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(dout[9]),
        .Q(din[29]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[2] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[2]),
        .Q(din[2]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[30] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [0]),
        .Q(din[30]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[31] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [1]),
        .Q(din[31]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[32] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [2]),
        .Q(din[32]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[33] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [3]),
        .Q(din[33]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[34] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [4]),
        .Q(din[34]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[35] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [5]),
        .Q(din[35]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[36] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [6]),
        .Q(din[36]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[37] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [7]),
        .Q(din[37]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[38] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [8]),
        .Q(din[38]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[39] 
       (.C(dl0_rxbyteclkhs),
        .CE(\pkt_fifo_wdata[39]_i_1_n_0 ),
        .D(\goreg_dm.dout_i_reg[10]_1 [9]),
        .Q(din[39]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[3] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[3]),
        .Q(din[3]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[40] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(\goreg_dm.dout_i_reg[10] ),
        .Q(din[40]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[41] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(fifos_empty),
        .Q(din[41]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[4] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[4]),
        .Q(din[4]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[5] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[5]),
        .Q(din[5]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[6] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[6]),
        .Q(din[6]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[7] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[7]),
        .Q(din[7]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[8] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[8]),
        .Q(din[8]),
        .R(1'b0));
  FDRE \pkt_fifo_wdata_reg[9] 
       (.C(dl0_rxbyteclkhs),
        .CE(pkt_fifo_wen_i_1_n_0),
        .D(p_1_in[9]),
        .Q(din[9]),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hE0)) 
    pkt_fifo_wen_i_1
       (.I0(dout[11]),
        .I1(lane_mux_sel),
        .I2(pkt_fifo_wen_i_2_n_0),
        .O(pkt_fifo_wen_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF2F222222)) 
    pkt_fifo_wen_i_2
       (.I0(empty_fwft_i_reg),
        .I1(empty),
        .I2(empty_fwft_i_reg_0),
        .I3(mst_rd_en_d1),
        .I4(l0_empty),
        .I5(fifos_empty),
        .O(pkt_fifo_wen_i_2_n_0));
  FDRE pkt_fifo_wen_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_fifo_wen_i_1_n_0),
        .Q(wr_en),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_line_buffer" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_line_buffer
   (D,
    full,
    almost_full,
    empty,
    lp_data,
    m_axis_aclk,
    srst,
    din,
    wr_en,
    rd_en,
    m_axis_aresetn,
    core_men_r2c);
  output [67:0]D;
  output full;
  output almost_full;
  output empty;
  output lp_data;
  input m_axis_aclk;
  input srst;
  input [67:0]din;
  input wr_en;
  input rd_en;
  input m_axis_aresetn;
  input core_men_r2c;

  wire [67:0]D;
  wire almost_full;
  wire core_men_r2c;
  wire [67:0]din;
  wire empty;
  wire full;
  wire lp_data;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire rd_en;
  wire srst;
  wire wr_en;

  bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_fc13 line_buf
       (.D(D),
        .almost_full(almost_full),
        .core_men_r2c(core_men_r2c),
        .din(din),
        .empty(empty),
        .full(full),
        .lp_data(lp_data),
        .m_axis_aclk(m_axis_aclk),
        .m_axis_aresetn(m_axis_aresetn),
        .rd_en(rd_en),
        .srst(srst),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_phecc" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_phecc
   (\cur_lp_vc_reg[1] ,
    diwc_corrected,
    diwc_valid,
    \cur_lp_vc_reg[0] ,
    \latest_vc_reg[1] ,
    \latest_vc_reg[0] ,
    D,
    \FSM_sequential_cur_state_reg[0] ,
    \FSM_sequential_cur_state_reg[0]_0 ,
    spkt_fifo_wen0,
    p_14_out,
    p_16_out,
    p_18_out,
    p_20_out,
    reg_status,
    \src_ff_reg[8] ,
    p_32_out,
    phecc_done,
    phecc_status,
    p_31_out,
    p_30_out,
    p_29_out,
    \reg_ecc_status_i_reg[2] ,
    lp_wc0_i_reg_reg,
    crc_partial0,
    crc_partial_reg,
    data_wip,
    \LINE_BUF_WR_64.mem_data_l32_reg[23] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ,
    \LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ,
    \LINE_BUF_WR_64.mem_data_l32_reg[15] ,
    \LINE_BUF_WR_64.mem_wdata_i_reg[65] ,
    \data_type_reg_reg[5]_0 ,
    \LINE_BUF_WR_64.mem_wdata_i_reg[64] ,
    \mem_wdata_reg[67] ,
    \mem_wdata_reg[65] ,
    mem_wen0,
    fsm_wip_reg_reg,
    diwc_corrected_zero,
    \LINE_BUF_WR_64.mem_data_l32_reg[30] ,
    byt_cnt_adj,
    \crc_blk_sel_reg[3] ,
    \crc_p_strb_reg[1] ,
    pre_byt_cnt1_reg,
    pre_byt_cnt2_reg,
    CO,
    \LINE_BUF_WR_64.mem_wdata_i_reg[66] ,
    lbuf_blk_wen_i_reg,
    img_send_reg,
    \crc_blk_sel_reg[2] ,
    \crc_blk_sel_reg[1] ,
    \crc_blk_sel_reg[0] ,
    wr_en,
    exp_ecc,
    diwc_corrected_lte4,
    cur_lp_vc,
    latest_vc,
    out,
    crcdone_reg,
    lp_wc0,
    data_wip_reg_reg,
    \FSM_sequential_cur_state_reg[1] ,
    \FSM_sequential_cur_state_reg[0]_1 ,
    data_wip_reg_reg_0,
    pkt_data,
    \gpr1.dout_i_reg[32] ,
    \gpr1.dout_i_reg[31] ,
    \gpr1.dout_i_reg[30] ,
    \gpr1.dout_i_reg[27] ,
    \gpr1.dout_i_reg[24] ,
    \gpr1.dout_i_reg[23] ,
    \gpr1.dout_i_reg[22] ,
    \gpr1.dout_i_reg[21] ,
    \gpr1.dout_i_reg[17] ,
    \gpr1.dout_i_reg[16] ,
    \gpr1.dout_i_reg[15] ,
    \gpr1.dout_i_reg[14] ,
    \gpr1.dout_i_reg[12] ,
    \gpr1.dout_i_reg[11] ,
    \gpr1.dout_i_reg[10] ,
    \gpr1.dout_i_reg[7] ,
    \gpr1.dout_i_reg[4] ,
    \gpr1.dout_i_reg[3] ,
    \gpr1.dout_i_reg[2] ,
    \gpr1.dout_i_reg[1] ,
    m_axis_aresetn,
    \LINE_BUF_WR_64.mem_wdata_i_reg[67] ,
    almost_full,
    full,
    lbuf_blk_wen_i,
    mem_wen_i,
    \cur_byte_cnt_reg[15] ,
    \cur_byte_cnt_reg[0] ,
    \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] ,
    \gpr1.dout_i_reg[17]_0 ,
    pkt_valid,
    data_wip_reg,
    \gpr1.dout_i_reg[16]_0 ,
    \gpr1.dout_i_reg[15]_0 ,
    \gpr1.dout_i_reg[14]_0 ,
    S,
    \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 ,
    crc_trig_d2,
    wc_gt_pload_reg,
    lbuf_rst_code,
    src_send,
    src_rcv,
    srst,
    E,
    m_axis_aclk);
  output \cur_lp_vc_reg[1] ;
  output [23:0]diwc_corrected;
  output diwc_valid;
  output \cur_lp_vc_reg[0] ;
  output \latest_vc_reg[1] ;
  output \latest_vc_reg[0] ;
  output [0:0]D;
  output \FSM_sequential_cur_state_reg[0] ;
  output \FSM_sequential_cur_state_reg[0]_0 ;
  output spkt_fifo_wen0;
  output p_14_out;
  output p_16_out;
  output p_18_out;
  output p_20_out;
  output [0:0]reg_status;
  output \src_ff_reg[8] ;
  output p_32_out;
  output phecc_done;
  output [1:0]phecc_status;
  output p_31_out;
  output p_30_out;
  output p_29_out;
  output [1:0]\reg_ecc_status_i_reg[2] ;
  output lp_wc0_i_reg_reg;
  output crc_partial0;
  output [1:0]crc_partial_reg;
  output data_wip;
  output [23:0]\LINE_BUF_WR_64.mem_data_l32_reg[23] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[15] ;
  output \LINE_BUF_WR_64.mem_wdata_i_reg[65] ;
  output [1:0]\data_type_reg_reg[5]_0 ;
  output \LINE_BUF_WR_64.mem_wdata_i_reg[64] ;
  output [2:0]\mem_wdata_reg[67] ;
  output \mem_wdata_reg[65] ;
  output mem_wen0;
  output fsm_wip_reg_reg;
  output diwc_corrected_zero;
  output \LINE_BUF_WR_64.mem_data_l32_reg[30] ;
  output [15:0]byt_cnt_adj;
  output \crc_blk_sel_reg[3] ;
  output [1:0]\crc_p_strb_reg[1] ;
  output [0:0]pre_byt_cnt1_reg;
  output [0:0]pre_byt_cnt2_reg;
  output [0:0]CO;
  output \LINE_BUF_WR_64.mem_wdata_i_reg[66] ;
  output lbuf_blk_wen_i_reg;
  output img_send_reg;
  output \crc_blk_sel_reg[2] ;
  output \crc_blk_sel_reg[1] ;
  output \crc_blk_sel_reg[0] ;
  output wr_en;
  output [7:0]exp_ecc;
  output diwc_corrected_lte4;
  input [1:0]cur_lp_vc;
  input [1:0]latest_vc;
  input [2:0]out;
  input crcdone_reg;
  input lp_wc0;
  input data_wip_reg_reg;
  input \FSM_sequential_cur_state_reg[1] ;
  input \FSM_sequential_cur_state_reg[0]_1 ;
  input data_wip_reg_reg_0;
  input [31:0]pkt_data;
  input \gpr1.dout_i_reg[32] ;
  input \gpr1.dout_i_reg[31] ;
  input \gpr1.dout_i_reg[30] ;
  input \gpr1.dout_i_reg[27] ;
  input \gpr1.dout_i_reg[24] ;
  input \gpr1.dout_i_reg[23] ;
  input \gpr1.dout_i_reg[22] ;
  input \gpr1.dout_i_reg[21] ;
  input \gpr1.dout_i_reg[17] ;
  input \gpr1.dout_i_reg[16] ;
  input \gpr1.dout_i_reg[15] ;
  input \gpr1.dout_i_reg[14] ;
  input \gpr1.dout_i_reg[12] ;
  input \gpr1.dout_i_reg[11] ;
  input \gpr1.dout_i_reg[10] ;
  input \gpr1.dout_i_reg[7] ;
  input \gpr1.dout_i_reg[4] ;
  input \gpr1.dout_i_reg[3] ;
  input \gpr1.dout_i_reg[2] ;
  input \gpr1.dout_i_reg[1] ;
  input m_axis_aresetn;
  input [2:0]\LINE_BUF_WR_64.mem_wdata_i_reg[67] ;
  input almost_full;
  input full;
  input lbuf_blk_wen_i;
  input mem_wen_i;
  input [14:0]\cur_byte_cnt_reg[15] ;
  input [0:0]\cur_byte_cnt_reg[0] ;
  input [12:0]\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] ;
  input \gpr1.dout_i_reg[17]_0 ;
  input pkt_valid;
  input data_wip_reg;
  input \gpr1.dout_i_reg[16]_0 ;
  input \gpr1.dout_i_reg[15]_0 ;
  input \gpr1.dout_i_reg[14]_0 ;
  input [1:0]S;
  input [3:0]\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 ;
  input crc_trig_d2;
  input wc_gt_pload_reg;
  input lbuf_rst_code;
  input src_send;
  input src_rcv;
  input srst;
  input [0:0]E;
  input m_axis_aclk;

  wire [0:0]CO;
  wire [0:0]D;
  wire [0:0]E;
  wire \FE_DETECT[0].fe_detect[0]_i_2_n_0 ;
  wire \FSM_sequential_cur_state[0]_i_2_n_0 ;
  wire \FSM_sequential_cur_state[1]_i_5_n_0 ;
  wire \FSM_sequential_cur_state_reg[0] ;
  wire \FSM_sequential_cur_state_reg[0]_0 ;
  wire \FSM_sequential_cur_state_reg[0]_1 ;
  wire \FSM_sequential_cur_state_reg[1] ;
  wire [12:0]\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] ;
  wire [3:0]\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[15] ;
  wire [23:0]\LINE_BUF_WR_64.mem_data_l32_reg[23] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[30] ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_15_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_16_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_17_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_18_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_23_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_24_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_25_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_26_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_29_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[31]_i_30_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[65]_i_3_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[66]_i_2_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[66]_i_4_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i[66]_i_5_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_14_n_0 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_14_n_1 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_14_n_2 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_14_n_3 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_9_n_1 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_9_n_2 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_9_n_3 ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[64] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[65] ;
  wire \LINE_BUF_WR_64.mem_wdata_i_reg[66] ;
  wire [2:0]\LINE_BUF_WR_64.mem_wdata_i_reg[67] ;
  wire [1:0]S;
  wire almost_full;
  wire [15:0]byt_cnt_adj;
  wire [15:0]byt_cnt_adj_reg0;
  wire \byt_cnt_adj_reg[11]_i_2_n_0 ;
  wire \byt_cnt_adj_reg[11]_i_3_n_0 ;
  wire \byt_cnt_adj_reg[11]_i_4_n_0 ;
  wire \byt_cnt_adj_reg[11]_i_5_n_0 ;
  wire \byt_cnt_adj_reg[15]_i_2_n_0 ;
  wire \byt_cnt_adj_reg[15]_i_3_n_0 ;
  wire \byt_cnt_adj_reg[15]_i_4_n_0 ;
  wire \byt_cnt_adj_reg[15]_i_5_n_0 ;
  wire \byt_cnt_adj_reg[3]_i_2_n_0 ;
  wire \byt_cnt_adj_reg[3]_i_3_n_0 ;
  wire \byt_cnt_adj_reg[3]_i_4_n_0 ;
  wire \byt_cnt_adj_reg[3]_i_5_n_0 ;
  wire \byt_cnt_adj_reg[3]_i_6_n_0 ;
  wire \byt_cnt_adj_reg[7]_i_2_n_0 ;
  wire \byt_cnt_adj_reg[7]_i_3_n_0 ;
  wire \byt_cnt_adj_reg[7]_i_4_n_0 ;
  wire \byt_cnt_adj_reg[7]_i_5_n_0 ;
  wire [15:0]byt_cnt_adj_reg__0;
  wire \byt_cnt_adj_reg_reg[11]_i_1_n_0 ;
  wire \byt_cnt_adj_reg_reg[11]_i_1_n_1 ;
  wire \byt_cnt_adj_reg_reg[11]_i_1_n_2 ;
  wire \byt_cnt_adj_reg_reg[11]_i_1_n_3 ;
  wire \byt_cnt_adj_reg_reg[15]_i_1_n_1 ;
  wire \byt_cnt_adj_reg_reg[15]_i_1_n_2 ;
  wire \byt_cnt_adj_reg_reg[15]_i_1_n_3 ;
  wire \byt_cnt_adj_reg_reg[3]_i_1_n_0 ;
  wire \byt_cnt_adj_reg_reg[3]_i_1_n_1 ;
  wire \byt_cnt_adj_reg_reg[3]_i_1_n_2 ;
  wire \byt_cnt_adj_reg_reg[3]_i_1_n_3 ;
  wire \byt_cnt_adj_reg_reg[7]_i_1_n_0 ;
  wire \byt_cnt_adj_reg_reg[7]_i_1_n_1 ;
  wire \byt_cnt_adj_reg_reg[7]_i_1_n_2 ;
  wire \byt_cnt_adj_reg_reg[7]_i_1_n_3 ;
  wire [15:2]byte_cnt;
  wire \byte_cnt_reg[15]_i_1_n_0 ;
  wire \byte_cnt_reg[15]_i_2_n_0 ;
  (* DONT_TOUCH *) wire [7:0]calcd_ecc;
  wire calcd_ecc_inferred_i_10_n_0;
  wire calcd_ecc_inferred_i_11_n_0;
  wire calcd_ecc_inferred_i_12_n_0;
  wire calcd_ecc_inferred_i_13_n_0;
  wire calcd_ecc_inferred_i_14_n_0;
  wire calcd_ecc_inferred_i_15_n_0;
  wire calcd_ecc_inferred_i_7_n_0;
  wire calcd_ecc_inferred_i_8_n_0;
  wire calcd_ecc_inferred_i_9_n_0;
  (* DONT_TOUCH *) wire code_notfound;
  wire code_notfound__0;
  wire code_notfound_i_2_n_0;
  wire \control/lp_wc0_i_reg0 ;
  wire \crc_blk_sel_reg[0] ;
  wire \crc_blk_sel_reg[1] ;
  wire \crc_blk_sel_reg[2] ;
  wire \crc_blk_sel_reg[3] ;
  wire [1:0]\crc_p_strb_reg[1] ;
  wire crc_partial0;
  wire [1:0]crc_partial_reg;
  wire crc_trig_d2;
  wire crcdone_reg;
  wire [0:0]\cur_byte_cnt_reg[0] ;
  wire [14:0]\cur_byte_cnt_reg[15] ;
  wire [1:0]cur_lp_vc;
  wire \cur_lp_vc_reg[0] ;
  wire \cur_lp_vc_reg[1] ;
  wire [3:0]data_type;
  wire [5:4]data_type_int;
  wire [1:0]\data_type_reg_reg[5]_0 ;
  wire data_wip;
  wire data_wip_reg;
  wire data_wip_reg_reg;
  wire data_wip_reg_reg_0;
  wire [23:0]diwc_corrected;
  wire diwc_corrected_csi_zero;
  wire diwc_corrected_lte4;
  wire diwc_corrected_lte4_i_1_n_0;
  wire diwc_corrected_lte4_i_2_n_0;
  wire diwc_corrected_zero;
  wire diwc_corrected_zero_i_2_n_0;
  wire diwc_corrected_zero_i_3_n_0;
  wire diwc_corrected_zero_i_4_n_0;
  wire diwc_valid;
  wire diwc_valid_int;
  wire \ecc_corrected_reg_n_0_[0] ;
  wire \ecc_corrected_reg_n_0_[1] ;
  wire \ecc_corrected_reg_n_0_[2] ;
  wire \ecc_corrected_reg_n_0_[3] ;
  wire \ecc_corrected_reg_n_0_[4] ;
  wire \ecc_corrected_reg_n_0_[5] ;
  wire \ecc_corrected_reg_n_0_[6] ;
  wire \ecc_corrected_reg_n_0_[7] ;
  wire ecc_done;
  wire [23:0]ecc_o;
  wire ecc_start_d2;
  wire [1:1]ecc_status;
  wire [7:0]exp_ecc;
  wire [7:0]exp_ecc_i;
  wire fsm_wip_reg_reg;
  wire full;
  wire \gpr1.dout_i_reg[10] ;
  wire \gpr1.dout_i_reg[11] ;
  wire \gpr1.dout_i_reg[12] ;
  wire \gpr1.dout_i_reg[14] ;
  wire \gpr1.dout_i_reg[14]_0 ;
  wire \gpr1.dout_i_reg[15] ;
  wire \gpr1.dout_i_reg[15]_0 ;
  wire \gpr1.dout_i_reg[16] ;
  wire \gpr1.dout_i_reg[16]_0 ;
  wire \gpr1.dout_i_reg[17] ;
  wire \gpr1.dout_i_reg[17]_0 ;
  wire \gpr1.dout_i_reg[1] ;
  wire \gpr1.dout_i_reg[21] ;
  wire \gpr1.dout_i_reg[22] ;
  wire \gpr1.dout_i_reg[23] ;
  wire \gpr1.dout_i_reg[24] ;
  wire \gpr1.dout_i_reg[27] ;
  wire \gpr1.dout_i_reg[2] ;
  wire \gpr1.dout_i_reg[30] ;
  wire \gpr1.dout_i_reg[31] ;
  wire \gpr1.dout_i_reg[32] ;
  wire \gpr1.dout_i_reg[3] ;
  wire \gpr1.dout_i_reg[4] ;
  wire \gpr1.dout_i_reg[7] ;
  wire img_send_i_2_n_0;
  wire img_send_reg;
  wire [1:0]latest_vc;
  wire \latest_vc_reg[0] ;
  wire \latest_vc_reg[1] ;
  wire lbuf_blk_wen_i;
  wire lbuf_blk_wen_i_reg;
  wire lbuf_rst_code;
  wire long_pkt_int;
  wire long_pkt_out;
  wire lp_wc0;
  wire lp_wc0_i_reg_i_3_n_0;
  wire lp_wc0_i_reg_i_4_n_0;
  wire lp_wc0_i_reg_i_5_n_0;
  wire lp_wc0_i_reg_reg;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire [23:0]mask;
  wire \mask[20]_i_1_n_0 ;
  wire \mask[4]_i_1_n_0 ;
  wire \mask[5]_i_1_n_0 ;
  wire \mask[7]_i_1_n_0 ;
  wire \mask_reg_n_0_[0] ;
  wire \mask_reg_n_0_[10] ;
  wire \mask_reg_n_0_[11] ;
  wire \mask_reg_n_0_[12] ;
  wire \mask_reg_n_0_[13] ;
  wire \mask_reg_n_0_[14] ;
  wire \mask_reg_n_0_[15] ;
  wire \mask_reg_n_0_[16] ;
  wire \mask_reg_n_0_[17] ;
  wire \mask_reg_n_0_[18] ;
  wire \mask_reg_n_0_[19] ;
  wire \mask_reg_n_0_[1] ;
  wire \mask_reg_n_0_[20] ;
  wire \mask_reg_n_0_[21] ;
  wire \mask_reg_n_0_[22] ;
  wire \mask_reg_n_0_[23] ;
  wire \mask_reg_n_0_[2] ;
  wire \mask_reg_n_0_[3] ;
  wire \mask_reg_n_0_[4] ;
  wire \mask_reg_n_0_[5] ;
  wire \mask_reg_n_0_[6] ;
  wire \mask_reg_n_0_[7] ;
  wire \mask_reg_n_0_[8] ;
  wire \mask_reg_n_0_[9] ;
  wire \mem_wdata_reg[65] ;
  wire [2:0]\mem_wdata_reg[67] ;
  wire mem_wen0;
  wire mem_wen_i;
  wire mem_wen_i_2_n_0;
  wire [2:0]out;
  wire [15:0]p_0_in;
  wire p_0_in0_in;
  wire p_10_in;
  wire p_11_in;
  wire p_12_in;
  wire p_13_in;
  wire p_14_in;
  wire p_14_out;
  wire p_15_in;
  wire p_16_in;
  wire p_16_out;
  wire p_18_in;
  wire p_18_out;
  wire p_19_in;
  wire p_1_in;
  wire p_20_in;
  wire p_20_out;
  wire p_22_in;
  wire p_23_in;
  wire p_29_out;
  wire p_2_in;
  wire p_30_out;
  wire p_31_out;
  wire p_32_out;
  wire p_3_in;
  wire p_4_in;
  wire p_5_in;
  wire p_6_in;
  wire p_7_in;
  wire p_8_in;
  wire p_9_in;
  wire phecc_done;
  wire [1:0]phecc_status;
  wire \phecc_status[1]_i_2_n_0 ;
  wire [31:0]pkt_data;
  wire \pkt_header_reg_n_0_[0] ;
  wire \pkt_header_reg_n_0_[1] ;
  wire pkt_valid;
  wire pre_byt_cnt1_i_10_n_0;
  wire pre_byt_cnt1_i_11_n_0;
  wire pre_byt_cnt1_i_12_n_0;
  wire pre_byt_cnt1_i_13_n_0;
  wire pre_byt_cnt1_i_14_n_0;
  wire pre_byt_cnt1_i_15_n_0;
  wire pre_byt_cnt1_i_16_n_0;
  wire pre_byt_cnt1_i_17_n_0;
  wire pre_byt_cnt1_i_18_n_0;
  wire pre_byt_cnt1_i_19_n_0;
  wire pre_byt_cnt1_i_20_n_0;
  wire pre_byt_cnt1_i_5_n_0;
  wire pre_byt_cnt1_i_6_n_0;
  wire pre_byt_cnt1_i_7_n_0;
  wire pre_byt_cnt1_i_8_n_0;
  wire pre_byt_cnt1_i_9_n_0;
  wire [0:0]pre_byt_cnt1_reg;
  wire pre_byt_cnt1_reg_i_2_n_1;
  wire pre_byt_cnt1_reg_i_2_n_2;
  wire pre_byt_cnt1_reg_i_2_n_3;
  wire pre_byt_cnt1_reg_i_4_n_0;
  wire pre_byt_cnt1_reg_i_4_n_1;
  wire pre_byt_cnt1_reg_i_4_n_2;
  wire pre_byt_cnt1_reg_i_4_n_3;
  wire pre_byt_cnt2_i_10_n_0;
  wire pre_byt_cnt2_i_11_n_0;
  wire pre_byt_cnt2_i_12_n_0;
  wire pre_byt_cnt2_i_13_n_0;
  wire pre_byt_cnt2_i_14_n_0;
  wire pre_byt_cnt2_i_15_n_0;
  wire pre_byt_cnt2_i_16_n_0;
  wire pre_byt_cnt2_i_17_n_0;
  wire pre_byt_cnt2_i_18_n_0;
  wire pre_byt_cnt2_i_19_n_0;
  wire pre_byt_cnt2_i_20_n_0;
  wire pre_byt_cnt2_i_5_n_0;
  wire pre_byt_cnt2_i_6_n_0;
  wire pre_byt_cnt2_i_7_n_0;
  wire pre_byt_cnt2_i_8_n_0;
  wire pre_byt_cnt2_i_9_n_0;
  wire [0:0]pre_byt_cnt2_reg;
  wire pre_byt_cnt2_reg_i_2_n_1;
  wire pre_byt_cnt2_reg_i_2_n_2;
  wire pre_byt_cnt2_reg_i_2_n_3;
  wire pre_byt_cnt2_reg_i_4_n_0;
  wire pre_byt_cnt2_reg_i_4_n_1;
  wire pre_byt_cnt2_reg_i_4_n_2;
  wire pre_byt_cnt2_reg_i_4_n_3;
  wire [1:0]\reg_ecc_status_i_reg[2] ;
  wire \reg_inf/diwc_valid_filt1 ;
  wire [0:0]reg_status;
  wire short_pkt;
  wire short_pkt_int;
  wire spkt_fifo_wen0;
  wire \src_ff_reg[8] ;
  wire src_rcv;
  wire src_send;
  wire srst;
  (* DONT_TOUCH *) wire [7:0]syndrome_code;
  (* DONT_TOUCH *) wire [3:0]syndrome_sum;
  wire wc_gt_pload_reg;
  wire wr_en;
  wire [3:0]\NLW_LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_14_O_UNCONNECTED ;
  wire [3:0]\NLW_LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_9_O_UNCONNECTED ;
  wire [3:3]\NLW_byt_cnt_adj_reg_reg[15]_i_1_CO_UNCONNECTED ;
  wire [3:0]NLW_pre_byt_cnt1_reg_i_2_O_UNCONNECTED;
  wire [3:0]NLW_pre_byt_cnt1_reg_i_4_O_UNCONNECTED;
  wire [3:0]NLW_pre_byt_cnt2_reg_i_2_O_UNCONNECTED;
  wire [3:0]NLW_pre_byt_cnt2_reg_i_4_O_UNCONNECTED;

  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \ERR_FRAME_SYNC_ECCERR[0].ecc_errframesync[0]_i_1 
       (.I0(diwc_corrected[7]),
        .I1(diwc_corrected[6]),
        .I2(phecc_done),
        .I3(phecc_status[1]),
        .O(p_32_out));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \ERR_FRAME_SYNC_ECCERR[1].ecc_errframesync[1]_i_1 
       (.I0(diwc_corrected[7]),
        .I1(diwc_corrected[6]),
        .I2(phecc_done),
        .I3(phecc_status[1]),
        .O(p_31_out));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \ERR_FRAME_SYNC_ECCERR[2].ecc_errframesync[2]_i_1 
       (.I0(diwc_corrected[6]),
        .I1(diwc_corrected[7]),
        .I2(phecc_done),
        .I3(phecc_status[1]),
        .O(p_30_out));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \ERR_FRAME_SYNC_ECCERR[3].ecc_errframesync[3]_i_1 
       (.I0(diwc_corrected[7]),
        .I1(diwc_corrected[6]),
        .I2(phecc_done),
        .I3(phecc_status[1]),
        .O(p_29_out));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \FE_DETECT[0].fe_detect[0]_i_1 
       (.I0(diwc_corrected[7]),
        .I1(diwc_corrected[6]),
        .I2(\FE_DETECT[0].fe_detect[0]_i_2_n_0 ),
        .O(p_20_out));
  LUT6 #(
    .INIT(64'h0000100000000000)) 
    \FE_DETECT[0].fe_detect[0]_i_2 
       (.I0(diwc_corrected[2]),
        .I1(diwc_corrected[3]),
        .I2(spkt_fifo_wen0),
        .I3(diwc_valid),
        .I4(diwc_corrected[1]),
        .I5(diwc_corrected[0]),
        .O(\FE_DETECT[0].fe_detect[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \FE_DETECT[1].fe_detect[1]_i_1 
       (.I0(\FE_DETECT[0].fe_detect[0]_i_2_n_0 ),
        .I1(diwc_corrected[7]),
        .I2(diwc_corrected[6]),
        .O(p_18_out));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \FE_DETECT[2].fe_detect[2]_i_1 
       (.I0(\FE_DETECT[0].fe_detect[0]_i_2_n_0 ),
        .I1(diwc_corrected[6]),
        .I2(diwc_corrected[7]),
        .O(p_16_out));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \FE_DETECT[3].fe_detect[3]_i_1 
       (.I0(\FE_DETECT[0].fe_detect[0]_i_2_n_0 ),
        .I1(diwc_corrected[7]),
        .I2(diwc_corrected[6]),
        .O(p_14_out));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000001)) 
    \FSM_sequential_cur_state[0]_i_1 
       (.I0(\FSM_sequential_cur_state_reg[0] ),
        .I1(\FSM_sequential_cur_state[0]_i_2_n_0 ),
        .I2(\FSM_sequential_cur_state_reg[0]_0 ),
        .I3(out[0]),
        .I4(out[1]),
        .I5(crcdone_reg),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT3 #(
    .INIT(8'hBF)) 
    \FSM_sequential_cur_state[0]_i_2 
       (.I0(phecc_status[1]),
        .I1(out[2]),
        .I2(phecc_done),
        .O(\FSM_sequential_cur_state[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0002222200000000)) 
    \FSM_sequential_cur_state[1]_i_3 
       (.I0(\FSM_sequential_cur_state[1]_i_5_n_0 ),
        .I1(\control/lp_wc0_i_reg0 ),
        .I2(diwc_corrected[2]),
        .I3(diwc_corrected[3]),
        .I4(spkt_fifo_wen0),
        .I5(diwc_valid),
        .O(\FSM_sequential_cur_state_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h02020200AAAAAAAA)) 
    \FSM_sequential_cur_state[1]_i_4 
       (.I0(diwc_valid),
        .I1(diwc_corrected[5]),
        .I2(diwc_corrected[4]),
        .I3(diwc_corrected[3]),
        .I4(diwc_corrected[2]),
        .I5(\FSM_sequential_cur_state[1]_i_5_n_0 ),
        .O(\FSM_sequential_cur_state_reg[0] ));
  LUT6 #(
    .INIT(64'h003FFF1FF7FF000F)) 
    \FSM_sequential_cur_state[1]_i_5 
       (.I0(diwc_corrected[0]),
        .I1(diwc_corrected[1]),
        .I2(diwc_corrected[2]),
        .I3(diwc_corrected[4]),
        .I4(diwc_corrected[3]),
        .I5(diwc_corrected[5]),
        .O(\FSM_sequential_cur_state[1]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \FSM_sequential_cur_state[1]_i_6 
       (.I0(diwc_corrected[4]),
        .I1(diwc_corrected[5]),
        .O(spkt_fifo_wen0));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \HSC2R_CDC[8].hsc2r_bus_cdc_i_1 
       (.I0(diwc_valid),
        .I1(\src_ff_reg[8] ),
        .O(reg_status));
  LUT6 #(
    .INIT(64'h1D5FB1B31F5FB3F3)) 
    \HSC2R_CDC[8].hsc2r_bus_cdc_i_2 
       (.I0(diwc_corrected[4]),
        .I1(diwc_corrected[2]),
        .I2(diwc_corrected[5]),
        .I3(diwc_corrected[1]),
        .I4(diwc_corrected[3]),
        .I5(diwc_corrected[0]),
        .O(\src_ff_reg[8] ));
  LUT6 #(
    .INIT(64'h4F444F4F44444444)) 
    \LINE_BUF_WR_64.mem_data_l32[0]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I1(diwc_corrected[0]),
        .I2(data_wip_reg_reg_0),
        .I3(pkt_data[24]),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I5(\gpr1.dout_i_reg[1] ),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [0]));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[10]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[18]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[16] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[10]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [10]));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[11]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[19]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[17] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[11]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [11]));
  LUT5 #(
    .INIT(32'hAA30AA00)) 
    \LINE_BUF_WR_64.mem_data_l32[12]_i_1 
       (.I0(diwc_corrected[12]),
        .I1(\gpr1.dout_i_reg[14]_0 ),
        .I2(pkt_valid),
        .I3(\LINE_BUF_WR_64.mem_data_l32_reg[15] ),
        .I4(data_wip_reg),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [12]));
  LUT5 #(
    .INIT(32'hAA30AA00)) 
    \LINE_BUF_WR_64.mem_data_l32[13]_i_1 
       (.I0(diwc_corrected[13]),
        .I1(\gpr1.dout_i_reg[15]_0 ),
        .I2(pkt_valid),
        .I3(\LINE_BUF_WR_64.mem_data_l32_reg[15] ),
        .I4(data_wip_reg),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [13]));
  LUT5 #(
    .INIT(32'hAA30AA00)) 
    \LINE_BUF_WR_64.mem_data_l32[14]_i_1 
       (.I0(diwc_corrected[14]),
        .I1(\gpr1.dout_i_reg[16]_0 ),
        .I2(pkt_valid),
        .I3(\LINE_BUF_WR_64.mem_data_l32_reg[15] ),
        .I4(data_wip_reg),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [14]));
  LUT5 #(
    .INIT(32'hAA30AA00)) 
    \LINE_BUF_WR_64.mem_data_l32[15]_i_1 
       (.I0(diwc_corrected[15]),
        .I1(\gpr1.dout_i_reg[17]_0 ),
        .I2(pkt_valid),
        .I3(\LINE_BUF_WR_64.mem_data_l32_reg[15] ),
        .I4(data_wip_reg),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [15]));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \LINE_BUF_WR_64.mem_data_l32[15]_i_3 
       (.I0(short_pkt),
        .I1(\LINE_BUF_WR_64.mem_wdata_i[66]_i_2_n_0 ),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[15] ));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[16]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[8]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[21] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[16]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [16]));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[17]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[9]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[22] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[17]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [17]));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[18]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[10]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[23] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[18]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [18]));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[19]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[11]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[24] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[19]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [19]));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[1]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[25]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[2] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[1]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [1]));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[20]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[12]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[27] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[20]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [20]));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[21]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[13]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[30] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[21]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [21]));
  LUT6 #(
    .INIT(64'h4F444F4F44444444)) 
    \LINE_BUF_WR_64.mem_data_l32[22]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I1(diwc_corrected[22]),
        .I2(data_wip_reg_reg_0),
        .I3(pkt_data[14]),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I5(\gpr1.dout_i_reg[31] ),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [22]));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[23]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[15]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[32] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[23]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [23]));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \LINE_BUF_WR_64.mem_data_l32[23]_i_3 
       (.I0(m_axis_aresetn),
        .I1(\LINE_BUF_WR_64.mem_data_l32_reg[15] ),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[2]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[26]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[3] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[2]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [2]));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT5 #(
    .INIT(32'h00004000)) 
    \LINE_BUF_WR_64.mem_data_l32[31]_i_3 
       (.I0(\data_type_reg_reg[5]_0 [1]),
        .I1(data_type[3]),
        .I2(\data_type_reg_reg[5]_0 [0]),
        .I3(data_type[1]),
        .I4(data_type[0]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ));
  LUT6 #(
    .INIT(64'h0000000155555555)) 
    \LINE_BUF_WR_64.mem_data_l32[31]_i_4 
       (.I0(\data_type_reg_reg[5]_0 [0]),
        .I1(data_type[0]),
        .I2(data_type[2]),
        .I3(data_type[1]),
        .I4(data_type[3]),
        .I5(\data_type_reg_reg[5]_0 [1]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[30] ));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[3]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[27]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[4] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[3]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [3]));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[4]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[28]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[7] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[4]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [4]));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[5]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[29]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[10] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[5]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [5]));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[6]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[30]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[11] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[6]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [6]));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[7]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[31]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[12] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[7]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [7]));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[8]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[16]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[14] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[8]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [8]));
  LUT6 #(
    .INIT(64'h4540FFFF45404540)) 
    \LINE_BUF_WR_64.mem_data_l32[9]_i_1 
       (.I0(data_wip_reg_reg_0),
        .I1(pkt_data[17]),
        .I2(\LINE_BUF_WR_64.mem_data_l32_reg[23]_0 ),
        .I3(\gpr1.dout_i_reg[15] ),
        .I4(\LINE_BUF_WR_64.mem_data_l32_reg[23]_1 ),
        .I5(diwc_corrected[9]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] [9]));
  LUT4 #(
    .INIT(16'h22B2)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_15 
       (.I0(diwc_corrected[23]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] [12]),
        .I2(diwc_corrected[22]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] [11]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_15_n_0 ));
  LUT4 #(
    .INIT(16'h22B2)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_16 
       (.I0(diwc_corrected[21]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] [10]),
        .I2(diwc_corrected[20]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] [9]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_16_n_0 ));
  LUT4 #(
    .INIT(16'h22B2)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_17 
       (.I0(diwc_corrected[19]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] [8]),
        .I2(diwc_corrected[18]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] [7]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_17_n_0 ));
  LUT4 #(
    .INIT(16'h22B2)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_18 
       (.I0(diwc_corrected[17]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] [6]),
        .I2(diwc_corrected[16]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] [5]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_18_n_0 ));
  LUT4 #(
    .INIT(16'h22B2)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_23 
       (.I0(diwc_corrected[15]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] [4]),
        .I2(diwc_corrected[14]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] [3]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_23_n_0 ));
  LUT4 #(
    .INIT(16'h22B2)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_24 
       (.I0(diwc_corrected[13]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] [2]),
        .I2(diwc_corrected[12]),
        .I3(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] [1]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_24_n_0 ));
  LUT3 #(
    .INIT(8'hB2)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_25 
       (.I0(diwc_corrected[11]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] [0]),
        .I2(diwc_corrected[10]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_25_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_26 
       (.I0(diwc_corrected[9]),
        .I1(diwc_corrected[8]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_26_n_0 ));
  LUT3 #(
    .INIT(8'h41)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_29 
       (.I0(diwc_corrected[10]),
        .I1(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15] [0]),
        .I2(diwc_corrected[11]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_29_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \LINE_BUF_WR_64.mem_wdata_i[31]_i_30 
       (.I0(diwc_corrected[8]),
        .I1(diwc_corrected[9]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[31]_i_30_n_0 ));
  LUT6 #(
    .INIT(64'hFFFE000000000000)) 
    \LINE_BUF_WR_64.mem_wdata_i[64]_i_2 
       (.I0(data_type[2]),
        .I1(data_type[0]),
        .I2(data_type[3]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i[65]_i_3_n_0 ),
        .I4(short_pkt),
        .I5(m_axis_aresetn),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[64] ));
  LUT6 #(
    .INIT(64'hFFFE000000000000)) 
    \LINE_BUF_WR_64.mem_wdata_i[65]_i_2 
       (.I0(data_type[2]),
        .I1(data_type[1]),
        .I2(data_type[3]),
        .I3(\LINE_BUF_WR_64.mem_wdata_i[65]_i_3_n_0 ),
        .I4(short_pkt),
        .I5(m_axis_aresetn),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[65] ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \LINE_BUF_WR_64.mem_wdata_i[65]_i_3 
       (.I0(\data_type_reg_reg[5]_0 [1]),
        .I1(\data_type_reg_reg[5]_0 [0]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[65]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT5 #(
    .INIT(32'h0000FF08)) 
    \LINE_BUF_WR_64.mem_wdata_i[66]_i_1 
       (.I0(\LINE_BUF_WR_64.mem_wdata_i[66]_i_2_n_0 ),
        .I1(m_axis_aresetn),
        .I2(short_pkt),
        .I3(crc_trig_d2),
        .I4(wc_gt_pload_reg),
        .O(\LINE_BUF_WR_64.mem_wdata_i_reg[66] ));
  LUT6 #(
    .INIT(64'h8888888888808888)) 
    \LINE_BUF_WR_64.mem_wdata_i[66]_i_2 
       (.I0(\LINE_BUF_WR_64.mem_wdata_i[66]_i_4_n_0 ),
        .I1(long_pkt_out),
        .I2(diwc_corrected[1]),
        .I3(diwc_corrected[2]),
        .I4(diwc_corrected[4]),
        .I5(\LINE_BUF_WR_64.mem_wdata_i[66]_i_5_n_0 ),
        .O(\LINE_BUF_WR_64.mem_wdata_i[66]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h333F13FFCC04CFFF)) 
    \LINE_BUF_WR_64.mem_wdata_i[66]_i_4 
       (.I0(diwc_corrected[0]),
        .I1(diwc_corrected[5]),
        .I2(diwc_corrected[1]),
        .I3(diwc_corrected[4]),
        .I4(diwc_corrected[2]),
        .I5(diwc_corrected[3]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[66]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \LINE_BUF_WR_64.mem_wdata_i[66]_i_5 
       (.I0(diwc_corrected[5]),
        .I1(diwc_corrected[3]),
        .O(\LINE_BUF_WR_64.mem_wdata_i[66]_i_5_n_0 ));
  CARRY4 \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_14 
       (.CI(1'b0),
        .CO({\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_14_n_0 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_14_n_1 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_14_n_2 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_14_n_3 }),
        .CYINIT(1'b0),
        .DI({\LINE_BUF_WR_64.mem_wdata_i[31]_i_23_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_24_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_25_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_26_n_0 }),
        .O(\NLW_LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_14_O_UNCONNECTED [3:0]),
        .S({S,\LINE_BUF_WR_64.mem_wdata_i[31]_i_29_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_30_n_0 }));
  CARRY4 \LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_9 
       (.CI(\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_14_n_0 ),
        .CO({CO,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_9_n_1 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_9_n_2 ,\LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_9_n_3 }),
        .CYINIT(1'b0),
        .DI({\LINE_BUF_WR_64.mem_wdata_i[31]_i_15_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_16_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_17_n_0 ,\LINE_BUF_WR_64.mem_wdata_i[31]_i_18_n_0 }),
        .O(\NLW_LINE_BUF_WR_64.mem_wdata_i_reg[31]_i_9_O_UNCONNECTED [3:0]),
        .S(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[15]_0 ));
  FDRE \byt_cnt_adj_reg[0] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[0]),
        .Q(byt_cnt_adj[0]),
        .R(srst));
  FDRE \byt_cnt_adj_reg[10] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[10]),
        .Q(byt_cnt_adj[10]),
        .R(srst));
  FDRE \byt_cnt_adj_reg[11] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[11]),
        .Q(byt_cnt_adj[11]),
        .R(srst));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[11]_i_2 
       (.I0(\mask_reg_n_0_[19] ),
        .I1(p_22_in),
        .O(\byt_cnt_adj_reg[11]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[11]_i_3 
       (.I0(\mask_reg_n_0_[18] ),
        .I1(p_20_in),
        .O(\byt_cnt_adj_reg[11]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[11]_i_4 
       (.I0(\mask_reg_n_0_[17] ),
        .I1(p_16_in),
        .O(\byt_cnt_adj_reg[11]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[11]_i_5 
       (.I0(\mask_reg_n_0_[16] ),
        .I1(p_7_in),
        .O(\byt_cnt_adj_reg[11]_i_5_n_0 ));
  FDRE \byt_cnt_adj_reg[12] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[12]),
        .Q(byt_cnt_adj[12]),
        .R(srst));
  FDRE \byt_cnt_adj_reg[13] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[13]),
        .Q(byt_cnt_adj[13]),
        .R(srst));
  FDRE \byt_cnt_adj_reg[14] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[14]),
        .Q(byt_cnt_adj[14]),
        .R(srst));
  FDRE \byt_cnt_adj_reg[15] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[15]),
        .Q(byt_cnt_adj[15]),
        .R(srst));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[15]_i_2 
       (.I0(\mask_reg_n_0_[23] ),
        .I1(p_23_in),
        .O(\byt_cnt_adj_reg[15]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[15]_i_3 
       (.I0(\mask_reg_n_0_[22] ),
        .I1(p_10_in),
        .O(\byt_cnt_adj_reg[15]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[15]_i_4 
       (.I0(\mask_reg_n_0_[21] ),
        .I1(p_9_in),
        .O(\byt_cnt_adj_reg[15]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[15]_i_5 
       (.I0(\mask_reg_n_0_[20] ),
        .I1(p_8_in),
        .O(\byt_cnt_adj_reg[15]_i_5_n_0 ));
  FDRE \byt_cnt_adj_reg[1] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[1]),
        .Q(byt_cnt_adj[1]),
        .R(srst));
  FDRE \byt_cnt_adj_reg[2] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[2]),
        .Q(byt_cnt_adj[2]),
        .R(srst));
  FDRE \byt_cnt_adj_reg[3] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[3]),
        .Q(byt_cnt_adj[3]),
        .R(srst));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[3]_i_2 
       (.I0(\mask_reg_n_0_[9] ),
        .I1(p_18_in),
        .O(\byt_cnt_adj_reg[3]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[3]_i_3 
       (.I0(\mask_reg_n_0_[11] ),
        .I1(p_5_in),
        .O(\byt_cnt_adj_reg[3]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[3]_i_4 
       (.I0(\mask_reg_n_0_[10] ),
        .I1(p_4_in),
        .O(\byt_cnt_adj_reg[3]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \byt_cnt_adj_reg[3]_i_5 
       (.I0(\mask_reg_n_0_[8] ),
        .I1(p_13_in),
        .O(\byt_cnt_adj_reg[3]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[3]_i_6 
       (.I0(\mask_reg_n_0_[8] ),
        .I1(p_13_in),
        .O(\byt_cnt_adj_reg[3]_i_6_n_0 ));
  FDRE \byt_cnt_adj_reg[4] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[4]),
        .Q(byt_cnt_adj[4]),
        .R(srst));
  FDRE \byt_cnt_adj_reg[5] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[5]),
        .Q(byt_cnt_adj[5]),
        .R(srst));
  FDRE \byt_cnt_adj_reg[6] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[6]),
        .Q(byt_cnt_adj[6]),
        .R(srst));
  FDRE \byt_cnt_adj_reg[7] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[7]),
        .Q(byt_cnt_adj[7]),
        .R(srst));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[7]_i_2 
       (.I0(\mask_reg_n_0_[15] ),
        .I1(p_19_in),
        .O(\byt_cnt_adj_reg[7]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[7]_i_3 
       (.I0(\mask_reg_n_0_[14] ),
        .I1(p_15_in),
        .O(\byt_cnt_adj_reg[7]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[7]_i_4 
       (.I0(\mask_reg_n_0_[13] ),
        .I1(p_6_in),
        .O(\byt_cnt_adj_reg[7]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \byt_cnt_adj_reg[7]_i_5 
       (.I0(\mask_reg_n_0_[12] ),
        .I1(p_14_in),
        .O(\byt_cnt_adj_reg[7]_i_5_n_0 ));
  FDRE \byt_cnt_adj_reg[8] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[8]),
        .Q(byt_cnt_adj[8]),
        .R(srst));
  FDRE \byt_cnt_adj_reg[9] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(byt_cnt_adj_reg__0[9]),
        .Q(byt_cnt_adj[9]),
        .R(srst));
  FDRE \byt_cnt_adj_reg_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[0]),
        .Q(byt_cnt_adj_reg__0[0]),
        .R(srst));
  FDRE \byt_cnt_adj_reg_reg[10] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[10]),
        .Q(byt_cnt_adj_reg__0[10]),
        .R(srst));
  FDRE \byt_cnt_adj_reg_reg[11] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[11]),
        .Q(byt_cnt_adj_reg__0[11]),
        .R(srst));
  CARRY4 \byt_cnt_adj_reg_reg[11]_i_1 
       (.CI(\byt_cnt_adj_reg_reg[7]_i_1_n_0 ),
        .CO({\byt_cnt_adj_reg_reg[11]_i_1_n_0 ,\byt_cnt_adj_reg_reg[11]_i_1_n_1 ,\byt_cnt_adj_reg_reg[11]_i_1_n_2 ,\byt_cnt_adj_reg_reg[11]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(byt_cnt_adj_reg0[11:8]),
        .S({\byt_cnt_adj_reg[11]_i_2_n_0 ,\byt_cnt_adj_reg[11]_i_3_n_0 ,\byt_cnt_adj_reg[11]_i_4_n_0 ,\byt_cnt_adj_reg[11]_i_5_n_0 }));
  FDRE \byt_cnt_adj_reg_reg[12] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[12]),
        .Q(byt_cnt_adj_reg__0[12]),
        .R(srst));
  FDRE \byt_cnt_adj_reg_reg[13] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[13]),
        .Q(byt_cnt_adj_reg__0[13]),
        .R(srst));
  FDRE \byt_cnt_adj_reg_reg[14] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[14]),
        .Q(byt_cnt_adj_reg__0[14]),
        .R(srst));
  FDRE \byt_cnt_adj_reg_reg[15] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[15]),
        .Q(byt_cnt_adj_reg__0[15]),
        .R(srst));
  CARRY4 \byt_cnt_adj_reg_reg[15]_i_1 
       (.CI(\byt_cnt_adj_reg_reg[11]_i_1_n_0 ),
        .CO({\NLW_byt_cnt_adj_reg_reg[15]_i_1_CO_UNCONNECTED [3],\byt_cnt_adj_reg_reg[15]_i_1_n_1 ,\byt_cnt_adj_reg_reg[15]_i_1_n_2 ,\byt_cnt_adj_reg_reg[15]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(byt_cnt_adj_reg0[15:12]),
        .S({\byt_cnt_adj_reg[15]_i_2_n_0 ,\byt_cnt_adj_reg[15]_i_3_n_0 ,\byt_cnt_adj_reg[15]_i_4_n_0 ,\byt_cnt_adj_reg[15]_i_5_n_0 }));
  FDRE \byt_cnt_adj_reg_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[1]),
        .Q(byt_cnt_adj_reg__0[1]),
        .R(srst));
  FDRE \byt_cnt_adj_reg_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[2]),
        .Q(byt_cnt_adj_reg__0[2]),
        .R(srst));
  FDRE \byt_cnt_adj_reg_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[3]),
        .Q(byt_cnt_adj_reg__0[3]),
        .R(srst));
  CARRY4 \byt_cnt_adj_reg_reg[3]_i_1 
       (.CI(1'b0),
        .CO({\byt_cnt_adj_reg_reg[3]_i_1_n_0 ,\byt_cnt_adj_reg_reg[3]_i_1_n_1 ,\byt_cnt_adj_reg_reg[3]_i_1_n_2 ,\byt_cnt_adj_reg_reg[3]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,\byt_cnt_adj_reg[3]_i_2_n_0 ,1'b0}),
        .O(byt_cnt_adj_reg0[3:0]),
        .S({\byt_cnt_adj_reg[3]_i_3_n_0 ,\byt_cnt_adj_reg[3]_i_4_n_0 ,\byt_cnt_adj_reg[3]_i_5_n_0 ,\byt_cnt_adj_reg[3]_i_6_n_0 }));
  FDRE \byt_cnt_adj_reg_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[4]),
        .Q(byt_cnt_adj_reg__0[4]),
        .R(srst));
  FDRE \byt_cnt_adj_reg_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[5]),
        .Q(byt_cnt_adj_reg__0[5]),
        .R(srst));
  FDRE \byt_cnt_adj_reg_reg[6] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[6]),
        .Q(byt_cnt_adj_reg__0[6]),
        .R(srst));
  FDRE \byt_cnt_adj_reg_reg[7] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[7]),
        .Q(byt_cnt_adj_reg__0[7]),
        .R(srst));
  CARRY4 \byt_cnt_adj_reg_reg[7]_i_1 
       (.CI(\byt_cnt_adj_reg_reg[3]_i_1_n_0 ),
        .CO({\byt_cnt_adj_reg_reg[7]_i_1_n_0 ,\byt_cnt_adj_reg_reg[7]_i_1_n_1 ,\byt_cnt_adj_reg_reg[7]_i_1_n_2 ,\byt_cnt_adj_reg_reg[7]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(byt_cnt_adj_reg0[7:4]),
        .S({\byt_cnt_adj_reg[7]_i_2_n_0 ,\byt_cnt_adj_reg[7]_i_3_n_0 ,\byt_cnt_adj_reg[7]_i_4_n_0 ,\byt_cnt_adj_reg[7]_i_5_n_0 }));
  FDRE \byt_cnt_adj_reg_reg[8] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[8]),
        .Q(byt_cnt_adj_reg__0[8]),
        .R(srst));
  FDRE \byt_cnt_adj_reg_reg[9] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(byt_cnt_adj_reg0[9]),
        .Q(byt_cnt_adj_reg__0[9]),
        .R(srst));
  LUT6 #(
    .INIT(64'h00100000FFFFFFFF)) 
    \byte_cnt_reg[15]_i_1 
       (.I0(\ecc_corrected_reg_n_0_[3] ),
        .I1(code_notfound),
        .I2(ecc_done),
        .I3(\ecc_corrected_reg_n_0_[2] ),
        .I4(\byte_cnt_reg[15]_i_2_n_0 ),
        .I5(m_axis_aresetn),
        .O(\byte_cnt_reg[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000050033330533)) 
    \byte_cnt_reg[15]_i_2 
       (.I0(\ecc_corrected_reg_n_0_[5] ),
        .I1(\data_type_reg_reg[5]_0 [1]),
        .I2(\ecc_corrected_reg_n_0_[4] ),
        .I3(ecc_done),
        .I4(code_notfound),
        .I5(\data_type_reg_reg[5]_0 [0]),
        .O(\byte_cnt_reg[15]_i_2_n_0 ));
  FDRE \byte_cnt_reg_reg[0] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[0]),
        .Q(crc_partial_reg[0]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[10] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[10]),
        .Q(byte_cnt[10]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[11] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[11]),
        .Q(byte_cnt[11]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[12] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[12]),
        .Q(byte_cnt[12]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[13] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[13]),
        .Q(byte_cnt[13]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[14] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[14]),
        .Q(byte_cnt[14]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[15] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[15]),
        .Q(byte_cnt[15]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[1] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[1]),
        .Q(crc_partial_reg[1]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[2] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[2]),
        .Q(byte_cnt[2]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[3] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[3]),
        .Q(byte_cnt[3]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[4] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[4]),
        .Q(byte_cnt[4]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[5] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[5]),
        .Q(byte_cnt[5]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[6] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[6]),
        .Q(byte_cnt[6]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[7] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[7]),
        .Q(byte_cnt[7]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[8] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[8]),
        .Q(byte_cnt[8]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  FDRE \byte_cnt_reg_reg[9] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(p_0_in[9]),
        .Q(byte_cnt[9]),
        .R(\byte_cnt_reg[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_1
       (.I0(p_19_in),
        .I1(p_14_in),
        .I2(calcd_ecc_inferred_i_7_n_0),
        .I3(calcd_ecc_inferred_i_8_n_0),
        .I4(p_20_in),
        .I5(p_22_in),
        .O(calcd_ecc[5]));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT3 #(
    .INIT(8'h96)) 
    calcd_ecc_inferred_i_10
       (.I0(p_9_in),
        .I1(p_8_in),
        .I2(p_11_in),
        .O(calcd_ecc_inferred_i_10_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_11
       (.I0(\pkt_header_reg_n_0_[1] ),
        .I1(p_15_in),
        .I2(p_3_in),
        .I3(p_6_in),
        .I4(p_23_in),
        .I5(p_0_in0_in),
        .O(calcd_ecc_inferred_i_11_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_12
       (.I0(p_10_in),
        .I1(p_14_in),
        .I2(p_2_in),
        .I3(p_5_in),
        .I4(\pkt_header_reg_n_0_[0] ),
        .I5(p_0_in0_in),
        .O(calcd_ecc_inferred_i_12_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_13
       (.I0(p_16_in),
        .I1(p_10_in),
        .I2(p_23_in),
        .I3(calcd_ecc_inferred_i_15_n_0),
        .I4(p_13_in),
        .I5(p_15_in),
        .O(calcd_ecc_inferred_i_13_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_14
       (.I0(p_2_in),
        .I1(p_0_in0_in),
        .I2(p_6_in),
        .I3(p_7_in),
        .I4(p_3_in),
        .I5(p_5_in),
        .O(calcd_ecc_inferred_i_14_n_0));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    calcd_ecc_inferred_i_15
       (.I0(p_1_in),
        .I1(p_4_in),
        .I2(\pkt_header_reg_n_0_[1] ),
        .I3(\pkt_header_reg_n_0_[0] ),
        .O(calcd_ecc_inferred_i_15_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_2
       (.I0(p_20_in),
        .I1(p_12_in),
        .I2(calcd_ecc_inferred_i_7_n_0),
        .I3(calcd_ecc_inferred_i_9_n_0),
        .I4(p_18_in),
        .I5(p_22_in),
        .O(calcd_ecc[4]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_3
       (.I0(p_19_in),
        .I1(p_13_in),
        .I2(calcd_ecc_inferred_i_10_n_0),
        .I3(calcd_ecc_inferred_i_11_n_0),
        .I4(p_18_in),
        .I5(p_22_in),
        .O(calcd_ecc[3]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_4
       (.I0(p_19_in),
        .I1(p_12_in),
        .I2(calcd_ecc_inferred_i_10_n_0),
        .I3(calcd_ecc_inferred_i_12_n_0),
        .I4(p_20_in),
        .I5(p_18_in),
        .O(calcd_ecc[2]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_5
       (.I0(calcd_ecc_inferred_i_13_n_0),
        .I1(p_14_in),
        .I2(p_9_in),
        .I3(p_8_in),
        .I4(p_11_in),
        .I5(p_12_in),
        .O(calcd_ecc[1]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_6
       (.I0(calcd_ecc_inferred_i_14_n_0),
        .I1(calcd_ecc_inferred_i_15_n_0),
        .I2(p_23_in),
        .I3(p_10_in),
        .I4(p_9_in),
        .I5(p_8_in),
        .O(calcd_ecc[0]));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT3 #(
    .INIT(8'h96)) 
    calcd_ecc_inferred_i_7
       (.I0(p_23_in),
        .I1(p_10_in),
        .I2(p_16_in),
        .O(calcd_ecc_inferred_i_7_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_8
       (.I0(p_9_in),
        .I1(p_15_in),
        .I2(p_6_in),
        .I3(p_7_in),
        .I4(p_4_in),
        .I5(p_5_in),
        .O(calcd_ecc_inferred_i_8_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    calcd_ecc_inferred_i_9
       (.I0(p_8_in),
        .I1(p_13_in),
        .I2(p_3_in),
        .I3(p_7_in),
        .I4(p_1_in),
        .I5(p_2_in),
        .O(calcd_ecc_inferred_i_9_n_0));
  LUT5 #(
    .INIT(32'h0000FEFF)) 
    code_notfound_i_1
       (.I0(syndrome_sum[1]),
        .I1(syndrome_sum[2]),
        .I2(syndrome_sum[3]),
        .I3(syndrome_sum[0]),
        .I4(code_notfound_i_2_n_0),
        .O(code_notfound__0));
  LUT6 #(
    .INIT(64'h0996966896686881)) 
    code_notfound_i_2
       (.I0(syndrome_code[0]),
        .I1(syndrome_code[1]),
        .I2(syndrome_code[2]),
        .I3(syndrome_code[3]),
        .I4(syndrome_code[4]),
        .I5(syndrome_code[5]),
        .O(code_notfound_i_2_n_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDRE code_notfound_reg
       (.C(m_axis_aclk),
        .CE(E),
        .D(code_notfound__0),
        .Q(code_notfound),
        .R(srst));
  LUT2 #(
    .INIT(4'h2)) 
    \crc_blk_sel[0]_i_1 
       (.I0(crc_partial_reg[0]),
        .I1(crc_partial_reg[1]),
        .O(\crc_blk_sel_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \crc_blk_sel[1]_i_1 
       (.I0(crc_partial_reg[1]),
        .I1(crc_partial_reg[0]),
        .O(\crc_blk_sel_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \crc_blk_sel[2]_i_1 
       (.I0(crc_partial_reg[0]),
        .I1(crc_partial_reg[1]),
        .O(\crc_blk_sel_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \crc_blk_sel[3]_i_1 
       (.I0(crc_partial_reg[1]),
        .I1(crc_partial_reg[0]),
        .O(\crc_blk_sel_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \crc_p_strb[0]_i_1 
       (.I0(crc_partial_reg[0]),
        .I1(crc_partial_reg[1]),
        .O(\crc_p_strb_reg[1] [0]));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crc_p_strb[1]_i_1 
       (.I0(crc_partial_reg[0]),
        .I1(crc_partial_reg[1]),
        .O(\crc_p_strb_reg[1] [1]));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT5 #(
    .INIT(32'hEAEAEA00)) 
    crc_partial_i_1
       (.I0(data_wip_reg_reg),
        .I1(\FSM_sequential_cur_state_reg[0]_0 ),
        .I2(\FSM_sequential_cur_state_reg[1] ),
        .I3(crc_partial_reg[1]),
        .I4(crc_partial_reg[0]),
        .O(crc_partial0));
  LUT3 #(
    .INIT(8'h0E)) 
    \cur_byte_cnt[15]_i_6 
       (.I0(\data_type_reg_reg[5]_0 [0]),
        .I1(\data_type_reg_reg[5]_0 [1]),
        .I2(diwc_corrected_zero),
        .O(fsm_wip_reg_reg));
  LUT5 #(
    .INIT(32'hBBBF8880)) 
    \cur_lp_vc[0]_i_1 
       (.I0(diwc_corrected[6]),
        .I1(diwc_valid),
        .I2(diwc_corrected[5]),
        .I3(diwc_corrected[4]),
        .I4(cur_lp_vc[0]),
        .O(\cur_lp_vc_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT5 #(
    .INIT(32'hBBBF8880)) 
    \cur_lp_vc[1]_i_1 
       (.I0(diwc_corrected[7]),
        .I1(diwc_valid),
        .I2(diwc_corrected[5]),
        .I3(diwc_corrected[4]),
        .I4(cur_lp_vc[1]),
        .O(\cur_lp_vc_reg[1] ));
  LUT4 #(
    .INIT(16'hBA8A)) 
    \data_type_reg[4]_i_1 
       (.I0(\data_type_reg_reg[5]_0 [0]),
        .I1(code_notfound),
        .I2(ecc_done),
        .I3(\ecc_corrected_reg_n_0_[4] ),
        .O(data_type_int[4]));
  LUT4 #(
    .INIT(16'hFB08)) 
    \data_type_reg[5]_i_1 
       (.I0(\ecc_corrected_reg_n_0_[5] ),
        .I1(ecc_done),
        .I2(code_notfound),
        .I3(\data_type_reg_reg[5]_0 [1]),
        .O(data_type_int[5]));
  FDRE \data_type_reg_reg[0] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(\ecc_corrected_reg_n_0_[0] ),
        .Q(data_type[0]),
        .R(srst));
  FDRE \data_type_reg_reg[1] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(\ecc_corrected_reg_n_0_[1] ),
        .Q(data_type[1]),
        .R(srst));
  FDRE \data_type_reg_reg[2] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(\ecc_corrected_reg_n_0_[2] ),
        .Q(data_type[2]),
        .R(srst));
  FDRE \data_type_reg_reg[3] 
       (.C(m_axis_aclk),
        .CE(diwc_valid_int),
        .D(\ecc_corrected_reg_n_0_[3] ),
        .Q(data_type[3]),
        .R(srst));
  FDRE \data_type_reg_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(data_type_int[4]),
        .Q(\data_type_reg_reg[5]_0 [0]),
        .R(srst));
  FDRE \data_type_reg_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(data_type_int[5]),
        .Q(\data_type_reg_reg[5]_0 [1]),
        .R(srst));
  LUT6 #(
    .INIT(64'hFFFFFFFF00400000)) 
    data_wip_reg_i_1
       (.I0(\FSM_sequential_cur_state_reg[0]_1 ),
        .I1(phecc_done),
        .I2(out[2]),
        .I3(phecc_status[1]),
        .I4(\FSM_sequential_cur_state_reg[0]_0 ),
        .I5(data_wip_reg_reg),
        .O(data_wip));
  LUT6 #(
    .INIT(64'h2AFFFFFF2A000000)) 
    diwc_corrected_lte4_i_1
       (.I0(diwc_corrected_zero_i_2_n_0),
        .I1(diwc_corrected_lte4_i_2_n_0),
        .I2(p_0_in[2]),
        .I3(ecc_done),
        .I4(m_axis_aresetn),
        .I5(diwc_corrected_lte4),
        .O(diwc_corrected_lte4_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT2 #(
    .INIT(4'hE)) 
    diwc_corrected_lte4_i_2
       (.I0(p_0_in[1]),
        .I1(p_0_in[0]),
        .O(diwc_corrected_lte4_i_2_n_0));
  FDRE diwc_corrected_lte4_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(diwc_corrected_lte4_i_1_n_0),
        .Q(diwc_corrected_lte4),
        .R(1'b0));
  FDRE \diwc_corrected_reg[0] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(\ecc_corrected_reg_n_0_[0] ),
        .Q(diwc_corrected[0]),
        .R(srst));
  FDRE \diwc_corrected_reg[10] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[2]),
        .Q(diwc_corrected[10]),
        .R(srst));
  FDRE \diwc_corrected_reg[11] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[3]),
        .Q(diwc_corrected[11]),
        .R(srst));
  FDRE \diwc_corrected_reg[12] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[4]),
        .Q(diwc_corrected[12]),
        .R(srst));
  FDRE \diwc_corrected_reg[13] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[5]),
        .Q(diwc_corrected[13]),
        .R(srst));
  FDRE \diwc_corrected_reg[14] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[6]),
        .Q(diwc_corrected[14]),
        .R(srst));
  FDRE \diwc_corrected_reg[15] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[7]),
        .Q(diwc_corrected[15]),
        .R(srst));
  FDRE \diwc_corrected_reg[16] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[8]),
        .Q(diwc_corrected[16]),
        .R(srst));
  FDRE \diwc_corrected_reg[17] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[9]),
        .Q(diwc_corrected[17]),
        .R(srst));
  FDRE \diwc_corrected_reg[18] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[10]),
        .Q(diwc_corrected[18]),
        .R(srst));
  FDRE \diwc_corrected_reg[19] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[11]),
        .Q(diwc_corrected[19]),
        .R(srst));
  FDRE \diwc_corrected_reg[1] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(\ecc_corrected_reg_n_0_[1] ),
        .Q(diwc_corrected[1]),
        .R(srst));
  FDRE \diwc_corrected_reg[20] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[12]),
        .Q(diwc_corrected[20]),
        .R(srst));
  FDRE \diwc_corrected_reg[21] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[13]),
        .Q(diwc_corrected[21]),
        .R(srst));
  FDRE \diwc_corrected_reg[22] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[14]),
        .Q(diwc_corrected[22]),
        .R(srst));
  FDRE \diwc_corrected_reg[23] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[15]),
        .Q(diwc_corrected[23]),
        .R(srst));
  FDRE \diwc_corrected_reg[2] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(\ecc_corrected_reg_n_0_[2] ),
        .Q(diwc_corrected[2]),
        .R(srst));
  FDRE \diwc_corrected_reg[3] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(\ecc_corrected_reg_n_0_[3] ),
        .Q(diwc_corrected[3]),
        .R(srst));
  FDRE \diwc_corrected_reg[4] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(\ecc_corrected_reg_n_0_[4] ),
        .Q(diwc_corrected[4]),
        .R(srst));
  FDRE \diwc_corrected_reg[5] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(\ecc_corrected_reg_n_0_[5] ),
        .Q(diwc_corrected[5]),
        .R(srst));
  FDRE \diwc_corrected_reg[6] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(\ecc_corrected_reg_n_0_[6] ),
        .Q(diwc_corrected[6]),
        .R(srst));
  FDRE \diwc_corrected_reg[7] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(\ecc_corrected_reg_n_0_[7] ),
        .Q(diwc_corrected[7]),
        .R(srst));
  FDRE \diwc_corrected_reg[8] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[0]),
        .Q(diwc_corrected[8]),
        .R(srst));
  FDRE \diwc_corrected_reg[9] 
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(p_0_in[1]),
        .Q(diwc_corrected[9]),
        .R(srst));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    diwc_corrected_zero_i_1
       (.I0(diwc_corrected_zero_i_2_n_0),
        .I1(p_0_in[1]),
        .I2(p_0_in[0]),
        .I3(p_0_in[2]),
        .O(diwc_corrected_csi_zero));
  LUT5 #(
    .INIT(32'h00000002)) 
    diwc_corrected_zero_i_2
       (.I0(diwc_corrected_zero_i_3_n_0),
        .I1(diwc_corrected_zero_i_4_n_0),
        .I2(p_0_in[11]),
        .I3(p_0_in[4]),
        .I4(p_0_in[10]),
        .O(diwc_corrected_zero_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    diwc_corrected_zero_i_3
       (.I0(p_0_in[12]),
        .I1(p_0_in[13]),
        .I2(p_0_in[5]),
        .I3(p_0_in[9]),
        .I4(p_0_in[7]),
        .I5(p_0_in[6]),
        .O(diwc_corrected_zero_i_3_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    diwc_corrected_zero_i_4
       (.I0(p_0_in[15]),
        .I1(p_0_in[14]),
        .I2(p_0_in[8]),
        .I3(p_0_in[3]),
        .O(diwc_corrected_zero_i_4_n_0));
  FDRE diwc_corrected_zero_reg
       (.C(m_axis_aclk),
        .CE(ecc_done),
        .D(diwc_corrected_csi_zero),
        .Q(diwc_corrected_zero),
        .R(srst));
  LUT2 #(
    .INIT(4'h2)) 
    diwc_valid_i_1
       (.I0(ecc_done),
        .I1(code_notfound),
        .O(diwc_valid_int));
  FDRE diwc_valid_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(diwc_valid_int),
        .Q(diwc_valid),
        .R(srst));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[0]_i_1 
       (.I0(\mask_reg_n_0_[0] ),
        .I1(\pkt_header_reg_n_0_[0] ),
        .O(ecc_o[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[10]_i_1 
       (.I0(\mask_reg_n_0_[10] ),
        .I1(p_4_in),
        .O(ecc_o[10]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[11]_i_1 
       (.I0(\mask_reg_n_0_[11] ),
        .I1(p_5_in),
        .O(ecc_o[11]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[12]_i_1 
       (.I0(\mask_reg_n_0_[12] ),
        .I1(p_14_in),
        .O(ecc_o[12]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[13]_i_1 
       (.I0(\mask_reg_n_0_[13] ),
        .I1(p_6_in),
        .O(ecc_o[13]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[14]_i_1 
       (.I0(\mask_reg_n_0_[14] ),
        .I1(p_15_in),
        .O(ecc_o[14]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[15]_i_1 
       (.I0(\mask_reg_n_0_[15] ),
        .I1(p_19_in),
        .O(ecc_o[15]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[16]_i_1 
       (.I0(\mask_reg_n_0_[16] ),
        .I1(p_7_in),
        .O(ecc_o[16]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[17]_i_1 
       (.I0(\mask_reg_n_0_[17] ),
        .I1(p_16_in),
        .O(ecc_o[17]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[18]_i_1 
       (.I0(\mask_reg_n_0_[18] ),
        .I1(p_20_in),
        .O(ecc_o[18]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[19]_i_1 
       (.I0(\mask_reg_n_0_[19] ),
        .I1(p_22_in),
        .O(ecc_o[19]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[1]_i_1 
       (.I0(\mask_reg_n_0_[1] ),
        .I1(\pkt_header_reg_n_0_[1] ),
        .O(ecc_o[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[20]_i_1 
       (.I0(\mask_reg_n_0_[20] ),
        .I1(p_8_in),
        .O(ecc_o[20]));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[21]_i_1 
       (.I0(\mask_reg_n_0_[21] ),
        .I1(p_9_in),
        .O(ecc_o[21]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[22]_i_1 
       (.I0(\mask_reg_n_0_[22] ),
        .I1(p_10_in),
        .O(ecc_o[22]));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[23]_i_1 
       (.I0(\mask_reg_n_0_[23] ),
        .I1(p_23_in),
        .O(ecc_o[23]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[2]_i_1 
       (.I0(\mask_reg_n_0_[2] ),
        .I1(p_0_in0_in),
        .O(ecc_o[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[3]_i_1 
       (.I0(\mask_reg_n_0_[3] ),
        .I1(p_11_in),
        .O(ecc_o[3]));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[4]_i_1 
       (.I0(\mask_reg_n_0_[4] ),
        .I1(p_1_in),
        .O(ecc_o[4]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[5]_i_1 
       (.I0(\mask_reg_n_0_[5] ),
        .I1(p_2_in),
        .O(ecc_o[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[6]_i_1 
       (.I0(\mask_reg_n_0_[6] ),
        .I1(p_12_in),
        .O(ecc_o[6]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[7]_i_1 
       (.I0(\mask_reg_n_0_[7] ),
        .I1(p_3_in),
        .O(ecc_o[7]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[8]_i_1 
       (.I0(\mask_reg_n_0_[8] ),
        .I1(p_13_in),
        .O(ecc_o[8]));
  LUT2 #(
    .INIT(4'h6)) 
    \ecc_corrected[9]_i_1 
       (.I0(\mask_reg_n_0_[9] ),
        .I1(p_18_in),
        .O(ecc_o[9]));
  FDRE \ecc_corrected_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[0]),
        .Q(\ecc_corrected_reg_n_0_[0] ),
        .R(srst));
  FDRE \ecc_corrected_reg[10] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[10]),
        .Q(p_0_in[2]),
        .R(srst));
  FDRE \ecc_corrected_reg[11] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[11]),
        .Q(p_0_in[3]),
        .R(srst));
  FDRE \ecc_corrected_reg[12] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[12]),
        .Q(p_0_in[4]),
        .R(srst));
  FDRE \ecc_corrected_reg[13] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[13]),
        .Q(p_0_in[5]),
        .R(srst));
  FDRE \ecc_corrected_reg[14] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[14]),
        .Q(p_0_in[6]),
        .R(srst));
  FDRE \ecc_corrected_reg[15] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[15]),
        .Q(p_0_in[7]),
        .R(srst));
  FDRE \ecc_corrected_reg[16] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[16]),
        .Q(p_0_in[8]),
        .R(srst));
  FDRE \ecc_corrected_reg[17] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[17]),
        .Q(p_0_in[9]),
        .R(srst));
  FDRE \ecc_corrected_reg[18] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[18]),
        .Q(p_0_in[10]),
        .R(srst));
  FDRE \ecc_corrected_reg[19] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[19]),
        .Q(p_0_in[11]),
        .R(srst));
  FDRE \ecc_corrected_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[1]),
        .Q(\ecc_corrected_reg_n_0_[1] ),
        .R(srst));
  FDRE \ecc_corrected_reg[20] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[20]),
        .Q(p_0_in[12]),
        .R(srst));
  FDRE \ecc_corrected_reg[21] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[21]),
        .Q(p_0_in[13]),
        .R(srst));
  FDRE \ecc_corrected_reg[22] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[22]),
        .Q(p_0_in[14]),
        .R(srst));
  FDRE \ecc_corrected_reg[23] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[23]),
        .Q(p_0_in[15]),
        .R(srst));
  FDRE \ecc_corrected_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[2]),
        .Q(\ecc_corrected_reg_n_0_[2] ),
        .R(srst));
  FDRE \ecc_corrected_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[3]),
        .Q(\ecc_corrected_reg_n_0_[3] ),
        .R(srst));
  FDRE \ecc_corrected_reg[4] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[4]),
        .Q(\ecc_corrected_reg_n_0_[4] ),
        .R(srst));
  FDRE \ecc_corrected_reg[5] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[5]),
        .Q(\ecc_corrected_reg_n_0_[5] ),
        .R(srst));
  FDRE \ecc_corrected_reg[6] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[6]),
        .Q(\ecc_corrected_reg_n_0_[6] ),
        .R(srst));
  FDRE \ecc_corrected_reg[7] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[7]),
        .Q(\ecc_corrected_reg_n_0_[7] ),
        .R(srst));
  FDRE \ecc_corrected_reg[8] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[8]),
        .Q(p_0_in[0]),
        .R(srst));
  FDRE \ecc_corrected_reg[9] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_o[9]),
        .Q(p_0_in[1]),
        .R(srst));
  FDRE ecc_done_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_start_d2),
        .Q(ecc_done),
        .R(srst));
  FDRE ecc_start_d2_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(E),
        .Q(ecc_start_d2),
        .R(srst));
  FDRE \exp_ecc_i_reg[0] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[24]),
        .Q(exp_ecc_i[0]),
        .R(srst));
  FDRE \exp_ecc_i_reg[1] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[25]),
        .Q(exp_ecc_i[1]),
        .R(srst));
  FDRE \exp_ecc_i_reg[2] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[26]),
        .Q(exp_ecc_i[2]),
        .R(srst));
  FDRE \exp_ecc_i_reg[3] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[27]),
        .Q(exp_ecc_i[3]),
        .R(srst));
  FDRE \exp_ecc_i_reg[4] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[28]),
        .Q(exp_ecc_i[4]),
        .R(srst));
  FDRE \exp_ecc_i_reg[5] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[29]),
        .Q(exp_ecc_i[5]),
        .R(srst));
  FDRE \exp_ecc_i_reg[6] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[30]),
        .Q(exp_ecc_i[6]),
        .R(srst));
  FDRE \exp_ecc_i_reg[7] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[31]),
        .Q(exp_ecc_i[7]),
        .R(srst));
  FDRE \exp_ecc_reg[0] 
       (.C(m_axis_aclk),
        .CE(phecc_done),
        .D(exp_ecc_i[0]),
        .Q(exp_ecc[0]),
        .R(srst));
  FDRE \exp_ecc_reg[1] 
       (.C(m_axis_aclk),
        .CE(phecc_done),
        .D(exp_ecc_i[1]),
        .Q(exp_ecc[1]),
        .R(srst));
  FDRE \exp_ecc_reg[2] 
       (.C(m_axis_aclk),
        .CE(phecc_done),
        .D(exp_ecc_i[2]),
        .Q(exp_ecc[2]),
        .R(srst));
  FDRE \exp_ecc_reg[3] 
       (.C(m_axis_aclk),
        .CE(phecc_done),
        .D(exp_ecc_i[3]),
        .Q(exp_ecc[3]),
        .R(srst));
  FDRE \exp_ecc_reg[4] 
       (.C(m_axis_aclk),
        .CE(phecc_done),
        .D(exp_ecc_i[4]),
        .Q(exp_ecc[4]),
        .R(srst));
  FDRE \exp_ecc_reg[5] 
       (.C(m_axis_aclk),
        .CE(phecc_done),
        .D(exp_ecc_i[5]),
        .Q(exp_ecc[5]),
        .R(srst));
  FDRE \exp_ecc_reg[6] 
       (.C(m_axis_aclk),
        .CE(phecc_done),
        .D(exp_ecc_i[6]),
        .Q(exp_ecc[6]),
        .R(srst));
  FDRE \exp_ecc_reg[7] 
       (.C(m_axis_aclk),
        .CE(phecc_done),
        .D(exp_ecc_i[7]),
        .Q(exp_ecc[7]),
        .R(srst));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    generic_pkt_i_2
       (.I0(diwc_corrected[3]),
        .I1(diwc_valid),
        .I2(diwc_corrected[4]),
        .I3(diwc_corrected[5]),
        .O(wr_en));
  LUT5 #(
    .INIT(32'h0020F020)) 
    img_send_i_1
       (.I0(img_send_i_2_n_0),
        .I1(\reg_inf/diwc_valid_filt1 ),
        .I2(m_axis_aresetn),
        .I3(src_send),
        .I4(src_rcv),
        .O(img_send_reg));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT4 #(
    .INIT(16'hAA80)) 
    img_send_i_2
       (.I0(diwc_valid),
        .I1(diwc_corrected[3]),
        .I2(diwc_corrected[4]),
        .I3(diwc_corrected[5]),
        .O(img_send_i_2_n_0));
  LUT6 #(
    .INIT(64'hF80AF80840000000)) 
    img_send_i_3
       (.I0(diwc_corrected[2]),
        .I1(diwc_corrected[1]),
        .I2(diwc_corrected[4]),
        .I3(diwc_corrected[3]),
        .I4(diwc_corrected[0]),
        .I5(diwc_corrected[5]),
        .O(\reg_inf/diwc_valid_filt1 ));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \latest_vc[0]_i_1 
       (.I0(diwc_corrected[6]),
        .I1(diwc_valid),
        .I2(latest_vc[0]),
        .O(\latest_vc_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \latest_vc[1]_i_1 
       (.I0(diwc_corrected[7]),
        .I1(diwc_valid),
        .I2(latest_vc[1]),
        .O(\latest_vc_reg[1] ));
  LUT6 #(
    .INIT(64'hFFFFFEFFFFFF0000)) 
    lbuf_blk_wen_i_i_1
       (.I0(full),
        .I1(\data_type_reg_reg[5]_0 [0]),
        .I2(\data_type_reg_reg[5]_0 [1]),
        .I3(mem_wen_i_2_n_0),
        .I4(lbuf_rst_code),
        .I5(lbuf_blk_wen_i),
        .O(lbuf_blk_wen_i_reg));
  LUT5 #(
    .INIT(32'h04040400)) 
    long_pkt_out_i_1
       (.I0(code_notfound),
        .I1(ecc_done),
        .I2(diwc_corrected_csi_zero),
        .I3(\ecc_corrected_reg_n_0_[5] ),
        .I4(\ecc_corrected_reg_n_0_[4] ),
        .O(long_pkt_int));
  FDRE long_pkt_out_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(long_pkt_int),
        .Q(long_pkt_out),
        .R(srst));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    lp_wc0_i_reg_i_1
       (.I0(\control/lp_wc0_i_reg0 ),
        .I1(diwc_valid),
        .I2(lp_wc0),
        .O(lp_wc0_i_reg_reg));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    lp_wc0_i_reg_i_2
       (.I0(lp_wc0_i_reg_i_3_n_0),
        .I1(lp_wc0_i_reg_i_4_n_0),
        .I2(diwc_corrected[20]),
        .I3(diwc_corrected[12]),
        .I4(diwc_corrected[22]),
        .I5(diwc_corrected[17]),
        .O(\control/lp_wc0_i_reg0 ));
  LUT6 #(
    .INIT(64'h000000000000000E)) 
    lp_wc0_i_reg_i_3
       (.I0(diwc_corrected[5]),
        .I1(diwc_corrected[4]),
        .I2(diwc_corrected[16]),
        .I3(diwc_corrected[21]),
        .I4(diwc_corrected[9]),
        .I5(diwc_corrected[14]),
        .O(lp_wc0_i_reg_i_3_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    lp_wc0_i_reg_i_4
       (.I0(diwc_corrected[15]),
        .I1(diwc_corrected[19]),
        .I2(diwc_corrected[10]),
        .I3(diwc_corrected[23]),
        .I4(lp_wc0_i_reg_i_5_n_0),
        .O(lp_wc0_i_reg_i_4_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    lp_wc0_i_reg_i_5
       (.I0(diwc_corrected[13]),
        .I1(diwc_corrected[11]),
        .I2(diwc_corrected[18]),
        .I3(diwc_corrected[8]),
        .O(lp_wc0_i_reg_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000000000004000)) 
    \mask[0]_i_1 
       (.I0(syndrome_code[3]),
        .I1(syndrome_code[2]),
        .I2(syndrome_code[0]),
        .I3(syndrome_code[1]),
        .I4(syndrome_code[5]),
        .I5(syndrome_code[4]),
        .O(mask[0]));
  LUT6 #(
    .INIT(64'h0000000000004000)) 
    \mask[10]_i_1 
       (.I0(syndrome_code[4]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[0]),
        .I3(syndrome_code[1]),
        .I4(syndrome_code[2]),
        .I5(syndrome_code[3]),
        .O(mask[10]));
  LUT6 #(
    .INIT(64'h0000000000400000)) 
    \mask[11]_i_1 
       (.I0(syndrome_code[1]),
        .I1(syndrome_code[0]),
        .I2(syndrome_code[2]),
        .I3(syndrome_code[3]),
        .I4(syndrome_code[5]),
        .I5(syndrome_code[4]),
        .O(mask[11]));
  LUT6 #(
    .INIT(64'h0000000000400000)) 
    \mask[12]_i_1 
       (.I0(syndrome_code[0]),
        .I1(syndrome_code[1]),
        .I2(syndrome_code[2]),
        .I3(syndrome_code[3]),
        .I4(syndrome_code[5]),
        .I5(syndrome_code[4]),
        .O(mask[12]));
  LUT6 #(
    .INIT(64'h0000000000400000)) 
    \mask[13]_i_1 
       (.I0(syndrome_code[4]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[3]),
        .I3(syndrome_code[2]),
        .I4(syndrome_code[0]),
        .I5(syndrome_code[1]),
        .O(mask[13]));
  LUT6 #(
    .INIT(64'h0000000000400000)) 
    \mask[14]_i_1 
       (.I0(syndrome_code[4]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[3]),
        .I3(syndrome_code[2]),
        .I4(syndrome_code[1]),
        .I5(syndrome_code[0]),
        .O(mask[14]));
  LUT6 #(
    .INIT(64'h0000000000004000)) 
    \mask[15]_i_1 
       (.I0(syndrome_code[1]),
        .I1(syndrome_code[2]),
        .I2(syndrome_code[3]),
        .I3(syndrome_code[5]),
        .I4(syndrome_code[4]),
        .I5(syndrome_code[0]),
        .O(mask[15]));
  LUT6 #(
    .INIT(64'h0000000000004000)) 
    \mask[16]_i_1 
       (.I0(syndrome_code[1]),
        .I1(syndrome_code[0]),
        .I2(syndrome_code[5]),
        .I3(syndrome_code[4]),
        .I4(syndrome_code[2]),
        .I5(syndrome_code[3]),
        .O(mask[16]));
  LUT6 #(
    .INIT(64'h0000000000004000)) 
    \mask[17]_i_1 
       (.I0(syndrome_code[0]),
        .I1(syndrome_code[1]),
        .I2(syndrome_code[5]),
        .I3(syndrome_code[4]),
        .I4(syndrome_code[2]),
        .I5(syndrome_code[3]),
        .O(mask[17]));
  LUT6 #(
    .INIT(64'h0010000000000000)) 
    \mask[18]_i_1 
       (.I0(syndrome_code[1]),
        .I1(syndrome_code[0]),
        .I2(syndrome_code[2]),
        .I3(syndrome_code[3]),
        .I4(syndrome_code[5]),
        .I5(syndrome_code[4]),
        .O(mask[18]));
  LUT6 #(
    .INIT(64'h0000000000000080)) 
    \mask[19]_i_1 
       (.I0(syndrome_code[4]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[3]),
        .I3(syndrome_code[2]),
        .I4(syndrome_code[0]),
        .I5(syndrome_code[1]),
        .O(mask[19]));
  LUT6 #(
    .INIT(64'h0010000000000000)) 
    \mask[1]_i_1 
       (.I0(syndrome_code[4]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[3]),
        .I3(syndrome_code[2]),
        .I4(syndrome_code[0]),
        .I5(syndrome_code[1]),
        .O(mask[1]));
  LUT6 #(
    .INIT(64'h2000000000000000)) 
    \mask[20]_i_1 
       (.I0(syndrome_code[4]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[0]),
        .I3(syndrome_code[1]),
        .I4(syndrome_code[2]),
        .I5(syndrome_code[3]),
        .O(\mask[20]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h4000000000000000)) 
    \mask[21]_i_1 
       (.I0(syndrome_code[4]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[0]),
        .I3(syndrome_code[1]),
        .I4(syndrome_code[2]),
        .I5(syndrome_code[3]),
        .O(mask[21]));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    \mask[22]_i_1 
       (.I0(syndrome_code[1]),
        .I1(syndrome_code[0]),
        .I2(syndrome_code[2]),
        .I3(syndrome_code[3]),
        .I4(syndrome_code[5]),
        .I5(syndrome_code[4]),
        .O(mask[22]));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    \mask[23]_i_1 
       (.I0(syndrome_code[4]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[3]),
        .I3(syndrome_code[2]),
        .I4(syndrome_code[0]),
        .I5(syndrome_code[1]),
        .O(mask[23]));
  LUT6 #(
    .INIT(64'h0000000000004000)) 
    \mask[2]_i_1 
       (.I0(syndrome_code[1]),
        .I1(syndrome_code[0]),
        .I2(syndrome_code[2]),
        .I3(syndrome_code[3]),
        .I4(syndrome_code[5]),
        .I5(syndrome_code[4]),
        .O(mask[2]));
  LUT6 #(
    .INIT(64'h0000000000004000)) 
    \mask[3]_i_1 
       (.I0(syndrome_code[0]),
        .I1(syndrome_code[1]),
        .I2(syndrome_code[2]),
        .I3(syndrome_code[3]),
        .I4(syndrome_code[5]),
        .I5(syndrome_code[4]),
        .O(mask[3]));
  LUT6 #(
    .INIT(64'h0000000000002000)) 
    \mask[4]_i_1 
       (.I0(syndrome_code[4]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[0]),
        .I3(syndrome_code[1]),
        .I4(syndrome_code[2]),
        .I5(syndrome_code[3]),
        .O(\mask[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000200000)) 
    \mask[5]_i_1 
       (.I0(syndrome_code[4]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[2]),
        .I3(syndrome_code[3]),
        .I4(syndrome_code[0]),
        .I5(syndrome_code[1]),
        .O(\mask[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000400000)) 
    \mask[6]_i_1 
       (.I0(syndrome_code[3]),
        .I1(syndrome_code[2]),
        .I2(syndrome_code[1]),
        .I3(syndrome_code[0]),
        .I4(syndrome_code[4]),
        .I5(syndrome_code[5]),
        .O(mask[6]));
  LUT6 #(
    .INIT(64'h0000000000200000)) 
    \mask[7]_i_1 
       (.I0(syndrome_code[4]),
        .I1(syndrome_code[5]),
        .I2(syndrome_code[3]),
        .I3(syndrome_code[2]),
        .I4(syndrome_code[0]),
        .I5(syndrome_code[1]),
        .O(\mask[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000400000)) 
    \mask[8]_i_1 
       (.I0(syndrome_code[2]),
        .I1(syndrome_code[3]),
        .I2(syndrome_code[1]),
        .I3(syndrome_code[0]),
        .I4(syndrome_code[4]),
        .I5(syndrome_code[5]),
        .O(mask[8]));
  LUT6 #(
    .INIT(64'h0000000000400000)) 
    \mask[9]_i_1 
       (.I0(syndrome_code[1]),
        .I1(syndrome_code[2]),
        .I2(syndrome_code[3]),
        .I3(syndrome_code[5]),
        .I4(syndrome_code[4]),
        .I5(syndrome_code[0]),
        .O(mask[9]));
  FDRE \mask_reg[0] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[0]),
        .Q(\mask_reg_n_0_[0] ),
        .R(srst));
  FDRE \mask_reg[10] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[10]),
        .Q(\mask_reg_n_0_[10] ),
        .R(srst));
  FDRE \mask_reg[11] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[11]),
        .Q(\mask_reg_n_0_[11] ),
        .R(srst));
  FDRE \mask_reg[12] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[12]),
        .Q(\mask_reg_n_0_[12] ),
        .R(srst));
  FDRE \mask_reg[13] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[13]),
        .Q(\mask_reg_n_0_[13] ),
        .R(srst));
  FDRE \mask_reg[14] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[14]),
        .Q(\mask_reg_n_0_[14] ),
        .R(srst));
  FDRE \mask_reg[15] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[15]),
        .Q(\mask_reg_n_0_[15] ),
        .R(srst));
  FDRE \mask_reg[16] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[16]),
        .Q(\mask_reg_n_0_[16] ),
        .R(srst));
  FDRE \mask_reg[17] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[17]),
        .Q(\mask_reg_n_0_[17] ),
        .R(srst));
  FDRE \mask_reg[18] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[18]),
        .Q(\mask_reg_n_0_[18] ),
        .R(srst));
  FDRE \mask_reg[19] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[19]),
        .Q(\mask_reg_n_0_[19] ),
        .R(srst));
  FDRE \mask_reg[1] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[1]),
        .Q(\mask_reg_n_0_[1] ),
        .R(srst));
  FDRE \mask_reg[20] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(\mask[20]_i_1_n_0 ),
        .Q(\mask_reg_n_0_[20] ),
        .R(srst));
  FDRE \mask_reg[21] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[21]),
        .Q(\mask_reg_n_0_[21] ),
        .R(srst));
  FDRE \mask_reg[22] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[22]),
        .Q(\mask_reg_n_0_[22] ),
        .R(srst));
  FDRE \mask_reg[23] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[23]),
        .Q(\mask_reg_n_0_[23] ),
        .R(srst));
  FDRE \mask_reg[2] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[2]),
        .Q(\mask_reg_n_0_[2] ),
        .R(srst));
  FDRE \mask_reg[3] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[3]),
        .Q(\mask_reg_n_0_[3] ),
        .R(srst));
  FDRE \mask_reg[4] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(\mask[4]_i_1_n_0 ),
        .Q(\mask_reg_n_0_[4] ),
        .R(srst));
  FDRE \mask_reg[5] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(\mask[5]_i_1_n_0 ),
        .Q(\mask_reg_n_0_[5] ),
        .R(srst));
  FDRE \mask_reg[6] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[6]),
        .Q(\mask_reg_n_0_[6] ),
        .R(srst));
  FDRE \mask_reg[7] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(\mask[7]_i_1_n_0 ),
        .Q(\mask_reg_n_0_[7] ),
        .R(srst));
  FDRE \mask_reg[8] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[8]),
        .Q(\mask_reg_n_0_[8] ),
        .R(srst));
  FDRE \mask_reg[9] 
       (.C(m_axis_aclk),
        .CE(E),
        .D(mask[9]),
        .Q(\mask_reg_n_0_[9] ),
        .R(srst));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \mem_wdata[65]_i_1 
       (.I0(m_axis_aresetn),
        .I1(\mem_wdata_reg[65] ),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[67] [0]),
        .O(\mem_wdata_reg[67] [0]));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \mem_wdata[66]_i_1 
       (.I0(m_axis_aresetn),
        .I1(\mem_wdata_reg[65] ),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[67] [1]),
        .O(\mem_wdata_reg[67] [1]));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \mem_wdata[67]_i_1 
       (.I0(m_axis_aresetn),
        .I1(\mem_wdata_reg[65] ),
        .I2(\LINE_BUF_WR_64.mem_wdata_i_reg[67] [2]),
        .O(\mem_wdata_reg[67] [2]));
  LUT6 #(
    .INIT(64'h00000008AAAAAAAA)) 
    \mem_wdata[67]_i_2 
       (.I0(almost_full),
        .I1(mem_wen_i_2_n_0),
        .I2(\data_type_reg_reg[5]_0 [1]),
        .I3(\data_type_reg_reg[5]_0 [0]),
        .I4(full),
        .I5(lbuf_blk_wen_i),
        .O(\mem_wdata_reg[65] ));
  LUT6 #(
    .INIT(64'h000000080000AAAA)) 
    mem_wen_i_1
       (.I0(mem_wen_i),
        .I1(mem_wen_i_2_n_0),
        .I2(\data_type_reg_reg[5]_0 [1]),
        .I3(\data_type_reg_reg[5]_0 [0]),
        .I4(full),
        .I5(lbuf_blk_wen_i),
        .O(mem_wen0));
  LUT4 #(
    .INIT(16'h0001)) 
    mem_wen_i_2
       (.I0(data_type[0]),
        .I1(data_type[2]),
        .I2(data_type[1]),
        .I3(data_type[3]),
        .O(mem_wen_i_2_n_0));
  FDRE phecc_done_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_done),
        .Q(phecc_done),
        .R(srst));
  LUT6 #(
    .INIT(64'h00000000FFFEFFFF)) 
    \phecc_status[1]_i_1 
       (.I0(syndrome_code[1]),
        .I1(syndrome_code[0]),
        .I2(syndrome_code[3]),
        .I3(syndrome_code[2]),
        .I4(\phecc_status[1]_i_2_n_0 ),
        .I5(code_notfound),
        .O(ecc_status));
  LUT2 #(
    .INIT(4'h1)) 
    \phecc_status[1]_i_2 
       (.I0(syndrome_code[5]),
        .I1(syndrome_code[4]),
        .O(\phecc_status[1]_i_2_n_0 ));
  FDRE \phecc_status_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(ecc_status),
        .Q(phecc_status[0]),
        .R(srst));
  FDRE \phecc_status_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(code_notfound),
        .Q(phecc_status[1]),
        .R(srst));
  LUT1 #(
    .INIT(2'h2)) 
    phecci_0
       (.I0(1'b0),
        .O(calcd_ecc[7]));
  LUT1 #(
    .INIT(2'h2)) 
    phecci_1
       (.I0(1'b0),
        .O(calcd_ecc[6]));
  LUT1 #(
    .INIT(2'h2)) 
    phecci_2
       (.I0(1'b0),
        .O(syndrome_sum[3]));
  FDRE \pkt_header_reg[0] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[0]),
        .Q(\pkt_header_reg_n_0_[0] ),
        .R(srst));
  FDRE \pkt_header_reg[10] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[10]),
        .Q(p_4_in),
        .R(srst));
  FDRE \pkt_header_reg[11] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[11]),
        .Q(p_5_in),
        .R(srst));
  FDRE \pkt_header_reg[12] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[12]),
        .Q(p_14_in),
        .R(srst));
  FDRE \pkt_header_reg[13] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[13]),
        .Q(p_6_in),
        .R(srst));
  FDRE \pkt_header_reg[14] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[14]),
        .Q(p_15_in),
        .R(srst));
  FDRE \pkt_header_reg[15] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[15]),
        .Q(p_19_in),
        .R(srst));
  FDRE \pkt_header_reg[16] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[16]),
        .Q(p_7_in),
        .R(srst));
  FDRE \pkt_header_reg[17] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[17]),
        .Q(p_16_in),
        .R(srst));
  FDRE \pkt_header_reg[18] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[18]),
        .Q(p_20_in),
        .R(srst));
  FDRE \pkt_header_reg[19] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[19]),
        .Q(p_22_in),
        .R(srst));
  FDRE \pkt_header_reg[1] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[1]),
        .Q(\pkt_header_reg_n_0_[1] ),
        .R(srst));
  FDRE \pkt_header_reg[20] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[20]),
        .Q(p_8_in),
        .R(srst));
  FDRE \pkt_header_reg[21] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[21]),
        .Q(p_9_in),
        .R(srst));
  FDRE \pkt_header_reg[22] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[22]),
        .Q(p_10_in),
        .R(srst));
  FDRE \pkt_header_reg[23] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[23]),
        .Q(p_23_in),
        .R(srst));
  FDRE \pkt_header_reg[2] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[2]),
        .Q(p_0_in0_in),
        .R(srst));
  FDRE \pkt_header_reg[3] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[3]),
        .Q(p_11_in),
        .R(srst));
  FDRE \pkt_header_reg[4] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[4]),
        .Q(p_1_in),
        .R(srst));
  FDRE \pkt_header_reg[5] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[5]),
        .Q(p_2_in),
        .R(srst));
  FDRE \pkt_header_reg[6] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[6]),
        .Q(p_12_in),
        .R(srst));
  FDRE \pkt_header_reg[7] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[7]),
        .Q(p_3_in),
        .R(srst));
  FDRE \pkt_header_reg[8] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[8]),
        .Q(p_13_in),
        .R(srst));
  FDRE \pkt_header_reg[9] 
       (.C(m_axis_aclk),
        .CE(pkt_valid),
        .D(pkt_data[9]),
        .Q(p_18_in),
        .R(srst));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt1_i_10
       (.I0(byt_cnt_adj[13]),
        .I1(\cur_byte_cnt_reg[15] [12]),
        .I2(byt_cnt_adj[12]),
        .I3(\cur_byte_cnt_reg[15] [11]),
        .O(pre_byt_cnt1_i_10_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt1_i_11
       (.I0(byt_cnt_adj[11]),
        .I1(\cur_byte_cnt_reg[15] [10]),
        .I2(byt_cnt_adj[10]),
        .I3(\cur_byte_cnt_reg[15] [9]),
        .O(pre_byt_cnt1_i_11_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt1_i_12
       (.I0(byt_cnt_adj[9]),
        .I1(\cur_byte_cnt_reg[15] [8]),
        .I2(byt_cnt_adj[8]),
        .I3(\cur_byte_cnt_reg[15] [7]),
        .O(pre_byt_cnt1_i_12_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    pre_byt_cnt1_i_13
       (.I0(\cur_byte_cnt_reg[15] [6]),
        .I1(byt_cnt_adj[7]),
        .I2(\cur_byte_cnt_reg[15] [5]),
        .I3(byt_cnt_adj[6]),
        .O(pre_byt_cnt1_i_13_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    pre_byt_cnt1_i_14
       (.I0(\cur_byte_cnt_reg[15] [4]),
        .I1(byt_cnt_adj[5]),
        .I2(\cur_byte_cnt_reg[15] [3]),
        .I3(byt_cnt_adj[4]),
        .O(pre_byt_cnt1_i_14_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    pre_byt_cnt1_i_15
       (.I0(\cur_byte_cnt_reg[15] [2]),
        .I1(byt_cnt_adj[3]),
        .I2(\cur_byte_cnt_reg[15] [1]),
        .I3(byt_cnt_adj[2]),
        .O(pre_byt_cnt1_i_15_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    pre_byt_cnt1_i_16
       (.I0(\cur_byte_cnt_reg[15] [0]),
        .I1(byt_cnt_adj[1]),
        .I2(\cur_byte_cnt_reg[0] ),
        .I3(byt_cnt_adj[0]),
        .O(pre_byt_cnt1_i_16_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt1_i_17
       (.I0(byt_cnt_adj[7]),
        .I1(\cur_byte_cnt_reg[15] [6]),
        .I2(byt_cnt_adj[6]),
        .I3(\cur_byte_cnt_reg[15] [5]),
        .O(pre_byt_cnt1_i_17_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt1_i_18
       (.I0(byt_cnt_adj[5]),
        .I1(\cur_byte_cnt_reg[15] [4]),
        .I2(byt_cnt_adj[4]),
        .I3(\cur_byte_cnt_reg[15] [3]),
        .O(pre_byt_cnt1_i_18_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt1_i_19
       (.I0(byt_cnt_adj[3]),
        .I1(\cur_byte_cnt_reg[15] [2]),
        .I2(byt_cnt_adj[2]),
        .I3(\cur_byte_cnt_reg[15] [1]),
        .O(pre_byt_cnt1_i_19_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt1_i_20
       (.I0(byt_cnt_adj[1]),
        .I1(\cur_byte_cnt_reg[15] [0]),
        .I2(byt_cnt_adj[0]),
        .I3(\cur_byte_cnt_reg[0] ),
        .O(pre_byt_cnt1_i_20_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    pre_byt_cnt1_i_5
       (.I0(\cur_byte_cnt_reg[15] [14]),
        .I1(byt_cnt_adj[15]),
        .I2(\cur_byte_cnt_reg[15] [13]),
        .I3(byt_cnt_adj[14]),
        .O(pre_byt_cnt1_i_5_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    pre_byt_cnt1_i_6
       (.I0(\cur_byte_cnt_reg[15] [12]),
        .I1(byt_cnt_adj[13]),
        .I2(\cur_byte_cnt_reg[15] [11]),
        .I3(byt_cnt_adj[12]),
        .O(pre_byt_cnt1_i_6_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    pre_byt_cnt1_i_7
       (.I0(\cur_byte_cnt_reg[15] [10]),
        .I1(byt_cnt_adj[11]),
        .I2(\cur_byte_cnt_reg[15] [9]),
        .I3(byt_cnt_adj[10]),
        .O(pre_byt_cnt1_i_7_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    pre_byt_cnt1_i_8
       (.I0(\cur_byte_cnt_reg[15] [8]),
        .I1(byt_cnt_adj[9]),
        .I2(\cur_byte_cnt_reg[15] [7]),
        .I3(byt_cnt_adj[8]),
        .O(pre_byt_cnt1_i_8_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt1_i_9
       (.I0(byt_cnt_adj[15]),
        .I1(\cur_byte_cnt_reg[15] [14]),
        .I2(byt_cnt_adj[14]),
        .I3(\cur_byte_cnt_reg[15] [13]),
        .O(pre_byt_cnt1_i_9_n_0));
  CARRY4 pre_byt_cnt1_reg_i_2
       (.CI(pre_byt_cnt1_reg_i_4_n_0),
        .CO({pre_byt_cnt1_reg,pre_byt_cnt1_reg_i_2_n_1,pre_byt_cnt1_reg_i_2_n_2,pre_byt_cnt1_reg_i_2_n_3}),
        .CYINIT(1'b0),
        .DI({pre_byt_cnt1_i_5_n_0,pre_byt_cnt1_i_6_n_0,pre_byt_cnt1_i_7_n_0,pre_byt_cnt1_i_8_n_0}),
        .O(NLW_pre_byt_cnt1_reg_i_2_O_UNCONNECTED[3:0]),
        .S({pre_byt_cnt1_i_9_n_0,pre_byt_cnt1_i_10_n_0,pre_byt_cnt1_i_11_n_0,pre_byt_cnt1_i_12_n_0}));
  CARRY4 pre_byt_cnt1_reg_i_4
       (.CI(1'b0),
        .CO({pre_byt_cnt1_reg_i_4_n_0,pre_byt_cnt1_reg_i_4_n_1,pre_byt_cnt1_reg_i_4_n_2,pre_byt_cnt1_reg_i_4_n_3}),
        .CYINIT(1'b1),
        .DI({pre_byt_cnt1_i_13_n_0,pre_byt_cnt1_i_14_n_0,pre_byt_cnt1_i_15_n_0,pre_byt_cnt1_i_16_n_0}),
        .O(NLW_pre_byt_cnt1_reg_i_4_O_UNCONNECTED[3:0]),
        .S({pre_byt_cnt1_i_17_n_0,pre_byt_cnt1_i_18_n_0,pre_byt_cnt1_i_19_n_0,pre_byt_cnt1_i_20_n_0}));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt2_i_10
       (.I0(byte_cnt[13]),
        .I1(\cur_byte_cnt_reg[15] [12]),
        .I2(byte_cnt[12]),
        .I3(\cur_byte_cnt_reg[15] [11]),
        .O(pre_byt_cnt2_i_10_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt2_i_11
       (.I0(byte_cnt[11]),
        .I1(\cur_byte_cnt_reg[15] [10]),
        .I2(byte_cnt[10]),
        .I3(\cur_byte_cnt_reg[15] [9]),
        .O(pre_byt_cnt2_i_11_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt2_i_12
       (.I0(byte_cnt[9]),
        .I1(\cur_byte_cnt_reg[15] [8]),
        .I2(byte_cnt[8]),
        .I3(\cur_byte_cnt_reg[15] [7]),
        .O(pre_byt_cnt2_i_12_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    pre_byt_cnt2_i_13
       (.I0(\cur_byte_cnt_reg[15] [6]),
        .I1(byte_cnt[7]),
        .I2(\cur_byte_cnt_reg[15] [5]),
        .I3(byte_cnt[6]),
        .O(pre_byt_cnt2_i_13_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    pre_byt_cnt2_i_14
       (.I0(\cur_byte_cnt_reg[15] [4]),
        .I1(byte_cnt[5]),
        .I2(\cur_byte_cnt_reg[15] [3]),
        .I3(byte_cnt[4]),
        .O(pre_byt_cnt2_i_14_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    pre_byt_cnt2_i_15
       (.I0(\cur_byte_cnt_reg[15] [2]),
        .I1(byte_cnt[3]),
        .I2(\cur_byte_cnt_reg[15] [1]),
        .I3(byte_cnt[2]),
        .O(pre_byt_cnt2_i_15_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    pre_byt_cnt2_i_16
       (.I0(\cur_byte_cnt_reg[15] [0]),
        .I1(crc_partial_reg[1]),
        .I2(\cur_byte_cnt_reg[0] ),
        .I3(crc_partial_reg[0]),
        .O(pre_byt_cnt2_i_16_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt2_i_17
       (.I0(byte_cnt[7]),
        .I1(\cur_byte_cnt_reg[15] [6]),
        .I2(byte_cnt[6]),
        .I3(\cur_byte_cnt_reg[15] [5]),
        .O(pre_byt_cnt2_i_17_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt2_i_18
       (.I0(byte_cnt[5]),
        .I1(\cur_byte_cnt_reg[15] [4]),
        .I2(byte_cnt[4]),
        .I3(\cur_byte_cnt_reg[15] [3]),
        .O(pre_byt_cnt2_i_18_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt2_i_19
       (.I0(byte_cnt[3]),
        .I1(\cur_byte_cnt_reg[15] [2]),
        .I2(byte_cnt[2]),
        .I3(\cur_byte_cnt_reg[15] [1]),
        .O(pre_byt_cnt2_i_19_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt2_i_20
       (.I0(crc_partial_reg[1]),
        .I1(\cur_byte_cnt_reg[15] [0]),
        .I2(crc_partial_reg[0]),
        .I3(\cur_byte_cnt_reg[0] ),
        .O(pre_byt_cnt2_i_20_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    pre_byt_cnt2_i_5
       (.I0(\cur_byte_cnt_reg[15] [14]),
        .I1(byte_cnt[15]),
        .I2(\cur_byte_cnt_reg[15] [13]),
        .I3(byte_cnt[14]),
        .O(pre_byt_cnt2_i_5_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    pre_byt_cnt2_i_6
       (.I0(\cur_byte_cnt_reg[15] [12]),
        .I1(byte_cnt[13]),
        .I2(\cur_byte_cnt_reg[15] [11]),
        .I3(byte_cnt[12]),
        .O(pre_byt_cnt2_i_6_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    pre_byt_cnt2_i_7
       (.I0(\cur_byte_cnt_reg[15] [10]),
        .I1(byte_cnt[11]),
        .I2(\cur_byte_cnt_reg[15] [9]),
        .I3(byte_cnt[10]),
        .O(pre_byt_cnt2_i_7_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    pre_byt_cnt2_i_8
       (.I0(\cur_byte_cnt_reg[15] [8]),
        .I1(byte_cnt[9]),
        .I2(\cur_byte_cnt_reg[15] [7]),
        .I3(byte_cnt[8]),
        .O(pre_byt_cnt2_i_8_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    pre_byt_cnt2_i_9
       (.I0(byte_cnt[15]),
        .I1(\cur_byte_cnt_reg[15] [14]),
        .I2(byte_cnt[14]),
        .I3(\cur_byte_cnt_reg[15] [13]),
        .O(pre_byt_cnt2_i_9_n_0));
  CARRY4 pre_byt_cnt2_reg_i_2
       (.CI(pre_byt_cnt2_reg_i_4_n_0),
        .CO({pre_byt_cnt2_reg,pre_byt_cnt2_reg_i_2_n_1,pre_byt_cnt2_reg_i_2_n_2,pre_byt_cnt2_reg_i_2_n_3}),
        .CYINIT(1'b0),
        .DI({pre_byt_cnt2_i_5_n_0,pre_byt_cnt2_i_6_n_0,pre_byt_cnt2_i_7_n_0,pre_byt_cnt2_i_8_n_0}),
        .O(NLW_pre_byt_cnt2_reg_i_2_O_UNCONNECTED[3:0]),
        .S({pre_byt_cnt2_i_9_n_0,pre_byt_cnt2_i_10_n_0,pre_byt_cnt2_i_11_n_0,pre_byt_cnt2_i_12_n_0}));
  CARRY4 pre_byt_cnt2_reg_i_4
       (.CI(1'b0),
        .CO({pre_byt_cnt2_reg_i_4_n_0,pre_byt_cnt2_reg_i_4_n_1,pre_byt_cnt2_reg_i_4_n_2,pre_byt_cnt2_reg_i_4_n_3}),
        .CYINIT(1'b1),
        .DI({pre_byt_cnt2_i_13_n_0,pre_byt_cnt2_i_14_n_0,pre_byt_cnt2_i_15_n_0,pre_byt_cnt2_i_16_n_0}),
        .O(NLW_pre_byt_cnt2_reg_i_4_O_UNCONNECTED[3:0]),
        .S({pre_byt_cnt2_i_17_n_0,pre_byt_cnt2_i_18_n_0,pre_byt_cnt2_i_19_n_0,pre_byt_cnt2_i_20_n_0}));
  LUT2 #(
    .INIT(4'h8)) 
    \reg_ecc_status_i[1]_i_1 
       (.I0(phecc_done),
        .I1(phecc_status[0]),
        .O(\reg_ecc_status_i_reg[2] [0]));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \reg_ecc_status_i[2]_i_1 
       (.I0(phecc_status[1]),
        .I1(phecc_done),
        .O(\reg_ecc_status_i_reg[2] [1]));
  LUT5 #(
    .INIT(32'h00000020)) 
    short_pkt_i_1
       (.I0(\byte_cnt_reg[15]_i_2_n_0 ),
        .I1(\ecc_corrected_reg_n_0_[2] ),
        .I2(ecc_done),
        .I3(code_notfound),
        .I4(\ecc_corrected_reg_n_0_[3] ),
        .O(short_pkt_int));
  FDRE short_pkt_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(short_pkt_int),
        .Q(short_pkt),
        .R(srst));
  LUT2 #(
    .INIT(4'h6)) 
    syndrome_code_inferred_i_1
       (.I0(calcd_ecc[7]),
        .I1(exp_ecc_i[7]),
        .O(syndrome_code[7]));
  LUT2 #(
    .INIT(4'h6)) 
    syndrome_code_inferred_i_2
       (.I0(calcd_ecc[6]),
        .I1(exp_ecc_i[6]),
        .O(syndrome_code[6]));
  LUT2 #(
    .INIT(4'h6)) 
    syndrome_code_inferred_i_3
       (.I0(calcd_ecc[5]),
        .I1(exp_ecc_i[5]),
        .O(syndrome_code[5]));
  LUT2 #(
    .INIT(4'h6)) 
    syndrome_code_inferred_i_4
       (.I0(calcd_ecc[4]),
        .I1(exp_ecc_i[4]),
        .O(syndrome_code[4]));
  LUT2 #(
    .INIT(4'h6)) 
    syndrome_code_inferred_i_5
       (.I0(calcd_ecc[3]),
        .I1(exp_ecc_i[3]),
        .O(syndrome_code[3]));
  LUT2 #(
    .INIT(4'h6)) 
    syndrome_code_inferred_i_6
       (.I0(calcd_ecc[2]),
        .I1(exp_ecc_i[2]),
        .O(syndrome_code[2]));
  LUT2 #(
    .INIT(4'h6)) 
    syndrome_code_inferred_i_7
       (.I0(calcd_ecc[1]),
        .I1(exp_ecc_i[1]),
        .O(syndrome_code[1]));
  LUT2 #(
    .INIT(4'h6)) 
    syndrome_code_inferred_i_8
       (.I0(calcd_ecc[0]),
        .I1(exp_ecc_i[0]),
        .O(syndrome_code[0]));
  LUT6 #(
    .INIT(64'hFEE8E880E8808000)) 
    syndrome_sum_inferred_i_1
       (.I0(syndrome_code[0]),
        .I1(syndrome_code[1]),
        .I2(syndrome_code[5]),
        .I3(syndrome_code[2]),
        .I4(syndrome_code[3]),
        .I5(syndrome_code[4]),
        .O(syndrome_sum[2]));
  LUT6 #(
    .INIT(64'h8117177E177E7EE8)) 
    syndrome_sum_inferred_i_2
       (.I0(syndrome_code[0]),
        .I1(syndrome_code[1]),
        .I2(syndrome_code[5]),
        .I3(syndrome_code[4]),
        .I4(syndrome_code[3]),
        .I5(syndrome_code[2]),
        .O(syndrome_sum[1]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    syndrome_sum_inferred_i_3
       (.I0(syndrome_code[2]),
        .I1(syndrome_code[3]),
        .I2(syndrome_code[4]),
        .I3(syndrome_code[5]),
        .I4(syndrome_code[1]),
        .I5(syndrome_code[0]),
        .O(syndrome_sum[0]));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_pkt_fifo" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_pkt_fifo
   (dout,
    empty,
    reg_status,
    \LINE_BUF_WR_64.mem_data_l32_reg[31] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[0] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[1] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[2] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[3] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[4] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[7] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[8] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[9] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[10] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[17] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[18] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[19] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[20] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[22] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[23] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[5] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[6] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[11] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[16] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[21] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[12] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[13] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[14] ,
    \LINE_BUF_WR_64.mem_data_l32_reg[15] ,
    \crc_p_value_reg[15] ,
    \exp_crc_r_reg[15] ,
    rst,
    dl0_rxbyteclkhs,
    m_axis_aclk,
    din,
    wr_en,
    rd_en,
    pkt_valid,
    data_wip_reg_reg,
    \data_type_reg_reg[5] ,
    \data_type_reg_reg[4] ,
    Q,
    lp_wc0,
    \exp_crc_i_reg[15] );
  output [37:0]dout;
  output empty;
  output [5:0]reg_status;
  output [7:0]\LINE_BUF_WR_64.mem_data_l32_reg[31] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[0] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[1] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[2] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[3] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[4] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[7] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[8] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[9] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[10] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[17] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[18] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[19] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[20] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[22] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[23] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[5] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[6] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[11] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[16] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[21] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[12] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[13] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[14] ;
  output \LINE_BUF_WR_64.mem_data_l32_reg[15] ;
  output [15:0]\crc_p_value_reg[15] ;
  output [15:0]\exp_crc_r_reg[15] ;
  input rst;
  input dl0_rxbyteclkhs;
  input m_axis_aclk;
  input [41:0]din;
  input wr_en;
  input rd_en;
  input pkt_valid;
  input data_wip_reg_reg;
  input \data_type_reg_reg[5] ;
  input \data_type_reg_reg[4] ;
  input [1:0]Q;
  input lp_wc0;
  input [15:0]\exp_crc_i_reg[15] ;

  wire \LINE_BUF_WR_64.mem_data_l32_reg[0] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[10] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[11] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[12] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[13] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[14] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[15] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[16] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[17] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[18] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[19] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[1] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[20] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[21] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[22] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[23] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[2] ;
  wire [7:0]\LINE_BUF_WR_64.mem_data_l32_reg[31] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[3] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[4] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[5] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[6] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[7] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[8] ;
  wire \LINE_BUF_WR_64.mem_data_l32_reg[9] ;
  wire [1:0]Q;
  wire [15:0]\crc_p_value_reg[15] ;
  wire \data_type_reg_reg[4] ;
  wire \data_type_reg_reg[5] ;
  wire data_wip_reg_reg;
  wire [41:0]din;
  wire dl0_rxbyteclkhs;
  wire [37:0]dout;
  wire empty;
  wire [15:0]\exp_crc_i_reg[15] ;
  wire [15:0]\exp_crc_r_reg[15] ;
  wire lp_wc0;
  wire m_axis_aclk;
  wire pkt_fifo_full;
  wire [39:28]pkt_fifo_rdata;
  wire pkt_valid;
  wire rd_en;
  wire [5:0]reg_status;
  wire rst;
  wire wr_en;

  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT4 #(
    .INIT(16'hE000)) 
    \HSC2R_CDC[10].hsc2r_bus_cdc_i_1 
       (.I0(dout[8]),
        .I1(dout[18]),
        .I2(dout[36]),
        .I3(pkt_valid),
        .O(reg_status[0]));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT4 #(
    .INIT(16'hC080)) 
    \HSC2R_CDC[11].hsc2r_bus_cdc_i_1 
       (.I0(dout[19]),
        .I1(pkt_valid),
        .I2(dout[36]),
        .I3(dout[9]),
        .O(reg_status[1]));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \HSC2R_CDC[12].hsc2r_bus_cdc_i_1 
       (.I0(dout[8]),
        .I1(dout[36]),
        .I2(pkt_valid),
        .O(reg_status[2]));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \HSC2R_CDC[13].hsc2r_bus_cdc_i_1 
       (.I0(dout[9]),
        .I1(dout[36]),
        .I2(pkt_valid),
        .O(reg_status[3]));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \HSC2R_CDC[14].hsc2r_bus_cdc_i_1 
       (.I0(dout[18]),
        .I1(dout[36]),
        .I2(pkt_valid),
        .O(reg_status[4]));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \HSC2R_CDC[15].hsc2r_bus_cdc_i_1 
       (.I0(dout[19]),
        .I1(dout[36]),
        .I2(pkt_valid),
        .O(reg_status[5]));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT4 #(
    .INIT(16'hFFAC)) 
    \LINE_BUF_WR_64.mem_data_l32[0]_i_2 
       (.I0(dout[1]),
        .I1(dout[0]),
        .I2(\data_type_reg_reg[4] ),
        .I3(\data_type_reg_reg[5] ),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[10]_i_2 
       (.I0(dout[16]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[12]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[10] ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[11]_i_2 
       (.I0(dout[17]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[13]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[11] ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT4 #(
    .INIT(16'h0DFD)) 
    \LINE_BUF_WR_64.mem_data_l32[12]_i_2 
       (.I0(dout[14]),
        .I1(\data_type_reg_reg[4] ),
        .I2(\data_type_reg_reg[5] ),
        .I3(dout[24]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[12] ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT4 #(
    .INIT(16'h0DFD)) 
    \LINE_BUF_WR_64.mem_data_l32[13]_i_2 
       (.I0(dout[15]),
        .I1(\data_type_reg_reg[4] ),
        .I2(\data_type_reg_reg[5] ),
        .I3(dout[25]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[13] ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT4 #(
    .INIT(16'h0DFD)) 
    \LINE_BUF_WR_64.mem_data_l32[14]_i_2 
       (.I0(dout[16]),
        .I1(\data_type_reg_reg[4] ),
        .I2(\data_type_reg_reg[5] ),
        .I3(dout[26]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[14] ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT4 #(
    .INIT(16'h0DFD)) 
    \LINE_BUF_WR_64.mem_data_l32[15]_i_2 
       (.I0(dout[17]),
        .I1(\data_type_reg_reg[4] ),
        .I2(\data_type_reg_reg[5] ),
        .I3(dout[27]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[15] ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[16]_i_2 
       (.I0(dout[21]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[20]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[16] ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[17]_i_2 
       (.I0(dout[22]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[21]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[17] ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[18]_i_2 
       (.I0(dout[23]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[22]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[18] ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[19]_i_2 
       (.I0(dout[24]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[23]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[19] ));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[1]_i_2 
       (.I0(dout[2]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[1]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[20]_i_2 
       (.I0(dout[27]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[24]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[20] ));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[21]_i_2 
       (.I0(dout[28]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[25]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[21] ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT4 #(
    .INIT(16'hFFAC)) 
    \LINE_BUF_WR_64.mem_data_l32[22]_i_2 
       (.I0(dout[29]),
        .I1(dout[26]),
        .I2(\data_type_reg_reg[4] ),
        .I3(\data_type_reg_reg[5] ),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[22] ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[23]_i_2 
       (.I0(dout[30]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[27]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[23] ));
  LUT6 #(
    .INIT(64'h00000000FFB800B8)) 
    \LINE_BUF_WR_64.mem_data_l32[24]_i_1 
       (.I0(dout[32]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[28]),
        .I3(\data_type_reg_reg[5] ),
        .I4(dout[0]),
        .I5(data_wip_reg_reg),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[31] [0]));
  LUT6 #(
    .INIT(64'h00000000FFB800B8)) 
    \LINE_BUF_WR_64.mem_data_l32[25]_i_1 
       (.I0(dout[33]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[29]),
        .I3(\data_type_reg_reg[5] ),
        .I4(dout[1]),
        .I5(data_wip_reg_reg),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[31] [1]));
  LUT6 #(
    .INIT(64'h00000000FFB800B8)) 
    \LINE_BUF_WR_64.mem_data_l32[26]_i_1 
       (.I0(dout[34]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[30]),
        .I3(\data_type_reg_reg[5] ),
        .I4(dout[2]),
        .I5(data_wip_reg_reg),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[31] [2]));
  LUT6 #(
    .INIT(64'h00000000FFB800B8)) 
    \LINE_BUF_WR_64.mem_data_l32[27]_i_1 
       (.I0(dout[35]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[31]),
        .I3(\data_type_reg_reg[5] ),
        .I4(dout[3]),
        .I5(data_wip_reg_reg),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[31] [3]));
  LUT5 #(
    .INIT(32'h40454040)) 
    \LINE_BUF_WR_64.mem_data_l32[28]_i_1 
       (.I0(data_wip_reg_reg),
        .I1(dout[4]),
        .I2(\data_type_reg_reg[5] ),
        .I3(\data_type_reg_reg[4] ),
        .I4(dout[32]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[31] [4]));
  LUT5 #(
    .INIT(32'h40454040)) 
    \LINE_BUF_WR_64.mem_data_l32[29]_i_1 
       (.I0(data_wip_reg_reg),
        .I1(dout[5]),
        .I2(\data_type_reg_reg[5] ),
        .I3(\data_type_reg_reg[4] ),
        .I4(dout[33]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[31] [5]));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[2]_i_2 
       (.I0(dout[3]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[2]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[2] ));
  LUT5 #(
    .INIT(32'h40454040)) 
    \LINE_BUF_WR_64.mem_data_l32[30]_i_1 
       (.I0(data_wip_reg_reg),
        .I1(dout[6]),
        .I2(\data_type_reg_reg[5] ),
        .I3(\data_type_reg_reg[4] ),
        .I4(dout[34]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[31] [6]));
  LUT5 #(
    .INIT(32'h000088B8)) 
    \LINE_BUF_WR_64.mem_data_l32[31]_i_2 
       (.I0(dout[7]),
        .I1(\data_type_reg_reg[5] ),
        .I2(dout[35]),
        .I3(\data_type_reg_reg[4] ),
        .I4(data_wip_reg_reg),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[31] [7]));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[3]_i_2 
       (.I0(dout[4]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[3]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[4]_i_2 
       (.I0(dout[7]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[4]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[4] ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[5]_i_2 
       (.I0(dout[10]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[5]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[5] ));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[6]_i_2 
       (.I0(dout[11]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[6]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[6] ));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[7]_i_2 
       (.I0(dout[12]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[7]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[7] ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[8]_i_2 
       (.I0(dout[14]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[10]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[8] ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \LINE_BUF_WR_64.mem_data_l32[9]_i_2 
       (.I0(dout[15]),
        .I1(\data_type_reg_reg[4] ),
        .I2(dout[11]),
        .O(\LINE_BUF_WR_64.mem_data_l32_reg[9] ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT5 #(
    .INIT(32'hACACFF0F)) 
    \crc_p_value[0]_i_1 
       (.I0(dout[28]),
        .I1(dout[20]),
        .I2(Q[0]),
        .I3(dout[10]),
        .I4(Q[1]),
        .O(\crc_p_value_reg[15] [0]));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT4 #(
    .INIT(16'h0CAF)) 
    \crc_p_value[10]_i_1 
       (.I0(dout[30]),
        .I1(dout[22]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(\crc_p_value_reg[15] [10]));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT4 #(
    .INIT(16'h0CAF)) 
    \crc_p_value[11]_i_1 
       (.I0(dout[31]),
        .I1(dout[23]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(\crc_p_value_reg[15] [11]));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT4 #(
    .INIT(16'h0CAF)) 
    \crc_p_value[12]_i_1 
       (.I0(dout[32]),
        .I1(dout[24]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(\crc_p_value_reg[15] [12]));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT4 #(
    .INIT(16'h0CAF)) 
    \crc_p_value[13]_i_1 
       (.I0(dout[33]),
        .I1(dout[25]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(\crc_p_value_reg[15] [13]));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT4 #(
    .INIT(16'h0CAF)) 
    \crc_p_value[14]_i_1 
       (.I0(dout[34]),
        .I1(dout[26]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(\crc_p_value_reg[15] [14]));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT4 #(
    .INIT(16'h0CAF)) 
    \crc_p_value[15]_i_1 
       (.I0(dout[35]),
        .I1(dout[27]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(\crc_p_value_reg[15] [15]));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT5 #(
    .INIT(32'hACACFF0F)) 
    \crc_p_value[1]_i_1 
       (.I0(dout[29]),
        .I1(dout[21]),
        .I2(Q[0]),
        .I3(dout[11]),
        .I4(Q[1]),
        .O(\crc_p_value_reg[15] [1]));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT5 #(
    .INIT(32'hACACFF0F)) 
    \crc_p_value[2]_i_1 
       (.I0(dout[30]),
        .I1(dout[22]),
        .I2(Q[0]),
        .I3(dout[12]),
        .I4(Q[1]),
        .O(\crc_p_value_reg[15] [2]));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT5 #(
    .INIT(32'hACACFF0F)) 
    \crc_p_value[3]_i_1 
       (.I0(dout[31]),
        .I1(dout[23]),
        .I2(Q[0]),
        .I3(dout[13]),
        .I4(Q[1]),
        .O(\crc_p_value_reg[15] [3]));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT5 #(
    .INIT(32'hACACFF0F)) 
    \crc_p_value[4]_i_1 
       (.I0(dout[32]),
        .I1(dout[24]),
        .I2(Q[0]),
        .I3(dout[14]),
        .I4(Q[1]),
        .O(\crc_p_value_reg[15] [4]));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT5 #(
    .INIT(32'hACACFF0F)) 
    \crc_p_value[5]_i_1 
       (.I0(dout[33]),
        .I1(dout[25]),
        .I2(Q[0]),
        .I3(dout[15]),
        .I4(Q[1]),
        .O(\crc_p_value_reg[15] [5]));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT5 #(
    .INIT(32'hACACFF0F)) 
    \crc_p_value[6]_i_1 
       (.I0(dout[34]),
        .I1(dout[26]),
        .I2(Q[0]),
        .I3(dout[16]),
        .I4(Q[1]),
        .O(\crc_p_value_reg[15] [6]));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT5 #(
    .INIT(32'hACACFF0F)) 
    \crc_p_value[7]_i_1 
       (.I0(dout[35]),
        .I1(dout[27]),
        .I2(Q[0]),
        .I3(dout[17]),
        .I4(Q[1]),
        .O(\crc_p_value_reg[15] [7]));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT4 #(
    .INIT(16'h0CAF)) 
    \crc_p_value[8]_i_1 
       (.I0(dout[28]),
        .I1(dout[20]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(\crc_p_value_reg[15] [8]));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT4 #(
    .INIT(16'h0CAF)) 
    \crc_p_value[9]_i_1 
       (.I0(dout[29]),
        .I1(dout[21]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(\crc_p_value_reg[15] [9]));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_r[0]_i_1 
       (.I0(dout[0]),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [0]),
        .O(\exp_crc_r_reg[15] [0]));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_r[10]_i_1 
       (.I0(dout[12]),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [10]),
        .O(\exp_crc_r_reg[15] [10]));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_r[11]_i_1 
       (.I0(dout[13]),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [11]),
        .O(\exp_crc_r_reg[15] [11]));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_r[12]_i_1 
       (.I0(dout[14]),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [12]),
        .O(\exp_crc_r_reg[15] [12]));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_r[13]_i_1 
       (.I0(dout[15]),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [13]),
        .O(\exp_crc_r_reg[15] [13]));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_r[14]_i_1 
       (.I0(dout[16]),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [14]),
        .O(\exp_crc_r_reg[15] [14]));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_r[15]_i_1 
       (.I0(dout[17]),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [15]),
        .O(\exp_crc_r_reg[15] [15]));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_r[1]_i_1 
       (.I0(dout[1]),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [1]),
        .O(\exp_crc_r_reg[15] [1]));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_r[2]_i_1 
       (.I0(dout[2]),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [2]),
        .O(\exp_crc_r_reg[15] [2]));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_r[3]_i_1 
       (.I0(dout[3]),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [3]),
        .O(\exp_crc_r_reg[15] [3]));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_r[4]_i_1 
       (.I0(dout[4]),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [4]),
        .O(\exp_crc_r_reg[15] [4]));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_r[5]_i_1 
       (.I0(dout[5]),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [5]),
        .O(\exp_crc_r_reg[15] [5]));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_r[6]_i_1 
       (.I0(dout[6]),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [6]),
        .O(\exp_crc_r_reg[15] [6]));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_r[7]_i_1 
       (.I0(dout[7]),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [7]),
        .O(\exp_crc_r_reg[15] [7]));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_r[8]_i_1 
       (.I0(dout[10]),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [8]),
        .O(\exp_crc_r_reg[15] [8]));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \exp_crc_r[9]_i_1 
       (.I0(dout[11]),
        .I1(lp_wc0),
        .I2(\exp_crc_i_reg[15] [9]),
        .O(\exp_crc_r_reg[15] [9]));
  (* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_8_fifo1,fifo_generator_v13_2_2,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_fifo1 pkt_fifo
       (.din(din),
        .dout({dout[37:36],pkt_fifo_rdata[39:38],dout[35:28],pkt_fifo_rdata[29:28],dout[27:0]}),
        .empty(empty),
        .full(pkt_fifo_full),
        .rd_clk(m_axis_aclk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(dl0_rxbyteclkhs),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_ppi_fifo" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_ppi_fifo
   (dout,
    empty,
    rst,
    \buf0_reg[9] ,
    l1_empty_reg,
    \pkt_fifo_cnt_reg[0] ,
    \pkt_fifo_wdata_reg[40] ,
    \gpr1.dout_i_reg[0] ,
    dl1_rxbyteclkhs,
    din,
    ppi_fifo_wen,
    rd_en,
    \goreg_dm.dout_i_reg[10] ,
    mst_rd_en_d1,
    l1_empty,
    empty_fwft_i_reg,
    fifos_empty,
    empty_fwft_i_reg_0,
    o_pkt_prcng_d1,
    wr_en,
    \pkt_fifo_wdata_reg[40]_0 ,
    dest_arst,
    \arststages_ff_reg[1] );
  output [10:0]dout;
  output empty;
  output rst;
  output \buf0_reg[9] ;
  output l1_empty_reg;
  output \pkt_fifo_cnt_reg[0] ;
  output \pkt_fifo_wdata_reg[40] ;
  output \gpr1.dout_i_reg[0] ;
  input dl1_rxbyteclkhs;
  input [11:0]din;
  input ppi_fifo_wen;
  input rd_en;
  input [0:0]\goreg_dm.dout_i_reg[10] ;
  input mst_rd_en_d1;
  input l1_empty;
  input empty_fwft_i_reg;
  input fifos_empty;
  input empty_fwft_i_reg_0;
  input o_pkt_prcng_d1;
  input wr_en;
  input [0:0]\pkt_fifo_wdata_reg[40]_0 ;
  input dest_arst;
  input \arststages_ff_reg[1] ;

  wire \arststages_ff_reg[1] ;
  wire \buf0_reg[9] ;
  wire dest_arst;
  wire [11:0]din;
  wire dl1_rxbyteclkhs;
  wire [10:0]dout;
  wire empty;
  wire empty_fwft_i_reg;
  wire empty_fwft_i_reg_0;
  wire fifos_empty;
  wire [0:0]\goreg_dm.dout_i_reg[10] ;
  wire \gpr1.dout_i_reg[0] ;
  wire l1_empty;
  wire l1_empty_reg;
  wire mst_rd_en_d1;
  wire o_pkt_prcng_d1;
  wire \pkt_fifo_cnt_reg[0] ;
  wire \pkt_fifo_wdata_reg[40] ;
  wire [0:0]\pkt_fifo_wdata_reg[40]_0 ;
  wire ppi_fifo1_full;
  wire [11:11]ppi_fifo_l1_rdata;
  wire ppi_fifo_wen;
  wire rd_en;
  wire rst;
  wire wr_en;

  (* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_8_fifo0,fifo_generator_v13_2_2,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_fifo0 \CSI_OPT3_OFF.ppi_fifo 
       (.clk(dl1_rxbyteclkhs),
        .din(din),
        .dout({ppi_fifo_l1_rdata,dout}),
        .empty(empty),
        .full(ppi_fifo1_full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(ppi_fifo_wen));
  LUT2 #(
    .INIT(4'h7)) 
    \CSI_OPT3_OFF.ppi_fifo_i_1__0 
       (.I0(dest_arst),
        .I1(\arststages_ff_reg[1] ),
        .O(rst));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \CSI_OPT3_OFF.ppi_fifo_i_2__0 
       (.I0(dout[10]),
        .I1(\goreg_dm.dout_i_reg[10] ),
        .O(\gpr1.dout_i_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT5 #(
    .INIT(32'hFF405540)) 
    \CSI_OPT3_OFF.ppi_fifo_i_3 
       (.I0(empty),
        .I1(\goreg_dm.dout_i_reg[10] ),
        .I2(dout[10]),
        .I3(mst_rd_en_d1),
        .I4(l1_empty),
        .O(\buf0_reg[9] ));
  LUT5 #(
    .INIT(32'h00FF0008)) 
    l1_empty_i_1
       (.I0(empty_fwft_i_reg),
        .I1(ppi_fifo_l1_rdata),
        .I2(empty),
        .I3(fifos_empty),
        .I4(l1_empty),
        .O(l1_empty_reg));
  LUT5 #(
    .INIT(32'hFFFF0008)) 
    o_pkt_prcng_d1_i_2
       (.I0(dout[10]),
        .I1(\goreg_dm.dout_i_reg[10] ),
        .I2(empty),
        .I3(empty_fwft_i_reg_0),
        .I4(o_pkt_prcng_d1),
        .O(\pkt_fifo_cnt_reg[0] ));
  LUT6 #(
    .INIT(64'h0008FFFF00080008)) 
    \pkt_fifo_wdata[40]_i_1 
       (.I0(dout[10]),
        .I1(\goreg_dm.dout_i_reg[10] ),
        .I2(empty),
        .I3(empty_fwft_i_reg_0),
        .I4(wr_en),
        .I5(\pkt_fifo_wdata_reg[40]_0 ),
        .O(\pkt_fifo_wdata_reg[40] ));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_ppi_fifo" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_ppi_fifo__xdcDup__1
   (dout,
    empty,
    l0_empty_reg,
    l1_empty_reg,
    dl0_rxbyteclkhs,
    rst,
    din,
    ppi_fifo_wen,
    rd_en,
    empty_fwft_i_reg,
    fifos_empty,
    l0_empty,
    \goreg_dm.dout_i_reg[10] ,
    mst_rd_en_d1);
  output [11:0]dout;
  output empty;
  output l0_empty_reg;
  output l1_empty_reg;
  input dl0_rxbyteclkhs;
  input rst;
  input [11:0]din;
  input ppi_fifo_wen;
  input rd_en;
  input empty_fwft_i_reg;
  input fifos_empty;
  input l0_empty;
  input [0:0]\goreg_dm.dout_i_reg[10] ;
  input mst_rd_en_d1;

  wire [11:0]din;
  wire dl0_rxbyteclkhs;
  wire [11:0]dout;
  wire empty;
  wire empty_fwft_i_reg;
  wire fifos_empty;
  wire [0:0]\goreg_dm.dout_i_reg[10] ;
  wire l0_empty;
  wire l0_empty_reg;
  wire l1_empty_reg;
  wire mst_rd_en_d1;
  wire ppi_fifo0_full;
  wire ppi_fifo_wen;
  wire rd_en;
  wire rst;

  (* CHECK_LICENSE_TYPE = "mipi_csi2_rx_ctrl_v1_0_8_fifo0,fifo_generator_v13_2_2,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_2_2,Vivado 2018.2" *) 
  bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_fifo0__xdcDup__1 \CSI_OPT3_OFF.ppi_fifo 
       (.clk(dl0_rxbyteclkhs),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(ppi_fifo0_full),
        .rd_en(rd_en),
        .rst(rst),
        .wr_en(ppi_fifo_wen));
  LUT5 #(
    .INIT(32'h00FF0008)) 
    l0_empty_i_1
       (.I0(empty_fwft_i_reg),
        .I1(dout[11]),
        .I2(empty),
        .I3(fifos_empty),
        .I4(l0_empty),
        .O(l0_empty_reg));
  LUT5 #(
    .INIT(32'hFF405540)) 
    l1_empty_i_2
       (.I0(empty),
        .I1(dout[10]),
        .I2(\goreg_dm.dout_i_reg[10] ),
        .I3(mst_rd_en_d1),
        .I4(l0_empty),
        .O(l1_empty_reg));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_ppi_inf" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_ppi_inf
   (din,
    ppi_fifo_wen,
    dest_arst,
    \arststages_ff_reg[1] ,
    dl0_rxactivehs,
    dl0_rxbyteclkhs,
    dl0_rxvalidhs,
    dl0_rxdatahs,
    dl0_errsotsynchs,
    dl0_errsoths,
    dl0_rxsynchs);
  output [11:0]din;
  output ppi_fifo_wen;
  input dest_arst;
  input \arststages_ff_reg[1] ;
  input dl0_rxactivehs;
  input dl0_rxbyteclkhs;
  input dl0_rxvalidhs;
  input [7:0]dl0_rxdatahs;
  input dl0_errsotsynchs;
  input dl0_errsoths;
  input dl0_rxsynchs;

  wire \arststages_ff_reg[1] ;
  wire dest_arst;
  wire [11:0]din;
  wire dl0_errsoths;
  wire dl0_errsotsynchs;
  wire dl0_rxactivehs;
  wire dl0_rxbyteclkhs;
  wire [7:0]dl0_rxdatahs;
  wire dl0_rxsynchs;
  wire dl0_rxvalidhs;
  wire errsoths_i;
  wire errsotsynchs_i;
  wire pkt_fst_data;
  wire pkt_fst_data_d1;
  wire pkt_start1;
  wire pkt_wr_in_progress_d1;
  wire pkt_wr_in_progress_d1_i_1_n_0;
  wire pkt_wr_in_progress_d1_i_2_n_0;
  wire \ppi_fifo_wdata[10]_i_1_n_0 ;
  wire \ppi_fifo_wdata[11]_i_1_n_0 ;
  wire ppi_fifo_wen;
  wire ppi_fifo_wen_i;
  wire rxactivehs_d1;
  wire [7:0]rxdatahs_d1;
  wire rxvalidhs_d1;
  wire valid_hunt;
  wire valid_hunt_i_1_n_0;

  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT5 #(
    .INIT(32'h00F00020)) 
    pkt_fst_data_d1_i_1
       (.I0(dl0_rxactivehs),
        .I1(rxactivehs_d1),
        .I2(dl0_rxvalidhs),
        .I3(rxvalidhs_d1),
        .I4(valid_hunt),
        .O(pkt_fst_data));
  FDRE pkt_fst_data_d1_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_fst_data),
        .Q(pkt_fst_data_d1),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hAAAAAAAAAEBEAAAA)) 
    pkt_wr_in_progress_d1_i_1
       (.I0(pkt_wr_in_progress_d1_i_2_n_0),
        .I1(dl0_rxsynchs),
        .I2(dl0_errsotsynchs),
        .I3(dl0_errsoths),
        .I4(dl0_rxactivehs),
        .I5(rxactivehs_d1),
        .O(pkt_wr_in_progress_d1_i_1_n_0));
  LUT6 #(
    .INIT(64'h0080000000000080)) 
    pkt_wr_in_progress_d1_i_2
       (.I0(pkt_wr_in_progress_d1),
        .I1(dest_arst),
        .I2(\arststages_ff_reg[1] ),
        .I3(din[8]),
        .I4(rxactivehs_d1),
        .I5(dl0_rxactivehs),
        .O(pkt_wr_in_progress_d1_i_2_n_0));
  FDRE pkt_wr_in_progress_d1_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_wr_in_progress_d1_i_1_n_0),
        .Q(pkt_wr_in_progress_d1),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hAAEA)) 
    \ppi_fifo_wdata[10]_i_1 
       (.I0(pkt_fst_data_d1),
        .I1(dl0_errsotsynchs),
        .I2(dl0_rxactivehs),
        .I3(rxactivehs_d1),
        .O(\ppi_fifo_wdata[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'h38)) 
    \ppi_fifo_wdata[11]_i_1 
       (.I0(dl0_errsotsynchs),
        .I1(dl0_rxactivehs),
        .I2(rxactivehs_d1),
        .O(\ppi_fifo_wdata[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT5 #(
    .INIT(32'h55C500C0)) 
    \ppi_fifo_wdata[8]_i_1 
       (.I0(ppi_fifo_wen),
        .I1(dl0_errsotsynchs),
        .I2(dl0_rxactivehs),
        .I3(rxactivehs_d1),
        .I4(din[8]),
        .O(errsotsynchs_i));
  LUT5 #(
    .INIT(32'h55C500C0)) 
    \ppi_fifo_wdata[9]_i_1 
       (.I0(ppi_fifo_wen),
        .I1(dl0_errsoths),
        .I2(dl0_rxactivehs),
        .I3(rxactivehs_d1),
        .I4(din[9]),
        .O(errsoths_i));
  FDRE \ppi_fifo_wdata_reg[0] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[0]),
        .Q(din[0]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[10] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(\ppi_fifo_wdata[10]_i_1_n_0 ),
        .Q(din[10]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[11] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(\ppi_fifo_wdata[11]_i_1_n_0 ),
        .Q(din[11]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[1] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[1]),
        .Q(din[1]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[2] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[2]),
        .Q(din[2]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[3] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[3]),
        .Q(din[3]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[4] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[4]),
        .Q(din[4]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[5] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[5]),
        .Q(din[5]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[6] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[6]),
        .Q(din[6]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[7] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[7]),
        .Q(din[7]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[8] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(errsotsynchs_i),
        .Q(din[8]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[9] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(errsoths_i),
        .Q(din[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h2020FF2020202020)) 
    ppi_wen_done_i_1
       (.I0(rxvalidhs_d1),
        .I1(din[8]),
        .I2(pkt_wr_in_progress_d1),
        .I3(dl0_rxactivehs),
        .I4(rxactivehs_d1),
        .I5(pkt_start1),
        .O(ppi_fifo_wen_i));
  LUT3 #(
    .INIT(8'h04)) 
    ppi_wen_done_i_2
       (.I0(dl0_errsoths),
        .I1(dl0_errsotsynchs),
        .I2(dl0_rxsynchs),
        .O(pkt_start1));
  FDRE ppi_wen_done_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(ppi_fifo_wen_i),
        .Q(ppi_fifo_wen),
        .R(1'b0));
  FDRE rxactivehs_d1_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxactivehs),
        .Q(rxactivehs_d1),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[0] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxdatahs[0]),
        .Q(rxdatahs_d1[0]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[1] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxdatahs[1]),
        .Q(rxdatahs_d1[1]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[2] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxdatahs[2]),
        .Q(rxdatahs_d1[2]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[3] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxdatahs[3]),
        .Q(rxdatahs_d1[3]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[4] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxdatahs[4]),
        .Q(rxdatahs_d1[4]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[5] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxdatahs[5]),
        .Q(rxdatahs_d1[5]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[6] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxdatahs[6]),
        .Q(rxdatahs_d1[6]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[7] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxdatahs[7]),
        .Q(rxdatahs_d1[7]),
        .R(1'b0));
  FDRE rxvalidhs_d1_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(dl0_rxvalidhs),
        .Q(rxvalidhs_d1),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT5 #(
    .INIT(32'h8A8A8F8A)) 
    valid_hunt_i_1
       (.I0(valid_hunt),
        .I1(rxvalidhs_d1),
        .I2(dl0_rxvalidhs),
        .I3(dl0_rxactivehs),
        .I4(rxactivehs_d1),
        .O(valid_hunt_i_1_n_0));
  FDRE valid_hunt_reg
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(valid_hunt_i_1_n_0),
        .Q(valid_hunt),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_ppi_inf" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_ppi_inf_0
   (din,
    ppi_fifo_wen,
    dest_arst,
    \arststages_ff_reg[1] ,
    dl1_rxactivehs,
    dl1_rxbyteclkhs,
    dl1_rxvalidhs,
    dl1_rxdatahs,
    dl1_errsotsynchs,
    dl1_errsoths,
    dl1_rxsynchs);
  output [11:0]din;
  output ppi_fifo_wen;
  input dest_arst;
  input \arststages_ff_reg[1] ;
  input dl1_rxactivehs;
  input dl1_rxbyteclkhs;
  input dl1_rxvalidhs;
  input [7:0]dl1_rxdatahs;
  input dl1_errsotsynchs;
  input dl1_errsoths;
  input dl1_rxsynchs;

  wire \arststages_ff_reg[1] ;
  wire dest_arst;
  wire [11:0]din;
  wire dl1_errsoths;
  wire dl1_errsotsynchs;
  wire dl1_rxactivehs;
  wire dl1_rxbyteclkhs;
  wire [7:0]dl1_rxdatahs;
  wire dl1_rxsynchs;
  wire dl1_rxvalidhs;
  wire errsoths_i;
  wire errsotsynchs_i;
  wire pkt_fst_data;
  wire pkt_fst_data_d1;
  wire pkt_start1;
  wire pkt_wr_in_progress_d1;
  wire pkt_wr_in_progress_d1_i_1__0_n_0;
  wire pkt_wr_in_progress_d1_i_2__0_n_0;
  wire \ppi_fifo_wdata[10]_i_1__0_n_0 ;
  wire \ppi_fifo_wdata[11]_i_1__0_n_0 ;
  wire ppi_fifo_wen;
  wire ppi_fifo_wen_i;
  wire rxactivehs_d1;
  wire [7:0]rxdatahs_d1;
  wire rxvalidhs_d1;
  wire valid_hunt;
  wire valid_hunt_i_1__0_n_0;

  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT5 #(
    .INIT(32'h00F00020)) 
    pkt_fst_data_d1_i_1__0
       (.I0(dl1_rxactivehs),
        .I1(rxactivehs_d1),
        .I2(dl1_rxvalidhs),
        .I3(rxvalidhs_d1),
        .I4(valid_hunt),
        .O(pkt_fst_data));
  FDRE pkt_fst_data_d1_reg
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_fst_data),
        .Q(pkt_fst_data_d1),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hAAAAAAAAAEBEAAAA)) 
    pkt_wr_in_progress_d1_i_1__0
       (.I0(pkt_wr_in_progress_d1_i_2__0_n_0),
        .I1(dl1_rxsynchs),
        .I2(dl1_errsotsynchs),
        .I3(dl1_errsoths),
        .I4(dl1_rxactivehs),
        .I5(rxactivehs_d1),
        .O(pkt_wr_in_progress_d1_i_1__0_n_0));
  LUT6 #(
    .INIT(64'h0080000000000080)) 
    pkt_wr_in_progress_d1_i_2__0
       (.I0(pkt_wr_in_progress_d1),
        .I1(dest_arst),
        .I2(\arststages_ff_reg[1] ),
        .I3(din[8]),
        .I4(rxactivehs_d1),
        .I5(dl1_rxactivehs),
        .O(pkt_wr_in_progress_d1_i_2__0_n_0));
  FDRE pkt_wr_in_progress_d1_reg
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(pkt_wr_in_progress_d1_i_1__0_n_0),
        .Q(pkt_wr_in_progress_d1),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hAAEA)) 
    \ppi_fifo_wdata[10]_i_1__0 
       (.I0(pkt_fst_data_d1),
        .I1(dl1_errsotsynchs),
        .I2(dl1_rxactivehs),
        .I3(rxactivehs_d1),
        .O(\ppi_fifo_wdata[10]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'h38)) 
    \ppi_fifo_wdata[11]_i_1__0 
       (.I0(dl1_errsotsynchs),
        .I1(dl1_rxactivehs),
        .I2(rxactivehs_d1),
        .O(\ppi_fifo_wdata[11]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT5 #(
    .INIT(32'h55C500C0)) 
    \ppi_fifo_wdata[8]_i_1__0 
       (.I0(ppi_fifo_wen),
        .I1(dl1_errsotsynchs),
        .I2(dl1_rxactivehs),
        .I3(rxactivehs_d1),
        .I4(din[8]),
        .O(errsotsynchs_i));
  LUT5 #(
    .INIT(32'h55C500C0)) 
    \ppi_fifo_wdata[9]_i_1__0 
       (.I0(ppi_fifo_wen),
        .I1(dl1_errsoths),
        .I2(dl1_rxactivehs),
        .I3(rxactivehs_d1),
        .I4(din[9]),
        .O(errsoths_i));
  FDRE \ppi_fifo_wdata_reg[0] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[0]),
        .Q(din[0]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[10] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(\ppi_fifo_wdata[10]_i_1__0_n_0 ),
        .Q(din[10]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[11] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(\ppi_fifo_wdata[11]_i_1__0_n_0 ),
        .Q(din[11]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[1] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[1]),
        .Q(din[1]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[2] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[2]),
        .Q(din[2]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[3] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[3]),
        .Q(din[3]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[4] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[4]),
        .Q(din[4]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[5] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[5]),
        .Q(din[5]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[6] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[6]),
        .Q(din[6]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[7] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(rxdatahs_d1[7]),
        .Q(din[7]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[8] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(errsotsynchs_i),
        .Q(din[8]),
        .R(1'b0));
  FDRE \ppi_fifo_wdata_reg[9] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(errsoths_i),
        .Q(din[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h2020FF2020202020)) 
    ppi_wen_done_i_1__0
       (.I0(rxvalidhs_d1),
        .I1(din[8]),
        .I2(pkt_wr_in_progress_d1),
        .I3(dl1_rxactivehs),
        .I4(rxactivehs_d1),
        .I5(pkt_start1),
        .O(ppi_fifo_wen_i));
  LUT3 #(
    .INIT(8'h04)) 
    ppi_wen_done_i_2__0
       (.I0(dl1_errsoths),
        .I1(dl1_errsotsynchs),
        .I2(dl1_rxsynchs),
        .O(pkt_start1));
  FDRE ppi_wen_done_reg
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(ppi_fifo_wen_i),
        .Q(ppi_fifo_wen),
        .R(1'b0));
  FDRE rxactivehs_d1_reg
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxactivehs),
        .Q(rxactivehs_d1),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[0] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxdatahs[0]),
        .Q(rxdatahs_d1[0]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[1] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxdatahs[1]),
        .Q(rxdatahs_d1[1]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[2] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxdatahs[2]),
        .Q(rxdatahs_d1[2]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[3] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxdatahs[3]),
        .Q(rxdatahs_d1[3]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[4] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxdatahs[4]),
        .Q(rxdatahs_d1[4]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[5] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxdatahs[5]),
        .Q(rxdatahs_d1[5]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[6] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxdatahs[6]),
        .Q(rxdatahs_d1[6]),
        .R(1'b0));
  FDRE \rxdatahs_d1_reg[7] 
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxdatahs[7]),
        .Q(rxdatahs_d1[7]),
        .R(1'b0));
  FDRE rxvalidhs_d1_reg
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(dl1_rxvalidhs),
        .Q(rxvalidhs_d1),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT5 #(
    .INIT(32'h8A8A8F8A)) 
    valid_hunt_i_1__0
       (.I0(valid_hunt),
        .I1(rxvalidhs_d1),
        .I2(dl1_rxvalidhs),
        .I3(dl1_rxactivehs),
        .I4(rxactivehs_d1),
        .O(valid_hunt_i_1__0_n_0));
  FDRE valid_hunt_reg
       (.C(dl1_rxbyteclkhs),
        .CE(1'b1),
        .D(valid_hunt_i_1__0_n_0),
        .Q(valid_hunt),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_reg_inf" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_reg_inf
   (soft_rst,
    dest_out,
    src_ff_reg,
    src_rcv,
    src_send,
    SS,
    out,
    cl_enable,
    pktnppi_fifo_rst_ack_i_reg_0,
    s_axi_bvalid,
    s_axi_rvalid,
    errframedata_d1,
    \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[31] ,
    D,
    wr2_isr,
    \ERR_FRAME_SYNC[3].fe_hunt_reg[3] ,
    SR,
    s_axi_rdata,
    interrupt,
    s_axi_arready,
    s_axi_awready,
    s_axi_wready,
    m_axis_aclk,
    src_in,
    s_axi_aclk,
    full,
    dl0_rxbyteclkhs,
    dl0_stopstate,
    dl1_stopstate,
    dl2_stopstate,
    dl3_stopstate,
    diwc_corrected,
    data_shutdown,
    wr_en,
    lp_count_en,
    srst,
    s_axi_aresetn,
    img_send_reg_0,
    m_axis_aresetn,
    short_pkt_reg,
    \isr_i_reg[22] ,
    \isr_i_reg[31] ,
    s_axi_wdata,
    s_axi_rready,
    s_axi_arvalid,
    s_axi_wvalid,
    s_axi_bready,
    \syncstages_ff_reg[1][1] ,
    cl_info_all,
    lx_info_all,
    s_axi_araddr,
    \arststages_ff_reg[1] ,
    p_0_in19_in,
    p_0_in15_in,
    p_0_in14_in,
    p_0_in13_in,
    p_0_in11_in,
    p_0_in12_in,
    p_0_in9_in,
    p_0_in10_in,
    p_0_in,
    dest_pulse,
    s_axi_awvalid,
    s_axi_awaddr);
  output soft_rst;
  output dest_out;
  output src_ff_reg;
  output src_rcv;
  output src_send;
  output [0:0]SS;
  output [3:0]out;
  output cl_enable;
  output pktnppi_fifo_rst_ack_i_reg_0;
  output s_axi_bvalid;
  output s_axi_rvalid;
  output errframedata_d1;
  output \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[31] ;
  output [1:0]D;
  output wr2_isr;
  output \ERR_FRAME_SYNC[3].fe_hunt_reg[3] ;
  output [0:0]SR;
  output [31:0]s_axi_rdata;
  output interrupt;
  output s_axi_arready;
  output s_axi_awready;
  output s_axi_wready;
  input m_axis_aclk;
  input [17:0]src_in;
  input s_axi_aclk;
  input full;
  input dl0_rxbyteclkhs;
  input dl0_stopstate;
  input dl1_stopstate;
  input dl2_stopstate;
  input dl3_stopstate;
  input [23:0]diwc_corrected;
  input data_shutdown;
  input wr_en;
  input [3:0]lp_count_en;
  input srst;
  input s_axi_aresetn;
  input img_send_reg_0;
  input m_axis_aresetn;
  input short_pkt_reg;
  input [18:0]\isr_i_reg[22] ;
  input [13:0]\isr_i_reg[31] ;
  input [23:0]s_axi_wdata;
  input s_axi_rready;
  input s_axi_arvalid;
  input s_axi_wvalid;
  input s_axi_bready;
  input [1:0]\syncstages_ff_reg[1][1] ;
  input [1:0]cl_info_all;
  input [7:0]lx_info_all;
  input [4:0]s_axi_araddr;
  input \arststages_ff_reg[1] ;
  input p_0_in19_in;
  input p_0_in15_in;
  input p_0_in14_in;
  input p_0_in13_in;
  input p_0_in11_in;
  input p_0_in12_in;
  input p_0_in9_in;
  input p_0_in10_in;
  input p_0_in;
  input dest_pulse;
  input s_axi_awvalid;
  input [4:0]s_axi_awaddr;

  wire [1:0]D;
  wire \ERR_FRAME_SYNC[3].fe_hunt_reg[3] ;
  wire \LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[31] ;
  wire \LP_CNT_C2R[0].lp_count[0][0]_i_3_n_0 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_0 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_1 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_2 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_3 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_4 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_5 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_6 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_7 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_1 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_2 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_3 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_4 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_5 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_6 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_7 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_0 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_1 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_2 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_3 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_4 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_5 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_6 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_7 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_0 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_1 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_2 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_3 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_4 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_5 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_6 ;
  wire \LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_7 ;
  wire [15:0]\LP_CNT_C2R[0].lp_count_reg[0]_5 ;
  wire \LP_CNT_C2R[1].lp_count[1][0]_i_3_n_0 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_0 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_1 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_2 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_3 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_4 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_5 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_6 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_7 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_1 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_2 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_3 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_4 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_5 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_6 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_7 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_0 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_1 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_2 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_3 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_4 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_5 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_6 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_7 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_0 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_1 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_2 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_3 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_4 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_5 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_6 ;
  wire \LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_7 ;
  wire [15:0]\LP_CNT_C2R[1].lp_count_reg[1]_4 ;
  wire \LP_CNT_C2R[2].lp_count[2][0]_i_3_n_0 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_0 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_1 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_2 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_3 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_4 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_5 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_6 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_7 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_1 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_2 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_3 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_4 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_5 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_6 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_7 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_0 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_1 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_2 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_3 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_4 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_5 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_6 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_7 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_0 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_1 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_2 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_3 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_4 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_5 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_6 ;
  wire \LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_7 ;
  wire [15:0]\LP_CNT_C2R[2].lp_count_reg[2]_3 ;
  wire \LP_CNT_C2R[3].lp_count[3][0]_i_3_n_0 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_0 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_1 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_2 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_3 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_4 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_5 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_6 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_7 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_1 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_2 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_3 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_4 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_5 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_6 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_7 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_0 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_1 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_2 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_3 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_4 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_5 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_6 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_7 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_0 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_1 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_2 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_3 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_4 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_5 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_6 ;
  wire \LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_7 ;
  wire [15:0]\LP_CNT_C2R[3].lp_count_reg[3]_6 ;
  wire [5:2]\LX_INFO_GEN[0].lx_info_reg[0]_1 ;
  wire [5:2]\LX_INFO_GEN[1].lx_info_reg[1]_2 ;
  wire \SD_INV_1.shutdown_i[3]_i_1_n_0 ;
  wire [0:0]SR;
  wire [0:0]SS;
  wire \active_lanes[0]_i_1_n_0 ;
  wire \active_lanes[1]_i_1_n_0 ;
  wire \active_lanes[1]_i_2_n_0 ;
  wire [1:0]active_lanes_r2p;
  wire \active_lanes_reg_n_0_[0] ;
  wire \active_lanes_reg_n_0_[1] ;
  wire \arststages_ff_reg[1] ;
  (* DONT_TOUCH *) wire cl_enable_i;
  wire [1:0]cl_info;
  wire \cl_info[0]_i_1_n_0 ;
  wire \cl_info[1]_i_1_n_0 ;
  wire [1:0]cl_info_all;
  wire \core_config[0]_i_1_n_0 ;
  wire \core_config[1]_i_1_n_0 ;
  wire \core_config[1]_i_2_n_0 ;
  wire \core_config_reg_n_0_[0] ;
  wire core_en_d1;
  wire core_men;
  wire data_dis_done;
  wire data_dis_done_i_1_n_0;
  wire data_shutdown;
  wire data_shutdown_c2r;
  wire dest_out;
  wire dest_pulse;
  wire disable_in_progress;
  wire disable_in_progress_d1;
  wire disable_in_progress_d1_i_2_n_0;
  wire [23:0]diwc_corrected;
  wire dl0_rxbyteclkhs;
  wire dl0_stopstate;
  wire dl1_stopstate;
  wire dl2_stopstate;
  wire dl3_stopstate;
  wire errframedata_d1;
  wire full;
  wire gen_spkt_fifo_n_10;
  wire gen_spkt_fifo_n_11;
  wire gen_spkt_fifo_n_12;
  wire gen_spkt_fifo_n_13;
  wire gen_spkt_fifo_n_14;
  wire gen_spkt_fifo_n_15;
  wire gen_spkt_fifo_n_16;
  wire gen_spkt_fifo_n_17;
  wire gen_spkt_fifo_n_18;
  wire gen_spkt_fifo_n_19;
  wire gen_spkt_fifo_n_2;
  wire gen_spkt_fifo_n_20;
  wire gen_spkt_fifo_n_21;
  wire gen_spkt_fifo_n_22;
  wire gen_spkt_fifo_n_23;
  wire gen_spkt_fifo_n_24;
  wire gen_spkt_fifo_n_25;
  wire gen_spkt_fifo_n_3;
  wire gen_spkt_fifo_n_4;
  wire gen_spkt_fifo_n_5;
  wire gen_spkt_fifo_n_6;
  wire gen_spkt_fifo_n_7;
  wire gen_spkt_fifo_n_8;
  wire gen_spkt_fifo_n_9;
  wire \gie[0]_i_1_n_0 ;
  wire \gie_reg_n_0_[0] ;
  wire [31:31]ier;
  wire \ier_reg_n_0_[0] ;
  wire \ier_reg_n_0_[10] ;
  wire \ier_reg_n_0_[11] ;
  wire \ier_reg_n_0_[12] ;
  wire \ier_reg_n_0_[13] ;
  wire \ier_reg_n_0_[14] ;
  wire \ier_reg_n_0_[15] ;
  wire \ier_reg_n_0_[16] ;
  wire \ier_reg_n_0_[17] ;
  wire \ier_reg_n_0_[18] ;
  wire \ier_reg_n_0_[19] ;
  wire \ier_reg_n_0_[1] ;
  wire \ier_reg_n_0_[20] ;
  wire \ier_reg_n_0_[21] ;
  wire \ier_reg_n_0_[22] ;
  wire \ier_reg_n_0_[2] ;
  wire \ier_reg_n_0_[31] ;
  wire \ier_reg_n_0_[3] ;
  wire \ier_reg_n_0_[4] ;
  wire \ier_reg_n_0_[5] ;
  wire \ier_reg_n_0_[6] ;
  wire \ier_reg_n_0_[7] ;
  wire \ier_reg_n_0_[8] ;
  wire \ier_reg_n_0_[9] ;
  wire [31:0]img_info1_vc0;
  wire \img_info1_vc0[15]_i_1_n_0 ;
  wire \img_info1_vc0[31]_i_1_n_0 ;
  wire [31:0]img_info1_vc1;
  wire \img_info1_vc1[15]_i_1_n_0 ;
  wire \img_info1_vc1[31]_i_1_n_0 ;
  wire [31:0]img_info1_vc2;
  wire \img_info1_vc2[15]_i_1_n_0 ;
  wire \img_info1_vc2[31]_i_1_n_0 ;
  wire [31:0]img_info1_vc3;
  wire \img_info1_vc3[15]_i_1_n_0 ;
  wire \img_info1_vc3[31]_i_1_n_0 ;
  wire \img_info2_vc0_reg_n_0_[0] ;
  wire \img_info2_vc0_reg_n_0_[1] ;
  wire \img_info2_vc0_reg_n_0_[2] ;
  wire \img_info2_vc0_reg_n_0_[3] ;
  wire \img_info2_vc0_reg_n_0_[4] ;
  wire \img_info2_vc0_reg_n_0_[5] ;
  wire \img_info2_vc1_reg_n_0_[0] ;
  wire \img_info2_vc1_reg_n_0_[1] ;
  wire \img_info2_vc1_reg_n_0_[2] ;
  wire \img_info2_vc1_reg_n_0_[3] ;
  wire \img_info2_vc1_reg_n_0_[4] ;
  wire \img_info2_vc1_reg_n_0_[5] ;
  wire \img_info2_vc2_reg_n_0_[0] ;
  wire \img_info2_vc2_reg_n_0_[1] ;
  wire \img_info2_vc2_reg_n_0_[2] ;
  wire \img_info2_vc2_reg_n_0_[3] ;
  wire \img_info2_vc2_reg_n_0_[4] ;
  wire \img_info2_vc2_reg_n_0_[5] ;
  wire \img_info2_vc3_reg_n_0_[0] ;
  wire \img_info2_vc3_reg_n_0_[1] ;
  wire \img_info2_vc3_reg_n_0_[2] ;
  wire \img_info2_vc3_reg_n_0_[3] ;
  wire \img_info2_vc3_reg_n_0_[4] ;
  wire \img_info2_vc3_reg_n_0_[5] ;
  wire img_send_reg_0;
  wire img_vld;
  wire img_vld_i;
  wire img_vld_i_1_n_0;
  wire [23:0]img_vld_out_i;
  wire \img_vld_out_reg_n_0_[0] ;
  wire \img_vld_out_reg_n_0_[10] ;
  wire \img_vld_out_reg_n_0_[11] ;
  wire \img_vld_out_reg_n_0_[12] ;
  wire \img_vld_out_reg_n_0_[13] ;
  wire \img_vld_out_reg_n_0_[14] ;
  wire \img_vld_out_reg_n_0_[15] ;
  wire \img_vld_out_reg_n_0_[16] ;
  wire \img_vld_out_reg_n_0_[17] ;
  wire \img_vld_out_reg_n_0_[18] ;
  wire \img_vld_out_reg_n_0_[19] ;
  wire \img_vld_out_reg_n_0_[1] ;
  wire \img_vld_out_reg_n_0_[20] ;
  wire \img_vld_out_reg_n_0_[21] ;
  wire \img_vld_out_reg_n_0_[22] ;
  wire \img_vld_out_reg_n_0_[23] ;
  wire \img_vld_out_reg_n_0_[2] ;
  wire \img_vld_out_reg_n_0_[3] ;
  wire \img_vld_out_reg_n_0_[4] ;
  wire \img_vld_out_reg_n_0_[5] ;
  wire \img_vld_out_reg_n_0_[8] ;
  wire \img_vld_out_reg_n_0_[9] ;
  wire incorrect_lanes;
  wire interrupt;
  wire interrupt_INST_0_i_10_n_0;
  wire interrupt_INST_0_i_11_n_0;
  wire interrupt_INST_0_i_14_n_0;
  wire interrupt_INST_0_i_18_n_0;
  wire interrupt_INST_0_i_1_n_0;
  wire interrupt_INST_0_i_20_n_0;
  wire interrupt_INST_0_i_23_n_0;
  wire interrupt_INST_0_i_2_n_0;
  wire interrupt_INST_0_i_3_n_0;
  wire interrupt_INST_0_i_7_n_0;
  wire [18:0]\isr_i_reg[22] ;
  wire [13:0]\isr_i_reg[31] ;
  wire [21:21]isr_o;
  wire l0_ppiclk_ss1;
  wire l1_ppiclk_ss1;
  wire l2_ppiclk_ss1;
  wire l3_ppiclk_ss1;
  wire [15:0]lp_count_all;
  wire [3:0]lp_count_en;
  wire lp_count_en_c2r_0;
  wire lp_count_en_c2r_1;
  wire lp_count_en_c2r_2;
  wire lp_count_en_c2r_3;
  wire lp_count_pulse_0;
  wire lp_count_pulse_1;
  wire lp_count_pulse_2;
  wire lp_count_pulse_3;
  wire lx_info;
  wire [7:0]lx_info_all;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire p_0_in;
  wire p_0_in10_in;
  wire p_0_in11_in;
  wire p_0_in12_in;
  wire p_0_in13_in;
  wire p_0_in14_in;
  wire p_0_in15_in;
  wire p_0_in19_in;
  wire p_0_in9_in;
  wire [4:0]p_0_in_0;
  wire [1:0]p_10_in;
  wire p_19_in;
  wire p_20_in;
  wire pkt_dis_done;
  wire pktnppi_fifo_rst0;
  wire pktnppi_fifo_rst_ack;
  wire pktnppi_fifo_rst_ack_i;
  wire pktnppi_fifo_rst_ack_i_reg_0;
  wire ppi_dis_done_i_1_n_0;
  wire \prot_config[1]_i_1_n_0 ;
  wire rd_req;
  wire rd_req_i_1_n_0;
  wire reset_released;
  wire s_axi_aclk;
  wire [4:0]s_axi_araddr;
  wire s_axi_aresetn;
  wire s_axi_arready;
  wire s_axi_arvalid;
  wire [4:0]s_axi_awaddr;
  wire s_axi_awready;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire s_axi_bvalid;
  wire s_axi_bvalid_i_2_n_0;
  wire [31:0]s_axi_rdata;
  wire \s_axi_rdata[0]_i_3_n_0 ;
  wire \s_axi_rdata[0]_i_4_n_0 ;
  wire \s_axi_rdata[0]_i_5_n_0 ;
  wire \s_axi_rdata[0]_i_6_n_0 ;
  wire \s_axi_rdata[0]_i_8_n_0 ;
  wire \s_axi_rdata[0]_i_9_n_0 ;
  wire \s_axi_rdata[10]_i_2_n_0 ;
  wire \s_axi_rdata[10]_i_4_n_0 ;
  wire \s_axi_rdata[11]_i_2_n_0 ;
  wire \s_axi_rdata[11]_i_4_n_0 ;
  wire \s_axi_rdata[12]_i_2_n_0 ;
  wire \s_axi_rdata[12]_i_3_n_0 ;
  wire \s_axi_rdata[13]_i_2_n_0 ;
  wire \s_axi_rdata[13]_i_3_n_0 ;
  wire \s_axi_rdata[14]_i_2_n_0 ;
  wire \s_axi_rdata[14]_i_4_n_0 ;
  wire \s_axi_rdata[15]_i_2_n_0 ;
  wire \s_axi_rdata[15]_i_4_n_0 ;
  wire \s_axi_rdata[16]_i_3_n_0 ;
  wire \s_axi_rdata[16]_i_4_n_0 ;
  wire \s_axi_rdata[17]_i_3_n_0 ;
  wire \s_axi_rdata[17]_i_4_n_0 ;
  wire \s_axi_rdata[18]_i_3_n_0 ;
  wire \s_axi_rdata[18]_i_4_n_0 ;
  wire \s_axi_rdata[19]_i_10_n_0 ;
  wire \s_axi_rdata[19]_i_11_n_0 ;
  wire \s_axi_rdata[19]_i_13_n_0 ;
  wire \s_axi_rdata[19]_i_5_n_0 ;
  wire \s_axi_rdata[19]_i_6_n_0 ;
  wire \s_axi_rdata[19]_i_7_n_0 ;
  wire \s_axi_rdata[19]_i_8_n_0 ;
  wire \s_axi_rdata[19]_i_9_n_0 ;
  wire \s_axi_rdata[1]_i_3_n_0 ;
  wire \s_axi_rdata[1]_i_4_n_0 ;
  wire \s_axi_rdata[1]_i_5_n_0 ;
  wire \s_axi_rdata[1]_i_7_n_0 ;
  wire \s_axi_rdata[20]_i_3_n_0 ;
  wire \s_axi_rdata[20]_i_4_n_0 ;
  wire \s_axi_rdata[21]_i_3_n_0 ;
  wire \s_axi_rdata[21]_i_4_n_0 ;
  wire \s_axi_rdata[22]_i_10_n_0 ;
  wire \s_axi_rdata[22]_i_11_n_0 ;
  wire \s_axi_rdata[22]_i_12_n_0 ;
  wire \s_axi_rdata[22]_i_13_n_0 ;
  wire \s_axi_rdata[22]_i_14_n_0 ;
  wire \s_axi_rdata[22]_i_15_n_0 ;
  wire \s_axi_rdata[22]_i_16_n_0 ;
  wire \s_axi_rdata[22]_i_17_n_0 ;
  wire \s_axi_rdata[22]_i_18_n_0 ;
  wire \s_axi_rdata[22]_i_4_n_0 ;
  wire \s_axi_rdata[22]_i_5_n_0 ;
  wire \s_axi_rdata[22]_i_6_n_0 ;
  wire \s_axi_rdata[22]_i_7_n_0 ;
  wire \s_axi_rdata[22]_i_8_n_0 ;
  wire \s_axi_rdata[22]_i_9_n_0 ;
  wire \s_axi_rdata[23]_i_3_n_0 ;
  wire \s_axi_rdata[24]_i_1_n_0 ;
  wire \s_axi_rdata[24]_i_2_n_0 ;
  wire \s_axi_rdata[25]_i_1_n_0 ;
  wire \s_axi_rdata[25]_i_2_n_0 ;
  wire \s_axi_rdata[26]_i_1_n_0 ;
  wire \s_axi_rdata[26]_i_2_n_0 ;
  wire \s_axi_rdata[27]_i_1_n_0 ;
  wire \s_axi_rdata[27]_i_2_n_0 ;
  wire \s_axi_rdata[28]_i_1_n_0 ;
  wire \s_axi_rdata[28]_i_2_n_0 ;
  wire \s_axi_rdata[29]_i_1_n_0 ;
  wire \s_axi_rdata[29]_i_2_n_0 ;
  wire \s_axi_rdata[2]_i_3_n_0 ;
  wire \s_axi_rdata[2]_i_5_n_0 ;
  wire \s_axi_rdata[2]_i_6_n_0 ;
  wire \s_axi_rdata[2]_i_7_n_0 ;
  wire \s_axi_rdata[30]_i_1_n_0 ;
  wire \s_axi_rdata[30]_i_2_n_0 ;
  wire \s_axi_rdata[30]_i_3_n_0 ;
  wire \s_axi_rdata[30]_i_4_n_0 ;
  wire \s_axi_rdata[30]_i_5_n_0 ;
  wire \s_axi_rdata[30]_i_6_n_0 ;
  wire \s_axi_rdata[30]_i_7_n_0 ;
  wire \s_axi_rdata[30]_i_8_n_0 ;
  wire \s_axi_rdata[31]_i_11_n_0 ;
  wire \s_axi_rdata[31]_i_12_n_0 ;
  wire \s_axi_rdata[31]_i_13_n_0 ;
  wire \s_axi_rdata[31]_i_14_n_0 ;
  wire \s_axi_rdata[31]_i_15_n_0 ;
  wire \s_axi_rdata[31]_i_16_n_0 ;
  wire \s_axi_rdata[31]_i_17_n_0 ;
  wire \s_axi_rdata[31]_i_18_n_0 ;
  wire \s_axi_rdata[31]_i_19_n_0 ;
  wire \s_axi_rdata[31]_i_1_n_0 ;
  wire \s_axi_rdata[31]_i_20_n_0 ;
  wire \s_axi_rdata[31]_i_21_n_0 ;
  wire \s_axi_rdata[31]_i_22_n_0 ;
  wire \s_axi_rdata[31]_i_23_n_0 ;
  wire \s_axi_rdata[31]_i_24_n_0 ;
  wire \s_axi_rdata[31]_i_25_n_0 ;
  wire \s_axi_rdata[31]_i_26_n_0 ;
  wire \s_axi_rdata[31]_i_27_n_0 ;
  wire \s_axi_rdata[31]_i_28_n_0 ;
  wire \s_axi_rdata[31]_i_29_n_0 ;
  wire \s_axi_rdata[31]_i_2_n_0 ;
  wire \s_axi_rdata[31]_i_30_n_0 ;
  wire \s_axi_rdata[31]_i_31_n_0 ;
  wire \s_axi_rdata[31]_i_32_n_0 ;
  wire \s_axi_rdata[31]_i_33_n_0 ;
  wire \s_axi_rdata[31]_i_34_n_0 ;
  wire \s_axi_rdata[31]_i_35_n_0 ;
  wire \s_axi_rdata[31]_i_36_n_0 ;
  wire \s_axi_rdata[31]_i_37_n_0 ;
  wire \s_axi_rdata[31]_i_3_n_0 ;
  wire \s_axi_rdata[31]_i_4_n_0 ;
  wire \s_axi_rdata[31]_i_6_n_0 ;
  wire \s_axi_rdata[31]_i_7_n_0 ;
  wire \s_axi_rdata[31]_i_8_n_0 ;
  wire \s_axi_rdata[31]_i_9_n_0 ;
  wire \s_axi_rdata[3]_i_3_n_0 ;
  wire \s_axi_rdata[3]_i_4_n_0 ;
  wire \s_axi_rdata[3]_i_5_n_0 ;
  wire \s_axi_rdata[3]_i_7_n_0 ;
  wire \s_axi_rdata[3]_i_8_n_0 ;
  wire \s_axi_rdata[4]_i_2_n_0 ;
  wire \s_axi_rdata[4]_i_3_n_0 ;
  wire \s_axi_rdata[4]_i_4_n_0 ;
  wire \s_axi_rdata[5]_i_2_n_0 ;
  wire \s_axi_rdata[5]_i_3_n_0 ;
  wire \s_axi_rdata[5]_i_4_n_0 ;
  wire \s_axi_rdata[5]_i_5_n_0 ;
  wire \s_axi_rdata[5]_i_8_n_0 ;
  wire \s_axi_rdata[6]_i_2_n_0 ;
  wire \s_axi_rdata[6]_i_3_n_0 ;
  wire \s_axi_rdata[7]_i_2_n_0 ;
  wire \s_axi_rdata[7]_i_3_n_0 ;
  wire \s_axi_rdata[8]_i_2_n_0 ;
  wire \s_axi_rdata[8]_i_3_n_0 ;
  wire \s_axi_rdata[9]_i_2_n_0 ;
  wire \s_axi_rdata[9]_i_3_n_0 ;
  wire \s_axi_rdata_reg[19]_i_3_n_0 ;
  wire \s_axi_rdata_reg[19]_i_3_n_1 ;
  wire \s_axi_rdata_reg[19]_i_3_n_2 ;
  wire \s_axi_rdata_reg[19]_i_3_n_3 ;
  wire \s_axi_rdata_reg[22]_i_3_n_0 ;
  wire \s_axi_rdata_reg[22]_i_3_n_1 ;
  wire \s_axi_rdata_reg[22]_i_3_n_2 ;
  wire \s_axi_rdata_reg[22]_i_3_n_3 ;
  wire \s_axi_rdata_reg[31]_i_10_n_0 ;
  wire \s_axi_rdata_reg[31]_i_10_n_1 ;
  wire \s_axi_rdata_reg[31]_i_10_n_2 ;
  wire \s_axi_rdata_reg[31]_i_10_n_3 ;
  wire \s_axi_rdata_reg[31]_i_5_n_1 ;
  wire \s_axi_rdata_reg[31]_i_5_n_2 ;
  wire \s_axi_rdata_reg[31]_i_5_n_3 ;
  wire s_axi_rready;
  wire s_axi_rvalid;
  wire s_axi_rvalid_i_1_n_0;
  wire [23:0]s_axi_wdata;
  wire s_axi_wready;
  wire s_axi_wvalid;
  wire [4:0]sel0;
  wire short_pkt_reg;
  (* DONT_TOUCH *) wire [3:0]shutdown_i;
  wire soft_rst;
  wire soft_rst_d1;
  wire spkt_fifo_dis_done_i_1_n_0;
  wire spkt_fifo_dis_done_reg_n_0;
  wire spkt_fifo_rst_ack;
  wire spkt_fifo_rst_r2c;
  wire src_ff_reg;
  wire [17:0]src_in;
  wire src_rcv;
  wire src_send;
  wire srst;
  wire [1:0]\syncstages_ff_reg[1][1] ;
  wire [1:0]vc_num;
  wire wr2_isr;
  wire \wr_addr[2]_i_1_n_0 ;
  wire \wr_addr[3]_i_1_n_0 ;
  wire \wr_addr[4]_i_1_n_0 ;
  wire \wr_addr[5]_i_1_n_0 ;
  wire \wr_addr[6]_i_1_n_0 ;
  wire \wr_addr[6]_i_2_n_0 ;
  wire wr_en;
  wire wr_req;
  wire wr_req016_out;
  wire xpm_array_single_02_n_0;
  wire xpm_array_single_02_n_1;
  wire [3:3]\NLW_LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_s_axi_rdata_reg[31]_i_5_CO_UNCONNECTED ;
  wire [21:0]NLW_xpm_array_single_01_dest_out_UNCONNECTED;
  wire NLW_xpm_single_01_dest_out_UNCONNECTED;
  wire NLW_xpm_single_05_dest_out_UNCONNECTED;

  assign cl_enable = cl_enable_i;
  assign out[3:0] = shutdown_i;
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \FRAME_RCVD_GEN[0].frame_rcvd_i[0]_i_1 
       (.I0(dest_out),
        .I1(m_axis_aresetn),
        .O(\ERR_FRAME_SYNC[3].fe_hunt_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \FSM_sequential_cur_state[2]_i_1 
       (.I0(m_axis_aresetn),
        .I1(dest_out),
        .O(errframedata_d1));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT3 #(
    .INIT(8'hF7)) 
    \LINE_BUF_WR_64.lbuf_wr_byte_cnt[3]_i_1 
       (.I0(m_axis_aresetn),
        .I1(dest_out),
        .I2(short_pkt_reg),
        .O(\LINE_BUF_WR_64.lbuf_wr_byte_cnt_reg[31] ));
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNT_C2R[0].lp_count[0][0]_i_1 
       (.I0(reset_released),
        .I1(lp_count_en_c2r_0),
        .O(lp_count_pulse_0));
  LUT1 #(
    .INIT(2'h1)) 
    \LP_CNT_C2R[0].lp_count[0][0]_i_3 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_5 [0]),
        .O(\LP_CNT_C2R[0].lp_count[0][0]_i_3_n_0 ));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][0] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(\LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_7 ),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_5 [0]),
        .R(SR));
  CARRY4 \LP_CNT_C2R[0].lp_count_reg[0][0]_i_2 
       (.CI(1'b0),
        .CO({\LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_0 ,\LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_1 ,\LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_2 ,\LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_4 ,\LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_5 ,\LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_6 ,\LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_7 }),
        .S({\LP_CNT_C2R[0].lp_count_reg[0]_5 [3:1],\LP_CNT_C2R[0].lp_count[0][0]_i_3_n_0 }));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][10] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_5 ),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_5 [10]),
        .R(SR));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][11] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_4 ),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_5 [11]),
        .R(SR));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][12] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(\LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_7 ),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_5 [12]),
        .R(SR));
  CARRY4 \LP_CNT_C2R[0].lp_count_reg[0][12]_i_1 
       (.CI(\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_0 ),
        .CO({\NLW_LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_CO_UNCONNECTED [3],\LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_1 ,\LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_2 ,\LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_4 ,\LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_5 ,\LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_6 ,\LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_7 }),
        .S(\LP_CNT_C2R[0].lp_count_reg[0]_5 [15:12]));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][13] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(\LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_6 ),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_5 [13]),
        .R(SR));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][14] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(\LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_5 ),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_5 [14]),
        .R(SR));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][15] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(\LP_CNT_C2R[0].lp_count_reg[0][12]_i_1_n_4 ),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_5 [15]),
        .R(SR));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][1] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(\LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_6 ),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_5 [1]),
        .R(SR));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][2] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(\LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_5 ),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_5 [2]),
        .R(SR));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][3] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(\LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_4 ),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_5 [3]),
        .R(SR));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][4] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(\LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_7 ),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_5 [4]),
        .R(SR));
  CARRY4 \LP_CNT_C2R[0].lp_count_reg[0][4]_i_1 
       (.CI(\LP_CNT_C2R[0].lp_count_reg[0][0]_i_2_n_0 ),
        .CO({\LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_0 ,\LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_1 ,\LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_2 ,\LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_4 ,\LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_5 ,\LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_6 ,\LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_7 }),
        .S(\LP_CNT_C2R[0].lp_count_reg[0]_5 [7:4]));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][5] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(\LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_6 ),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_5 [5]),
        .R(SR));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][6] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(\LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_5 ),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_5 [6]),
        .R(SR));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][7] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(\LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_4 ),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_5 [7]),
        .R(SR));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][8] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_7 ),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_5 [8]),
        .R(SR));
  CARRY4 \LP_CNT_C2R[0].lp_count_reg[0][8]_i_1 
       (.CI(\LP_CNT_C2R[0].lp_count_reg[0][4]_i_1_n_0 ),
        .CO({\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_0 ,\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_1 ,\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_2 ,\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_4 ,\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_5 ,\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_6 ,\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_7 }),
        .S(\LP_CNT_C2R[0].lp_count_reg[0]_5 [11:8]));
  FDRE \LP_CNT_C2R[0].lp_count_reg[0][9] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_0),
        .D(\LP_CNT_C2R[0].lp_count_reg[0][8]_i_1_n_6 ),
        .Q(\LP_CNT_C2R[0].lp_count_reg[0]_5 [9]),
        .R(SR));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "0" *) 
  (* RST_USED = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "PULSE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_pulse__xdcDup__2 \LP_CNT_C2R[0].xpm_pulse_01 
       (.dest_clk(s_axi_aclk),
        .dest_pulse(lp_count_en_c2r_0),
        .dest_rst(SS),
        .src_clk(m_axis_aclk),
        .src_pulse(lp_count_en[0]),
        .src_rst(srst));
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNT_C2R[1].lp_count[1][0]_i_1 
       (.I0(reset_released),
        .I1(lp_count_en_c2r_1),
        .O(lp_count_pulse_1));
  LUT1 #(
    .INIT(2'h1)) 
    \LP_CNT_C2R[1].lp_count[1][0]_i_3 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_4 [0]),
        .O(\LP_CNT_C2R[1].lp_count[1][0]_i_3_n_0 ));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][0] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(\LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_7 ),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_4 [0]),
        .R(SR));
  CARRY4 \LP_CNT_C2R[1].lp_count_reg[1][0]_i_2 
       (.CI(1'b0),
        .CO({\LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_0 ,\LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_1 ,\LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_2 ,\LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_4 ,\LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_5 ,\LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_6 ,\LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_7 }),
        .S({\LP_CNT_C2R[1].lp_count_reg[1]_4 [3:1],\LP_CNT_C2R[1].lp_count[1][0]_i_3_n_0 }));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][10] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_5 ),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_4 [10]),
        .R(SR));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][11] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_4 ),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_4 [11]),
        .R(SR));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][12] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(\LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_7 ),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_4 [12]),
        .R(SR));
  CARRY4 \LP_CNT_C2R[1].lp_count_reg[1][12]_i_1 
       (.CI(\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_0 ),
        .CO({\NLW_LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_CO_UNCONNECTED [3],\LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_1 ,\LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_2 ,\LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_4 ,\LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_5 ,\LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_6 ,\LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_7 }),
        .S(\LP_CNT_C2R[1].lp_count_reg[1]_4 [15:12]));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][13] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(\LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_6 ),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_4 [13]),
        .R(SR));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][14] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(\LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_5 ),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_4 [14]),
        .R(SR));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][15] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(\LP_CNT_C2R[1].lp_count_reg[1][12]_i_1_n_4 ),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_4 [15]),
        .R(SR));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][1] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(\LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_6 ),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_4 [1]),
        .R(SR));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][2] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(\LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_5 ),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_4 [2]),
        .R(SR));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][3] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(\LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_4 ),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_4 [3]),
        .R(SR));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][4] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(\LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_7 ),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_4 [4]),
        .R(SR));
  CARRY4 \LP_CNT_C2R[1].lp_count_reg[1][4]_i_1 
       (.CI(\LP_CNT_C2R[1].lp_count_reg[1][0]_i_2_n_0 ),
        .CO({\LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_0 ,\LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_1 ,\LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_2 ,\LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_4 ,\LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_5 ,\LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_6 ,\LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_7 }),
        .S(\LP_CNT_C2R[1].lp_count_reg[1]_4 [7:4]));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][5] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(\LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_6 ),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_4 [5]),
        .R(SR));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][6] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(\LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_5 ),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_4 [6]),
        .R(SR));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][7] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(\LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_4 ),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_4 [7]),
        .R(SR));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][8] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_7 ),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_4 [8]),
        .R(SR));
  CARRY4 \LP_CNT_C2R[1].lp_count_reg[1][8]_i_1 
       (.CI(\LP_CNT_C2R[1].lp_count_reg[1][4]_i_1_n_0 ),
        .CO({\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_0 ,\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_1 ,\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_2 ,\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_4 ,\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_5 ,\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_6 ,\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_7 }),
        .S(\LP_CNT_C2R[1].lp_count_reg[1]_4 [11:8]));
  FDRE \LP_CNT_C2R[1].lp_count_reg[1][9] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_1),
        .D(\LP_CNT_C2R[1].lp_count_reg[1][8]_i_1_n_6 ),
        .Q(\LP_CNT_C2R[1].lp_count_reg[1]_4 [9]),
        .R(SR));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "0" *) 
  (* RST_USED = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "PULSE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_pulse__xdcDup__3 \LP_CNT_C2R[1].xpm_pulse_01 
       (.dest_clk(s_axi_aclk),
        .dest_pulse(lp_count_en_c2r_1),
        .dest_rst(SS),
        .src_clk(m_axis_aclk),
        .src_pulse(lp_count_en[1]),
        .src_rst(srst));
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNT_C2R[2].lp_count[2][0]_i_1 
       (.I0(reset_released),
        .I1(lp_count_en_c2r_2),
        .O(lp_count_pulse_2));
  LUT1 #(
    .INIT(2'h1)) 
    \LP_CNT_C2R[2].lp_count[2][0]_i_3 
       (.I0(\LP_CNT_C2R[2].lp_count_reg[2]_3 [0]),
        .O(\LP_CNT_C2R[2].lp_count[2][0]_i_3_n_0 ));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][0] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(\LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_7 ),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_3 [0]),
        .R(SR));
  CARRY4 \LP_CNT_C2R[2].lp_count_reg[2][0]_i_2 
       (.CI(1'b0),
        .CO({\LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_0 ,\LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_1 ,\LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_2 ,\LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_4 ,\LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_5 ,\LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_6 ,\LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_7 }),
        .S({\LP_CNT_C2R[2].lp_count_reg[2]_3 [3:1],\LP_CNT_C2R[2].lp_count[2][0]_i_3_n_0 }));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][10] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_5 ),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_3 [10]),
        .R(SR));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][11] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_4 ),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_3 [11]),
        .R(SR));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][12] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(\LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_7 ),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_3 [12]),
        .R(SR));
  CARRY4 \LP_CNT_C2R[2].lp_count_reg[2][12]_i_1 
       (.CI(\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_0 ),
        .CO({\NLW_LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_CO_UNCONNECTED [3],\LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_1 ,\LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_2 ,\LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_4 ,\LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_5 ,\LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_6 ,\LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_7 }),
        .S(\LP_CNT_C2R[2].lp_count_reg[2]_3 [15:12]));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][13] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(\LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_6 ),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_3 [13]),
        .R(SR));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][14] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(\LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_5 ),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_3 [14]),
        .R(SR));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][15] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(\LP_CNT_C2R[2].lp_count_reg[2][12]_i_1_n_4 ),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_3 [15]),
        .R(SR));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][1] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(\LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_6 ),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_3 [1]),
        .R(SR));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][2] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(\LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_5 ),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_3 [2]),
        .R(SR));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][3] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(\LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_4 ),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_3 [3]),
        .R(SR));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][4] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(\LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_7 ),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_3 [4]),
        .R(SR));
  CARRY4 \LP_CNT_C2R[2].lp_count_reg[2][4]_i_1 
       (.CI(\LP_CNT_C2R[2].lp_count_reg[2][0]_i_2_n_0 ),
        .CO({\LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_0 ,\LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_1 ,\LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_2 ,\LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_4 ,\LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_5 ,\LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_6 ,\LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_7 }),
        .S(\LP_CNT_C2R[2].lp_count_reg[2]_3 [7:4]));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][5] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(\LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_6 ),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_3 [5]),
        .R(SR));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][6] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(\LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_5 ),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_3 [6]),
        .R(SR));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][7] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(\LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_4 ),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_3 [7]),
        .R(SR));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][8] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_7 ),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_3 [8]),
        .R(SR));
  CARRY4 \LP_CNT_C2R[2].lp_count_reg[2][8]_i_1 
       (.CI(\LP_CNT_C2R[2].lp_count_reg[2][4]_i_1_n_0 ),
        .CO({\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_0 ,\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_1 ,\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_2 ,\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_4 ,\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_5 ,\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_6 ,\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_7 }),
        .S(\LP_CNT_C2R[2].lp_count_reg[2]_3 [11:8]));
  FDRE \LP_CNT_C2R[2].lp_count_reg[2][9] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_2),
        .D(\LP_CNT_C2R[2].lp_count_reg[2][8]_i_1_n_6 ),
        .Q(\LP_CNT_C2R[2].lp_count_reg[2]_3 [9]),
        .R(SR));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "0" *) 
  (* RST_USED = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "PULSE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_pulse__xdcDup__4 \LP_CNT_C2R[2].xpm_pulse_01 
       (.dest_clk(s_axi_aclk),
        .dest_pulse(lp_count_en_c2r_2),
        .dest_rst(SS),
        .src_clk(m_axis_aclk),
        .src_pulse(lp_count_en[2]),
        .src_rst(srst));
  LUT2 #(
    .INIT(4'h8)) 
    \LP_CNT_C2R[3].lp_count[3][0]_i_1 
       (.I0(reset_released),
        .I1(lp_count_en_c2r_3),
        .O(lp_count_pulse_3));
  LUT1 #(
    .INIT(2'h1)) 
    \LP_CNT_C2R[3].lp_count[3][0]_i_3 
       (.I0(\LP_CNT_C2R[3].lp_count_reg[3]_6 [0]),
        .O(\LP_CNT_C2R[3].lp_count[3][0]_i_3_n_0 ));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][0] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(\LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_7 ),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_6 [0]),
        .R(SR));
  CARRY4 \LP_CNT_C2R[3].lp_count_reg[3][0]_i_2 
       (.CI(1'b0),
        .CO({\LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_0 ,\LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_1 ,\LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_2 ,\LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_4 ,\LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_5 ,\LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_6 ,\LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_7 }),
        .S({\LP_CNT_C2R[3].lp_count_reg[3]_6 [3:1],\LP_CNT_C2R[3].lp_count[3][0]_i_3_n_0 }));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][10] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_5 ),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_6 [10]),
        .R(SR));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][11] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_4 ),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_6 [11]),
        .R(SR));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][12] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(\LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_7 ),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_6 [12]),
        .R(SR));
  CARRY4 \LP_CNT_C2R[3].lp_count_reg[3][12]_i_1 
       (.CI(\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_0 ),
        .CO({\NLW_LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_CO_UNCONNECTED [3],\LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_1 ,\LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_2 ,\LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_4 ,\LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_5 ,\LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_6 ,\LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_7 }),
        .S(\LP_CNT_C2R[3].lp_count_reg[3]_6 [15:12]));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][13] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(\LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_6 ),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_6 [13]),
        .R(SR));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][14] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(\LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_5 ),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_6 [14]),
        .R(SR));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][15] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(\LP_CNT_C2R[3].lp_count_reg[3][12]_i_1_n_4 ),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_6 [15]),
        .R(SR));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][1] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(\LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_6 ),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_6 [1]),
        .R(SR));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][2] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(\LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_5 ),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_6 [2]),
        .R(SR));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][3] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(\LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_4 ),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_6 [3]),
        .R(SR));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][4] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(\LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_7 ),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_6 [4]),
        .R(SR));
  CARRY4 \LP_CNT_C2R[3].lp_count_reg[3][4]_i_1 
       (.CI(\LP_CNT_C2R[3].lp_count_reg[3][0]_i_2_n_0 ),
        .CO({\LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_0 ,\LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_1 ,\LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_2 ,\LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_4 ,\LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_5 ,\LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_6 ,\LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_7 }),
        .S(\LP_CNT_C2R[3].lp_count_reg[3]_6 [7:4]));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][5] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(\LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_6 ),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_6 [5]),
        .R(SR));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][6] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(\LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_5 ),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_6 [6]),
        .R(SR));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][7] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(\LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_4 ),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_6 [7]),
        .R(SR));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][8] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_7 ),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_6 [8]),
        .R(SR));
  CARRY4 \LP_CNT_C2R[3].lp_count_reg[3][8]_i_1 
       (.CI(\LP_CNT_C2R[3].lp_count_reg[3][4]_i_1_n_0 ),
        .CO({\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_0 ,\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_1 ,\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_2 ,\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_4 ,\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_5 ,\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_6 ,\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_7 }),
        .S(\LP_CNT_C2R[3].lp_count_reg[3]_6 [11:8]));
  FDRE \LP_CNT_C2R[3].lp_count_reg[3][9] 
       (.C(s_axi_aclk),
        .CE(lp_count_pulse_3),
        .D(\LP_CNT_C2R[3].lp_count_reg[3][8]_i_1_n_6 ),
        .Q(\LP_CNT_C2R[3].lp_count_reg[3]_6 [9]),
        .R(SR));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "0" *) 
  (* RST_USED = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "PULSE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_pulse \LP_CNT_C2R[3].xpm_pulse_01 
       (.dest_clk(s_axi_aclk),
        .dest_pulse(lp_count_en_c2r_3),
        .dest_rst(SS),
        .src_clk(m_axis_aclk),
        .src_pulse(lp_count_en[3]),
        .src_rst(srst));
  LUT5 #(
    .INIT(32'hBBBBFBBB)) 
    \LX_INFO_GEN[0].lx_info[0][5]_i_1 
       (.I0(soft_rst),
        .I1(s_axi_aresetn),
        .I2(\core_config[1]_i_2_n_0 ),
        .I3(p_0_in_0[0]),
        .I4(p_0_in_0[3]),
        .O(lx_info));
  FDRE \LX_INFO_GEN[0].lx_info_reg[0][2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[0]),
        .Q(\LX_INFO_GEN[0].lx_info_reg[0]_1 [2]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[0].lx_info_reg[0][3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[1]),
        .Q(\LX_INFO_GEN[0].lx_info_reg[0]_1 [3]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[0].lx_info_reg[0][4] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[2]),
        .Q(\LX_INFO_GEN[0].lx_info_reg[0]_1 [4]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[0].lx_info_reg[0][5] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[3]),
        .Q(\LX_INFO_GEN[0].lx_info_reg[0]_1 [5]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[1].lx_info_reg[1][2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[4]),
        .Q(\LX_INFO_GEN[1].lx_info_reg[1]_2 [2]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[1].lx_info_reg[1][3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[5]),
        .Q(\LX_INFO_GEN[1].lx_info_reg[1]_2 [3]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[1].lx_info_reg[1][4] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[6]),
        .Q(\LX_INFO_GEN[1].lx_info_reg[1]_2 [4]),
        .R(lx_info));
  FDRE \LX_INFO_GEN[1].lx_info_reg[1][5] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(lx_info_all[7]),
        .Q(\LX_INFO_GEN[1].lx_info_reg[1]_2 [5]),
        .R(lx_info));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE \SD_INV_1.cl_enable_i_reg 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\SD_INV_1.shutdown_i[3]_i_1_n_0 ),
        .Q(cl_enable_i),
        .S(SS));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \SD_INV_1.shutdown_i[3]_i_1 
       (.I0(\core_config_reg_n_0_[0] ),
        .I1(pkt_dis_done),
        .O(\SD_INV_1.shutdown_i[3]_i_1_n_0 ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE \SD_INV_1.shutdown_i_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\SD_INV_1.shutdown_i[3]_i_1_n_0 ),
        .Q(shutdown_i[0]),
        .S(SS));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE \SD_INV_1.shutdown_i_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\SD_INV_1.shutdown_i[3]_i_1_n_0 ),
        .Q(shutdown_i[1]),
        .S(SS));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE \SD_INV_1.shutdown_i_reg[2] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\SD_INV_1.shutdown_i[3]_i_1_n_0 ),
        .Q(shutdown_i[2]),
        .S(SS));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  FDSE \SD_INV_1.shutdown_i_reg[3] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\SD_INV_1.shutdown_i[3]_i_1_n_0 ),
        .Q(shutdown_i[3]),
        .S(SS));
  LUT3 #(
    .INIT(8'hB8)) 
    \active_lanes[0]_i_1 
       (.I0(active_lanes_r2p[0]),
        .I1(\active_lanes[1]_i_2_n_0 ),
        .I2(\active_lanes_reg_n_0_[0] ),
        .O(\active_lanes[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \active_lanes[1]_i_1 
       (.I0(active_lanes_r2p[1]),
        .I1(\active_lanes[1]_i_2_n_0 ),
        .I2(\active_lanes_reg_n_0_[1] ),
        .O(\active_lanes[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h80008080C0C0CCCC)) 
    \active_lanes[1]_i_2 
       (.I0(l2_ppiclk_ss1),
        .I1(l0_ppiclk_ss1),
        .I2(l1_ppiclk_ss1),
        .I3(l3_ppiclk_ss1),
        .I4(\active_lanes_reg_n_0_[0] ),
        .I5(\active_lanes_reg_n_0_[1] ),
        .O(\active_lanes[1]_i_2_n_0 ));
  FDPE \active_lanes_reg[0] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .D(\active_lanes[0]_i_1_n_0 ),
        .PRE(\arststages_ff_reg[1] ),
        .Q(\active_lanes_reg_n_0_[0] ));
  FDCE \active_lanes_reg[1] 
       (.C(dl0_rxbyteclkhs),
        .CE(1'b1),
        .CLR(\arststages_ff_reg[1] ),
        .D(\active_lanes[1]_i_1_n_0 ),
        .Q(\active_lanes_reg_n_0_[1] ));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \cl_info[0]_i_1 
       (.I0(soft_rst),
        .I1(s_axi_aresetn),
        .I2(cl_info_all[0]),
        .O(\cl_info[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \cl_info[1]_i_1 
       (.I0(soft_rst),
        .I1(s_axi_aresetn),
        .I2(cl_info_all[1]),
        .O(\cl_info[1]_i_1_n_0 ));
  FDRE \cl_info_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\cl_info[0]_i_1_n_0 ),
        .Q(cl_info[0]),
        .R(1'b0));
  FDRE \cl_info_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\cl_info[1]_i_1_n_0 ),
        .Q(cl_info[1]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFEFF0200)) 
    \core_config[0]_i_1 
       (.I0(s_axi_wdata[0]),
        .I1(p_0_in_0[3]),
        .I2(p_0_in_0[0]),
        .I3(\core_config[1]_i_2_n_0 ),
        .I4(\core_config_reg_n_0_[0] ),
        .O(\core_config[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT5 #(
    .INIT(32'hFEFF0200)) 
    \core_config[1]_i_1 
       (.I0(s_axi_wdata[1]),
        .I1(p_0_in_0[3]),
        .I2(p_0_in_0[0]),
        .I3(\core_config[1]_i_2_n_0 ),
        .I4(soft_rst),
        .O(\core_config[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000040)) 
    \core_config[1]_i_2 
       (.I0(s_axi_bvalid),
        .I1(wr_req),
        .I2(s_axi_wvalid),
        .I3(p_0_in_0[4]),
        .I4(p_0_in_0[2]),
        .I5(p_0_in_0[1]),
        .O(\core_config[1]_i_2_n_0 ));
  FDSE \core_config_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\core_config[0]_i_1_n_0 ),
        .Q(\core_config_reg_n_0_[0] ),
        .S(SS));
  FDRE \core_config_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\core_config[1]_i_1_n_0 ),
        .Q(soft_rst),
        .R(SS));
  FDRE core_en_d1_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\core_config_reg_n_0_[0] ),
        .Q(core_en_d1),
        .R(SS));
  LUT5 #(
    .INIT(32'hE000E0E0)) 
    data_dis_done_i_1
       (.I0(data_dis_done),
        .I1(data_shutdown_c2r),
        .I2(s_axi_aresetn),
        .I3(soft_rst),
        .I4(\core_config_reg_n_0_[0] ),
        .O(data_dis_done_i_1_n_0));
  FDRE data_dis_done_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(data_dis_done_i_1_n_0),
        .Q(data_dis_done),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT5 #(
    .INIT(32'hFFFF22F2)) 
    disable_in_progress_d1_i_1
       (.I0(core_en_d1),
        .I1(\core_config_reg_n_0_[0] ),
        .I2(soft_rst),
        .I3(soft_rst_d1),
        .I4(disable_in_progress_d1_i_2_n_0),
        .O(disable_in_progress));
  LUT4 #(
    .INIT(16'h2AAA)) 
    disable_in_progress_d1_i_2
       (.I0(disable_in_progress_d1),
        .I1(spkt_fifo_dis_done_reg_n_0),
        .I2(data_dis_done),
        .I3(pkt_dis_done),
        .O(disable_in_progress_d1_i_2_n_0));
  FDRE disable_in_progress_d1_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(disable_in_progress),
        .Q(disable_in_progress_d1),
        .R(SS));
  bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_gen_spkt_fifo gen_spkt_fifo
       (.D(D[0]),
        .E(p_19_in),
        .\HSC2R_CDC[10].hsc2r_vld_out_reg[10] (\s_axi_rdata[12]_i_3_n_0 ),
        .\HSC2R_CDC[11].hsc2r_vld_out_reg[11] (\s_axi_rdata[13]_i_3_n_0 ),
        .\HSC2R_CDC[6].hsc2r_vld_out_reg[6] (\s_axi_rdata[6]_i_3_n_0 ),
        .\HSC2R_CDC[7].hsc2r_vld_out_reg[7] (\s_axi_rdata[7]_i_3_n_0 ),
        .\HSC2R_CDC[8].hsc2r_vld_out_reg[8] (\s_axi_rdata[8]_i_3_n_0 ),
        .\HSC2R_CDC[9].hsc2r_vld_out_reg[9] (\s_axi_rdata[9]_i_3_n_0 ),
        .\LX_INFO_GEN[1].lx_info_reg[1][3] (\s_axi_rdata[3]_i_3_n_0 ),
        .\LX_INFO_GEN[1].lx_info_reg[1][4] (\s_axi_rdata[4]_i_4_n_0 ),
        .\LX_INFO_GEN[1].lx_info_reg[1][5] (\s_axi_rdata[5]_i_4_n_0 ),
        .Q(sel0),
        .\core_config_reg[1] (\s_axi_rdata[31]_i_4_n_0 ),
        .dest_out(dest_out),
        .disable_in_progress(disable_in_progress),
        .diwc_corrected(diwc_corrected),
        .\gie_reg[0] (\gie_reg_n_0_[0] ),
        .\ier_reg[15] (interrupt_INST_0_i_2_n_0),
        .\ier_reg[17] (interrupt_INST_0_i_1_n_0),
        .\ier_reg[21] ({\ier_reg_n_0_[21] ,\ier_reg_n_0_[20] ,\ier_reg_n_0_[19] ,\ier_reg_n_0_[18] }),
        .\ier_reg[31] (interrupt_INST_0_i_18_n_0),
        .\ier_reg[7] (interrupt_INST_0_i_3_n_0),
        .\img_info1_vc0_reg[19] (img_info1_vc0[19]),
        .\img_info1_vc0_reg[23] (\s_axi_rdata[23]_i_3_n_0 ),
        .\img_info1_vc1_reg[12] (\s_axi_rdata[12]_i_2_n_0 ),
        .\img_info1_vc1_reg[13] (\s_axi_rdata[13]_i_2_n_0 ),
        .\img_info1_vc1_reg[19] (img_info1_vc1[19]),
        .\img_info1_vc1_reg[6] (\s_axi_rdata[6]_i_2_n_0 ),
        .\img_info1_vc1_reg[7] (\s_axi_rdata[7]_i_2_n_0 ),
        .\img_info1_vc1_reg[8] (\s_axi_rdata[8]_i_2_n_0 ),
        .\img_info1_vc1_reg[9] (\s_axi_rdata[9]_i_2_n_0 ),
        .\img_info1_vc2_reg[23] (img_info1_vc2[23:0]),
        .\img_info1_vc3_reg[0] (\s_axi_rdata[0]_i_8_n_0 ),
        .\img_info1_vc3_reg[1] (\s_axi_rdata[1]_i_7_n_0 ),
        .\img_info1_vc3_reg[23] (img_info1_vc3[23:2]),
        .\img_info2_vc0_reg[0] (\s_axi_rdata[0]_i_4_n_0 ),
        .\img_info2_vc2_reg[5] ({\img_info2_vc2_reg_n_0_[5] ,\img_info2_vc2_reg_n_0_[4] ,\img_info2_vc2_reg_n_0_[3] ,\img_info2_vc2_reg_n_0_[2] ,\img_info2_vc2_reg_n_0_[1] ,\img_info2_vc2_reg_n_0_[0] }),
        .\img_info2_vc3_reg[5] ({\img_info2_vc3_reg_n_0_[5] ,\img_info2_vc3_reg_n_0_[4] ,\img_info2_vc3_reg_n_0_[3] ,\img_info2_vc3_reg_n_0_[2] }),
        .interrupt(interrupt),
        .\isr_i_reg[19] (\isr_i_reg[31] [9]),
        .isr_o(isr_o),
        .lp_count_all(lp_count_all[6:0]),
        .m_axis_aclk(m_axis_aclk),
        .m_axis_aresetn(m_axis_aresetn),
        .\rd_addr_reg[2] (\s_axi_rdata[3]_i_4_n_0 ),
        .\rd_addr_reg[2]_0 (\s_axi_rdata[0]_i_5_n_0 ),
        .\rd_addr_reg[2]_1 (\s_axi_rdata[1]_i_3_n_0 ),
        .\rd_addr_reg[2]_10 (\s_axi_rdata[30]_i_3_n_0 ),
        .\rd_addr_reg[2]_2 (\s_axi_rdata[1]_i_4_n_0 ),
        .\rd_addr_reg[2]_3 (\s_axi_rdata[4]_i_2_n_0 ),
        .\rd_addr_reg[2]_4 (\s_axi_rdata[4]_i_3_n_0 ),
        .\rd_addr_reg[2]_5 (\s_axi_rdata[5]_i_2_n_0 ),
        .\rd_addr_reg[2]_6 (\s_axi_rdata[5]_i_3_n_0 ),
        .\rd_addr_reg[2]_7 (\s_axi_rdata[31]_i_18_n_0 ),
        .\rd_addr_reg[2]_8 (\s_axi_rdata[31]_i_19_n_0 ),
        .\rd_addr_reg[2]_9 (\s_axi_rdata[3]_i_5_n_0 ),
        .\rd_addr_reg[3] (\s_axi_rdata[16]_i_3_n_0 ),
        .\rd_addr_reg[3]_0 (\s_axi_rdata[17]_i_3_n_0 ),
        .\rd_addr_reg[3]_1 (\s_axi_rdata[5]_i_5_n_0 ),
        .\rd_addr_reg[3]_2 (\s_axi_rdata[18]_i_3_n_0 ),
        .\rd_addr_reg[3]_3 (\s_axi_rdata[20]_i_3_n_0 ),
        .\rd_addr_reg[3]_4 (\s_axi_rdata[21]_i_3_n_0 ),
        .\rd_addr_reg[3]_5 (\s_axi_rdata[22]_i_4_n_0 ),
        .\rd_addr_reg[3]_6 (\s_axi_rdata[14]_i_2_n_0 ),
        .\rd_addr_reg[3]_7 (\s_axi_rdata[15]_i_2_n_0 ),
        .\rd_addr_reg[3]_8 (\s_axi_rdata[10]_i_2_n_0 ),
        .\rd_addr_reg[3]_9 (\s_axi_rdata[11]_i_2_n_0 ),
        .\rd_addr_reg[4] (\s_axi_rdata[30]_i_4_n_0 ),
        .\rd_addr_reg[4]_0 (\s_axi_rdata[31]_i_6_n_0 ),
        .\rd_addr_reg[4]_1 (\s_axi_rdata[2]_i_3_n_0 ),
        .\rd_addr_reg[4]_2 (\s_axi_rdata[0]_i_9_n_0 ),
        .\rd_addr_reg[5] (\s_axi_rdata[0]_i_3_n_0 ),
        .rd_req(rd_req),
        .reset_released(reset_released),
        .s_axi_aclk(s_axi_aclk),
        .s_axi_araddr(s_axi_araddr),
        .s_axi_arvalid(s_axi_arvalid),
        .\s_axi_rdata_reg[23] ({gen_spkt_fifo_n_2,gen_spkt_fifo_n_3,gen_spkt_fifo_n_4,gen_spkt_fifo_n_5,gen_spkt_fifo_n_6,gen_spkt_fifo_n_7,gen_spkt_fifo_n_8,gen_spkt_fifo_n_9,gen_spkt_fifo_n_10,gen_spkt_fifo_n_11,gen_spkt_fifo_n_12,gen_spkt_fifo_n_13,gen_spkt_fifo_n_14,gen_spkt_fifo_n_15,gen_spkt_fifo_n_16,gen_spkt_fifo_n_17,gen_spkt_fifo_n_18,gen_spkt_fifo_n_19,gen_spkt_fifo_n_20,gen_spkt_fifo_n_21,gen_spkt_fifo_n_22,gen_spkt_fifo_n_23,gen_spkt_fifo_n_24,gen_spkt_fifo_n_25}),
        .s_axi_wdata(s_axi_wdata[19]),
        .src_ff_reg(src_ff_reg),
        .src_in(soft_rst),
        .\syncstages_ff_reg[1][0] (\s_axi_rdata[0]_i_6_n_0 ),
        .\syncstages_ff_reg[1][1] (\syncstages_ff_reg[1][1] ),
        .\syncstages_ff_reg[1][1]_0 (\s_axi_rdata[1]_i_5_n_0 ),
        .\syncstages_ff_reg[1][1]_1 (\isr_i_reg[22] [17:16]),
        .wr2_isr(wr2_isr),
        .wr_en(wr_en),
        .wr_req(wr_req));
  LUT5 #(
    .INIT(32'hEFFF2000)) 
    \gie[0]_i_1 
       (.I0(s_axi_wdata[0]),
        .I1(p_0_in_0[0]),
        .I2(p_0_in_0[3]),
        .I3(\core_config[1]_i_2_n_0 ),
        .I4(\gie_reg_n_0_[0] ),
        .O(\gie[0]_i_1_n_0 ));
  FDRE \gie_reg[0] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\gie[0]_i_1_n_0 ),
        .Q(\gie_reg_n_0_[0] ),
        .R(SS));
  LUT6 #(
    .INIT(64'h0000000000004000)) 
    \ier[31]_i_1 
       (.I0(p_0_in_0[0]),
        .I1(p_0_in_0[1]),
        .I2(p_0_in_0[3]),
        .I3(p_20_in),
        .I4(p_0_in_0[4]),
        .I5(p_0_in_0[2]),
        .O(ier));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \ier[31]_i_2 
       (.I0(s_axi_bvalid),
        .I1(wr_req),
        .I2(s_axi_wvalid),
        .O(p_20_in));
  FDRE \ier_reg[0] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[0]),
        .Q(\ier_reg_n_0_[0] ),
        .R(SS));
  FDRE \ier_reg[10] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[10]),
        .Q(\ier_reg_n_0_[10] ),
        .R(SS));
  FDRE \ier_reg[11] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[11]),
        .Q(\ier_reg_n_0_[11] ),
        .R(SS));
  FDRE \ier_reg[12] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[12]),
        .Q(\ier_reg_n_0_[12] ),
        .R(SS));
  FDRE \ier_reg[13] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[13]),
        .Q(\ier_reg_n_0_[13] ),
        .R(SS));
  FDRE \ier_reg[14] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[14]),
        .Q(\ier_reg_n_0_[14] ),
        .R(SS));
  FDRE \ier_reg[15] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[15]),
        .Q(\ier_reg_n_0_[15] ),
        .R(SS));
  FDRE \ier_reg[16] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[16]),
        .Q(\ier_reg_n_0_[16] ),
        .R(SS));
  FDRE \ier_reg[17] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[17]),
        .Q(\ier_reg_n_0_[17] ),
        .R(SS));
  FDRE \ier_reg[18] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[18]),
        .Q(\ier_reg_n_0_[18] ),
        .R(SS));
  FDRE \ier_reg[19] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[19]),
        .Q(\ier_reg_n_0_[19] ),
        .R(SS));
  FDRE \ier_reg[1] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[1]),
        .Q(\ier_reg_n_0_[1] ),
        .R(SS));
  FDRE \ier_reg[20] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[20]),
        .Q(\ier_reg_n_0_[20] ),
        .R(SS));
  FDRE \ier_reg[21] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[21]),
        .Q(\ier_reg_n_0_[21] ),
        .R(SS));
  FDRE \ier_reg[22] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[22]),
        .Q(\ier_reg_n_0_[22] ),
        .R(SS));
  FDRE \ier_reg[2] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[2]),
        .Q(\ier_reg_n_0_[2] ),
        .R(SS));
  FDRE \ier_reg[31] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[23]),
        .Q(\ier_reg_n_0_[31] ),
        .R(SS));
  FDRE \ier_reg[3] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[3]),
        .Q(\ier_reg_n_0_[3] ),
        .R(SS));
  FDRE \ier_reg[4] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[4]),
        .Q(\ier_reg_n_0_[4] ),
        .R(SS));
  FDRE \ier_reg[5] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[5]),
        .Q(\ier_reg_n_0_[5] ),
        .R(SS));
  FDRE \ier_reg[6] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[6]),
        .Q(\ier_reg_n_0_[6] ),
        .R(SS));
  FDRE \ier_reg[7] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[7]),
        .Q(\ier_reg_n_0_[7] ),
        .R(SS));
  FDRE \ier_reg[8] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[8]),
        .Q(\ier_reg_n_0_[8] ),
        .R(SS));
  FDRE \ier_reg[9] 
       (.C(s_axi_aclk),
        .CE(ier),
        .D(s_axi_wdata[9]),
        .Q(\ier_reg_n_0_[9] ),
        .R(SS));
  LUT3 #(
    .INIT(8'h02)) 
    \img_info1_vc0[15]_i_1 
       (.I0(img_vld),
        .I1(vc_num[1]),
        .I2(vc_num[0]),
        .O(\img_info1_vc0[15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h1F)) 
    \img_info1_vc0[31]_i_1 
       (.I0(vc_num[1]),
        .I1(vc_num[0]),
        .I2(img_vld),
        .O(\img_info1_vc0[31]_i_1_n_0 ));
  FDRE \img_info1_vc0_reg[0] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[8] ),
        .Q(img_info1_vc0[0]),
        .R(SR));
  FDRE \img_info1_vc0_reg[10] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[18] ),
        .Q(img_info1_vc0[10]),
        .R(SR));
  FDRE \img_info1_vc0_reg[11] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[19] ),
        .Q(img_info1_vc0[11]),
        .R(SR));
  FDRE \img_info1_vc0_reg[12] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[20] ),
        .Q(img_info1_vc0[12]),
        .R(SR));
  FDRE \img_info1_vc0_reg[13] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[21] ),
        .Q(img_info1_vc0[13]),
        .R(SR));
  FDRE \img_info1_vc0_reg[14] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[22] ),
        .Q(img_info1_vc0[14]),
        .R(SR));
  FDRE \img_info1_vc0_reg[15] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[23] ),
        .Q(img_info1_vc0[15]),
        .R(SR));
  FDRE \img_info1_vc0_reg[16] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_5 [0]),
        .Q(img_info1_vc0[16]),
        .R(SR));
  FDRE \img_info1_vc0_reg[17] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_5 [1]),
        .Q(img_info1_vc0[17]),
        .R(SR));
  FDRE \img_info1_vc0_reg[18] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_5 [2]),
        .Q(img_info1_vc0[18]),
        .R(SR));
  FDRE \img_info1_vc0_reg[19] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_5 [3]),
        .Q(img_info1_vc0[19]),
        .R(SR));
  FDRE \img_info1_vc0_reg[1] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[9] ),
        .Q(img_info1_vc0[1]),
        .R(SR));
  FDRE \img_info1_vc0_reg[20] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_5 [4]),
        .Q(img_info1_vc0[20]),
        .R(SR));
  FDRE \img_info1_vc0_reg[21] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_5 [5]),
        .Q(img_info1_vc0[21]),
        .R(SR));
  FDRE \img_info1_vc0_reg[22] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_5 [6]),
        .Q(img_info1_vc0[22]),
        .R(SR));
  FDRE \img_info1_vc0_reg[23] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_5 [7]),
        .Q(img_info1_vc0[23]),
        .R(SR));
  FDRE \img_info1_vc0_reg[24] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_5 [8]),
        .Q(img_info1_vc0[24]),
        .R(SR));
  FDRE \img_info1_vc0_reg[25] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_5 [9]),
        .Q(img_info1_vc0[25]),
        .R(SR));
  FDRE \img_info1_vc0_reg[26] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_5 [10]),
        .Q(img_info1_vc0[26]),
        .R(SR));
  FDRE \img_info1_vc0_reg[27] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_5 [11]),
        .Q(img_info1_vc0[27]),
        .R(SR));
  FDRE \img_info1_vc0_reg[28] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_5 [12]),
        .Q(img_info1_vc0[28]),
        .R(SR));
  FDRE \img_info1_vc0_reg[29] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_5 [13]),
        .Q(img_info1_vc0[29]),
        .R(SR));
  FDRE \img_info1_vc0_reg[2] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[10] ),
        .Q(img_info1_vc0[2]),
        .R(SR));
  FDRE \img_info1_vc0_reg[30] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_5 [14]),
        .Q(img_info1_vc0[30]),
        .R(SR));
  FDRE \img_info1_vc0_reg[31] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[0].lp_count_reg[0]_5 [15]),
        .Q(img_info1_vc0[31]),
        .R(SR));
  FDRE \img_info1_vc0_reg[3] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[11] ),
        .Q(img_info1_vc0[3]),
        .R(SR));
  FDRE \img_info1_vc0_reg[4] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[12] ),
        .Q(img_info1_vc0[4]),
        .R(SR));
  FDRE \img_info1_vc0_reg[5] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[13] ),
        .Q(img_info1_vc0[5]),
        .R(SR));
  FDRE \img_info1_vc0_reg[6] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[14] ),
        .Q(img_info1_vc0[6]),
        .R(SR));
  FDRE \img_info1_vc0_reg[7] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[15] ),
        .Q(img_info1_vc0[7]),
        .R(SR));
  FDRE \img_info1_vc0_reg[8] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[16] ),
        .Q(img_info1_vc0[8]),
        .R(SR));
  FDRE \img_info1_vc0_reg[9] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[17] ),
        .Q(img_info1_vc0[9]),
        .R(SR));
  LUT3 #(
    .INIT(8'h20)) 
    \img_info1_vc1[15]_i_1 
       (.I0(img_vld),
        .I1(vc_num[1]),
        .I2(vc_num[0]),
        .O(\img_info1_vc1[15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h4F)) 
    \img_info1_vc1[31]_i_1 
       (.I0(vc_num[1]),
        .I1(vc_num[0]),
        .I2(img_vld),
        .O(\img_info1_vc1[31]_i_1_n_0 ));
  FDRE \img_info1_vc1_reg[0] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[8] ),
        .Q(img_info1_vc1[0]),
        .R(SR));
  FDRE \img_info1_vc1_reg[10] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[18] ),
        .Q(img_info1_vc1[10]),
        .R(SR));
  FDRE \img_info1_vc1_reg[11] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[19] ),
        .Q(img_info1_vc1[11]),
        .R(SR));
  FDRE \img_info1_vc1_reg[12] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[20] ),
        .Q(img_info1_vc1[12]),
        .R(SR));
  FDRE \img_info1_vc1_reg[13] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[21] ),
        .Q(img_info1_vc1[13]),
        .R(SR));
  FDRE \img_info1_vc1_reg[14] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[22] ),
        .Q(img_info1_vc1[14]),
        .R(SR));
  FDRE \img_info1_vc1_reg[15] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[23] ),
        .Q(img_info1_vc1[15]),
        .R(SR));
  FDRE \img_info1_vc1_reg[16] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_4 [0]),
        .Q(img_info1_vc1[16]),
        .R(SR));
  FDRE \img_info1_vc1_reg[17] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_4 [1]),
        .Q(img_info1_vc1[17]),
        .R(SR));
  FDRE \img_info1_vc1_reg[18] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_4 [2]),
        .Q(img_info1_vc1[18]),
        .R(SR));
  FDRE \img_info1_vc1_reg[19] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_4 [3]),
        .Q(img_info1_vc1[19]),
        .R(SR));
  FDRE \img_info1_vc1_reg[1] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[9] ),
        .Q(img_info1_vc1[1]),
        .R(SR));
  FDRE \img_info1_vc1_reg[20] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_4 [4]),
        .Q(img_info1_vc1[20]),
        .R(SR));
  FDRE \img_info1_vc1_reg[21] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_4 [5]),
        .Q(img_info1_vc1[21]),
        .R(SR));
  FDRE \img_info1_vc1_reg[22] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_4 [6]),
        .Q(img_info1_vc1[22]),
        .R(SR));
  FDRE \img_info1_vc1_reg[23] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_4 [7]),
        .Q(img_info1_vc1[23]),
        .R(SR));
  FDRE \img_info1_vc1_reg[24] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_4 [8]),
        .Q(img_info1_vc1[24]),
        .R(SR));
  FDRE \img_info1_vc1_reg[25] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_4 [9]),
        .Q(img_info1_vc1[25]),
        .R(SR));
  FDRE \img_info1_vc1_reg[26] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_4 [10]),
        .Q(img_info1_vc1[26]),
        .R(SR));
  FDRE \img_info1_vc1_reg[27] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_4 [11]),
        .Q(img_info1_vc1[27]),
        .R(SR));
  FDRE \img_info1_vc1_reg[28] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_4 [12]),
        .Q(img_info1_vc1[28]),
        .R(SR));
  FDRE \img_info1_vc1_reg[29] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_4 [13]),
        .Q(img_info1_vc1[29]),
        .R(SR));
  FDRE \img_info1_vc1_reg[2] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[10] ),
        .Q(img_info1_vc1[2]),
        .R(SR));
  FDRE \img_info1_vc1_reg[30] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_4 [14]),
        .Q(img_info1_vc1[30]),
        .R(SR));
  FDRE \img_info1_vc1_reg[31] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[1].lp_count_reg[1]_4 [15]),
        .Q(img_info1_vc1[31]),
        .R(SR));
  FDRE \img_info1_vc1_reg[3] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[11] ),
        .Q(img_info1_vc1[3]),
        .R(SR));
  FDRE \img_info1_vc1_reg[4] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[12] ),
        .Q(img_info1_vc1[4]),
        .R(SR));
  FDRE \img_info1_vc1_reg[5] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[13] ),
        .Q(img_info1_vc1[5]),
        .R(SR));
  FDRE \img_info1_vc1_reg[6] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[14] ),
        .Q(img_info1_vc1[6]),
        .R(SR));
  FDRE \img_info1_vc1_reg[7] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[15] ),
        .Q(img_info1_vc1[7]),
        .R(SR));
  FDRE \img_info1_vc1_reg[8] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[16] ),
        .Q(img_info1_vc1[8]),
        .R(SR));
  FDRE \img_info1_vc1_reg[9] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[17] ),
        .Q(img_info1_vc1[9]),
        .R(SR));
  LUT3 #(
    .INIT(8'h20)) 
    \img_info1_vc2[15]_i_1 
       (.I0(img_vld),
        .I1(vc_num[0]),
        .I2(vc_num[1]),
        .O(\img_info1_vc2[15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h4F)) 
    \img_info1_vc2[31]_i_1 
       (.I0(vc_num[0]),
        .I1(vc_num[1]),
        .I2(img_vld),
        .O(\img_info1_vc2[31]_i_1_n_0 ));
  FDRE \img_info1_vc2_reg[0] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[8] ),
        .Q(img_info1_vc2[0]),
        .R(SR));
  FDRE \img_info1_vc2_reg[10] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[18] ),
        .Q(img_info1_vc2[10]),
        .R(SR));
  FDRE \img_info1_vc2_reg[11] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[19] ),
        .Q(img_info1_vc2[11]),
        .R(SR));
  FDRE \img_info1_vc2_reg[12] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[20] ),
        .Q(img_info1_vc2[12]),
        .R(SR));
  FDRE \img_info1_vc2_reg[13] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[21] ),
        .Q(img_info1_vc2[13]),
        .R(SR));
  FDRE \img_info1_vc2_reg[14] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[22] ),
        .Q(img_info1_vc2[14]),
        .R(SR));
  FDRE \img_info1_vc2_reg[15] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[23] ),
        .Q(img_info1_vc2[15]),
        .R(SR));
  FDRE \img_info1_vc2_reg[16] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_3 [0]),
        .Q(img_info1_vc2[16]),
        .R(SR));
  FDRE \img_info1_vc2_reg[17] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_3 [1]),
        .Q(img_info1_vc2[17]),
        .R(SR));
  FDRE \img_info1_vc2_reg[18] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_3 [2]),
        .Q(img_info1_vc2[18]),
        .R(SR));
  FDRE \img_info1_vc2_reg[19] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_3 [3]),
        .Q(img_info1_vc2[19]),
        .R(SR));
  FDRE \img_info1_vc2_reg[1] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[9] ),
        .Q(img_info1_vc2[1]),
        .R(SR));
  FDRE \img_info1_vc2_reg[20] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_3 [4]),
        .Q(img_info1_vc2[20]),
        .R(SR));
  FDRE \img_info1_vc2_reg[21] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_3 [5]),
        .Q(img_info1_vc2[21]),
        .R(SR));
  FDRE \img_info1_vc2_reg[22] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_3 [6]),
        .Q(img_info1_vc2[22]),
        .R(SR));
  FDRE \img_info1_vc2_reg[23] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_3 [7]),
        .Q(img_info1_vc2[23]),
        .R(SR));
  FDRE \img_info1_vc2_reg[24] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_3 [8]),
        .Q(img_info1_vc2[24]),
        .R(SR));
  FDRE \img_info1_vc2_reg[25] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_3 [9]),
        .Q(img_info1_vc2[25]),
        .R(SR));
  FDRE \img_info1_vc2_reg[26] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_3 [10]),
        .Q(img_info1_vc2[26]),
        .R(SR));
  FDRE \img_info1_vc2_reg[27] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_3 [11]),
        .Q(img_info1_vc2[27]),
        .R(SR));
  FDRE \img_info1_vc2_reg[28] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_3 [12]),
        .Q(img_info1_vc2[28]),
        .R(SR));
  FDRE \img_info1_vc2_reg[29] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_3 [13]),
        .Q(img_info1_vc2[29]),
        .R(SR));
  FDRE \img_info1_vc2_reg[2] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[10] ),
        .Q(img_info1_vc2[2]),
        .R(SR));
  FDRE \img_info1_vc2_reg[30] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_3 [14]),
        .Q(img_info1_vc2[30]),
        .R(SR));
  FDRE \img_info1_vc2_reg[31] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[2].lp_count_reg[2]_3 [15]),
        .Q(img_info1_vc2[31]),
        .R(SR));
  FDRE \img_info1_vc2_reg[3] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[11] ),
        .Q(img_info1_vc2[3]),
        .R(SR));
  FDRE \img_info1_vc2_reg[4] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[12] ),
        .Q(img_info1_vc2[4]),
        .R(SR));
  FDRE \img_info1_vc2_reg[5] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[13] ),
        .Q(img_info1_vc2[5]),
        .R(SR));
  FDRE \img_info1_vc2_reg[6] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[14] ),
        .Q(img_info1_vc2[6]),
        .R(SR));
  FDRE \img_info1_vc2_reg[7] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[15] ),
        .Q(img_info1_vc2[7]),
        .R(SR));
  FDRE \img_info1_vc2_reg[8] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[16] ),
        .Q(img_info1_vc2[8]),
        .R(SR));
  FDRE \img_info1_vc2_reg[9] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[17] ),
        .Q(img_info1_vc2[9]),
        .R(SR));
  LUT3 #(
    .INIT(8'h80)) 
    \img_info1_vc3[15]_i_1 
       (.I0(img_vld),
        .I1(vc_num[1]),
        .I2(vc_num[0]),
        .O(\img_info1_vc3[15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h8F)) 
    \img_info1_vc3[31]_i_1 
       (.I0(vc_num[1]),
        .I1(vc_num[0]),
        .I2(img_vld),
        .O(\img_info1_vc3[31]_i_1_n_0 ));
  FDRE \img_info1_vc3_reg[0] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[8] ),
        .Q(img_info1_vc3[0]),
        .R(SR));
  FDRE \img_info1_vc3_reg[10] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[18] ),
        .Q(img_info1_vc3[10]),
        .R(SR));
  FDRE \img_info1_vc3_reg[11] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[19] ),
        .Q(img_info1_vc3[11]),
        .R(SR));
  FDRE \img_info1_vc3_reg[12] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[20] ),
        .Q(img_info1_vc3[12]),
        .R(SR));
  FDRE \img_info1_vc3_reg[13] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[21] ),
        .Q(img_info1_vc3[13]),
        .R(SR));
  FDRE \img_info1_vc3_reg[14] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[22] ),
        .Q(img_info1_vc3[14]),
        .R(SR));
  FDRE \img_info1_vc3_reg[15] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[23] ),
        .Q(img_info1_vc3[15]),
        .R(SR));
  FDRE \img_info1_vc3_reg[16] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_6 [0]),
        .Q(img_info1_vc3[16]),
        .R(SR));
  FDRE \img_info1_vc3_reg[17] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_6 [1]),
        .Q(img_info1_vc3[17]),
        .R(SR));
  FDRE \img_info1_vc3_reg[18] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_6 [2]),
        .Q(img_info1_vc3[18]),
        .R(SR));
  FDRE \img_info1_vc3_reg[19] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_6 [3]),
        .Q(img_info1_vc3[19]),
        .R(SR));
  FDRE \img_info1_vc3_reg[1] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[9] ),
        .Q(img_info1_vc3[1]),
        .R(SR));
  FDRE \img_info1_vc3_reg[20] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_6 [4]),
        .Q(img_info1_vc3[20]),
        .R(SR));
  FDRE \img_info1_vc3_reg[21] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_6 [5]),
        .Q(img_info1_vc3[21]),
        .R(SR));
  FDRE \img_info1_vc3_reg[22] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_6 [6]),
        .Q(img_info1_vc3[22]),
        .R(SR));
  FDRE \img_info1_vc3_reg[23] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_6 [7]),
        .Q(img_info1_vc3[23]),
        .R(SR));
  FDRE \img_info1_vc3_reg[24] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_6 [8]),
        .Q(img_info1_vc3[24]),
        .R(SR));
  FDRE \img_info1_vc3_reg[25] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_6 [9]),
        .Q(img_info1_vc3[25]),
        .R(SR));
  FDRE \img_info1_vc3_reg[26] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_6 [10]),
        .Q(img_info1_vc3[26]),
        .R(SR));
  FDRE \img_info1_vc3_reg[27] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_6 [11]),
        .Q(img_info1_vc3[27]),
        .R(SR));
  FDRE \img_info1_vc3_reg[28] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_6 [12]),
        .Q(img_info1_vc3[28]),
        .R(SR));
  FDRE \img_info1_vc3_reg[29] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_6 [13]),
        .Q(img_info1_vc3[29]),
        .R(SR));
  FDRE \img_info1_vc3_reg[2] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[10] ),
        .Q(img_info1_vc3[2]),
        .R(SR));
  FDRE \img_info1_vc3_reg[30] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_6 [14]),
        .Q(img_info1_vc3[30]),
        .R(SR));
  FDRE \img_info1_vc3_reg[31] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[31]_i_1_n_0 ),
        .D(\LP_CNT_C2R[3].lp_count_reg[3]_6 [15]),
        .Q(img_info1_vc3[31]),
        .R(SR));
  FDRE \img_info1_vc3_reg[3] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[11] ),
        .Q(img_info1_vc3[3]),
        .R(SR));
  FDRE \img_info1_vc3_reg[4] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[12] ),
        .Q(img_info1_vc3[4]),
        .R(SR));
  FDRE \img_info1_vc3_reg[5] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[13] ),
        .Q(img_info1_vc3[5]),
        .R(SR));
  FDRE \img_info1_vc3_reg[6] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[14] ),
        .Q(img_info1_vc3[6]),
        .R(SR));
  FDRE \img_info1_vc3_reg[7] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[15] ),
        .Q(img_info1_vc3[7]),
        .R(SR));
  FDRE \img_info1_vc3_reg[8] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[16] ),
        .Q(img_info1_vc3[8]),
        .R(SR));
  FDRE \img_info1_vc3_reg[9] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[17] ),
        .Q(img_info1_vc3[9]),
        .R(SR));
  FDRE \img_info2_vc0_reg[0] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[0] ),
        .Q(\img_info2_vc0_reg_n_0_[0] ),
        .R(SR));
  FDRE \img_info2_vc0_reg[1] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[1] ),
        .Q(\img_info2_vc0_reg_n_0_[1] ),
        .R(SR));
  FDRE \img_info2_vc0_reg[2] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[2] ),
        .Q(\img_info2_vc0_reg_n_0_[2] ),
        .R(SR));
  FDRE \img_info2_vc0_reg[3] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[3] ),
        .Q(\img_info2_vc0_reg_n_0_[3] ),
        .R(SR));
  FDRE \img_info2_vc0_reg[4] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[4] ),
        .Q(\img_info2_vc0_reg_n_0_[4] ),
        .R(SR));
  FDRE \img_info2_vc0_reg[5] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc0[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[5] ),
        .Q(\img_info2_vc0_reg_n_0_[5] ),
        .R(SR));
  FDRE \img_info2_vc1_reg[0] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[0] ),
        .Q(\img_info2_vc1_reg_n_0_[0] ),
        .R(SR));
  FDRE \img_info2_vc1_reg[1] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[1] ),
        .Q(\img_info2_vc1_reg_n_0_[1] ),
        .R(SR));
  FDRE \img_info2_vc1_reg[2] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[2] ),
        .Q(\img_info2_vc1_reg_n_0_[2] ),
        .R(SR));
  FDRE \img_info2_vc1_reg[3] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[3] ),
        .Q(\img_info2_vc1_reg_n_0_[3] ),
        .R(SR));
  FDRE \img_info2_vc1_reg[4] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[4] ),
        .Q(\img_info2_vc1_reg_n_0_[4] ),
        .R(SR));
  FDRE \img_info2_vc1_reg[5] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc1[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[5] ),
        .Q(\img_info2_vc1_reg_n_0_[5] ),
        .R(SR));
  FDRE \img_info2_vc2_reg[0] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[0] ),
        .Q(\img_info2_vc2_reg_n_0_[0] ),
        .R(SR));
  FDRE \img_info2_vc2_reg[1] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[1] ),
        .Q(\img_info2_vc2_reg_n_0_[1] ),
        .R(SR));
  FDRE \img_info2_vc2_reg[2] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[2] ),
        .Q(\img_info2_vc2_reg_n_0_[2] ),
        .R(SR));
  FDRE \img_info2_vc2_reg[3] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[3] ),
        .Q(\img_info2_vc2_reg_n_0_[3] ),
        .R(SR));
  FDRE \img_info2_vc2_reg[4] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[4] ),
        .Q(\img_info2_vc2_reg_n_0_[4] ),
        .R(SR));
  FDRE \img_info2_vc2_reg[5] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc2[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[5] ),
        .Q(\img_info2_vc2_reg_n_0_[5] ),
        .R(SR));
  FDRE \img_info2_vc3_reg[0] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[0] ),
        .Q(\img_info2_vc3_reg_n_0_[0] ),
        .R(SR));
  FDRE \img_info2_vc3_reg[1] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[1] ),
        .Q(\img_info2_vc3_reg_n_0_[1] ),
        .R(SR));
  FDRE \img_info2_vc3_reg[2] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[2] ),
        .Q(\img_info2_vc3_reg_n_0_[2] ),
        .R(SR));
  FDRE \img_info2_vc3_reg[3] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[3] ),
        .Q(\img_info2_vc3_reg_n_0_[3] ),
        .R(SR));
  FDRE \img_info2_vc3_reg[4] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[4] ),
        .Q(\img_info2_vc3_reg_n_0_[4] ),
        .R(SR));
  FDRE \img_info2_vc3_reg[5] 
       (.C(s_axi_aclk),
        .CE(\img_info1_vc3[15]_i_1_n_0 ),
        .D(\img_vld_out_reg_n_0_[5] ),
        .Q(\img_info2_vc3_reg_n_0_[5] ),
        .R(SR));
  (* DEST_EXT_HSK = "0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_SYNC_FF = "2" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "24" *) 
  (* XPM_CDC = "HANDSHAKE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_handshake__parameterized1 img_info_cdc
       (.dest_ack(1'b0),
        .dest_clk(s_axi_aclk),
        .dest_out(img_vld_out_i),
        .dest_req(img_vld_i),
        .src_clk(m_axis_aclk),
        .src_in(diwc_corrected),
        .src_rcv(src_rcv),
        .src_send(src_send));
  FDRE img_send_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(img_send_reg_0),
        .Q(src_send),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT3 #(
    .INIT(8'h40)) 
    img_vld_i_1
       (.I0(soft_rst),
        .I1(s_axi_aresetn),
        .I2(img_vld_i),
        .O(img_vld_i_1_n_0));
  FDRE \img_vld_out_reg[0] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[0]),
        .Q(\img_vld_out_reg_n_0_[0] ),
        .R(SR));
  FDRE \img_vld_out_reg[10] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[10]),
        .Q(\img_vld_out_reg_n_0_[10] ),
        .R(SR));
  FDRE \img_vld_out_reg[11] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[11]),
        .Q(\img_vld_out_reg_n_0_[11] ),
        .R(SR));
  FDRE \img_vld_out_reg[12] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[12]),
        .Q(\img_vld_out_reg_n_0_[12] ),
        .R(SR));
  FDRE \img_vld_out_reg[13] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[13]),
        .Q(\img_vld_out_reg_n_0_[13] ),
        .R(SR));
  FDRE \img_vld_out_reg[14] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[14]),
        .Q(\img_vld_out_reg_n_0_[14] ),
        .R(SR));
  FDRE \img_vld_out_reg[15] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[15]),
        .Q(\img_vld_out_reg_n_0_[15] ),
        .R(SR));
  FDRE \img_vld_out_reg[16] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[16]),
        .Q(\img_vld_out_reg_n_0_[16] ),
        .R(SR));
  FDRE \img_vld_out_reg[17] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[17]),
        .Q(\img_vld_out_reg_n_0_[17] ),
        .R(SR));
  FDRE \img_vld_out_reg[18] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[18]),
        .Q(\img_vld_out_reg_n_0_[18] ),
        .R(SR));
  FDRE \img_vld_out_reg[19] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[19]),
        .Q(\img_vld_out_reg_n_0_[19] ),
        .R(SR));
  FDRE \img_vld_out_reg[1] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[1]),
        .Q(\img_vld_out_reg_n_0_[1] ),
        .R(SR));
  FDRE \img_vld_out_reg[20] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[20]),
        .Q(\img_vld_out_reg_n_0_[20] ),
        .R(SR));
  FDRE \img_vld_out_reg[21] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[21]),
        .Q(\img_vld_out_reg_n_0_[21] ),
        .R(SR));
  FDRE \img_vld_out_reg[22] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[22]),
        .Q(\img_vld_out_reg_n_0_[22] ),
        .R(SR));
  FDRE \img_vld_out_reg[23] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[23]),
        .Q(\img_vld_out_reg_n_0_[23] ),
        .R(SR));
  FDRE \img_vld_out_reg[2] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[2]),
        .Q(\img_vld_out_reg_n_0_[2] ),
        .R(SR));
  FDRE \img_vld_out_reg[3] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[3]),
        .Q(\img_vld_out_reg_n_0_[3] ),
        .R(SR));
  FDRE \img_vld_out_reg[4] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[4]),
        .Q(\img_vld_out_reg_n_0_[4] ),
        .R(SR));
  FDRE \img_vld_out_reg[5] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[5]),
        .Q(\img_vld_out_reg_n_0_[5] ),
        .R(SR));
  FDRE \img_vld_out_reg[6] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[6]),
        .Q(vc_num[0]),
        .R(SR));
  FDRE \img_vld_out_reg[7] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[7]),
        .Q(vc_num[1]),
        .R(SR));
  FDRE \img_vld_out_reg[8] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[8]),
        .Q(\img_vld_out_reg_n_0_[8] ),
        .R(SR));
  FDRE \img_vld_out_reg[9] 
       (.C(s_axi_aclk),
        .CE(img_vld_i),
        .D(img_vld_out_i[9]),
        .Q(\img_vld_out_reg_n_0_[9] ),
        .R(SR));
  FDRE img_vld_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(img_vld_i_1_n_0),
        .Q(img_vld),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hF888)) 
    interrupt_INST_0_i_1
       (.I0(\ier_reg_n_0_[17] ),
        .I1(\isr_i_reg[22] [15]),
        .I2(\ier_reg_n_0_[16] ),
        .I3(\isr_i_reg[22] [14]),
        .O(interrupt_INST_0_i_1_n_0));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    interrupt_INST_0_i_10
       (.I0(\isr_i_reg[22] [9]),
        .I1(\ier_reg_n_0_[10] ),
        .I2(\isr_i_reg[22] [10]),
        .I3(\ier_reg_n_0_[11] ),
        .I4(interrupt_INST_0_i_20_n_0),
        .O(interrupt_INST_0_i_10_n_0));
  LUT6 #(
    .INIT(64'hFFFF00A800A800A8)) 
    interrupt_INST_0_i_11
       (.I0(\ier_reg_n_0_[5] ),
        .I1(p_0_in15_in),
        .I2(\isr_i_reg[31] [1]),
        .I3(soft_rst),
        .I4(\ier_reg_n_0_[4] ),
        .I5(\isr_i_reg[22] [4]),
        .O(interrupt_INST_0_i_11_n_0));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    interrupt_INST_0_i_14
       (.I0(\isr_i_reg[22] [2]),
        .I1(\ier_reg_n_0_[2] ),
        .I2(\isr_i_reg[22] [3]),
        .I3(\ier_reg_n_0_[3] ),
        .I4(interrupt_INST_0_i_23_n_0),
        .O(interrupt_INST_0_i_14_n_0));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    interrupt_INST_0_i_16
       (.I0(incorrect_lanes),
        .I1(\isr_i_reg[31] [11]),
        .I2(soft_rst),
        .O(isr_o));
  LUT6 #(
    .INIT(64'hFFFF00A800A800A8)) 
    interrupt_INST_0_i_18
       (.I0(\ier_reg_n_0_[31] ),
        .I1(p_0_in),
        .I2(\isr_i_reg[31] [13]),
        .I3(soft_rst),
        .I4(\ier_reg_n_0_[22] ),
        .I5(\isr_i_reg[22] [18]),
        .O(interrupt_INST_0_i_18_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    interrupt_INST_0_i_2
       (.I0(interrupt_INST_0_i_7_n_0),
        .I1(\ier_reg_n_0_[15] ),
        .I2(\isr_i_reg[22] [13]),
        .I3(\ier_reg_n_0_[14] ),
        .I4(\isr_i_reg[22] [12]),
        .I5(interrupt_INST_0_i_10_n_0),
        .O(interrupt_INST_0_i_2_n_0));
  LUT6 #(
    .INIT(64'hFFFF00A800A800A8)) 
    interrupt_INST_0_i_20
       (.I0(\ier_reg_n_0_[9] ),
        .I1(p_0_in11_in),
        .I2(\isr_i_reg[31] [5]),
        .I3(soft_rst),
        .I4(\ier_reg_n_0_[8] ),
        .I5(\isr_i_reg[22] [8]),
        .O(interrupt_INST_0_i_20_n_0));
  LUT6 #(
    .INIT(64'hFFFF00A800A800A8)) 
    interrupt_INST_0_i_23
       (.I0(\ier_reg_n_0_[1] ),
        .I1(p_0_in19_in),
        .I2(\isr_i_reg[31] [0]),
        .I3(soft_rst),
        .I4(\ier_reg_n_0_[0] ),
        .I5(\isr_i_reg[22] [0]),
        .O(interrupt_INST_0_i_23_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    interrupt_INST_0_i_3
       (.I0(interrupt_INST_0_i_11_n_0),
        .I1(\ier_reg_n_0_[7] ),
        .I2(\isr_i_reg[22] [7]),
        .I3(\ier_reg_n_0_[6] ),
        .I4(\isr_i_reg[22] [6]),
        .I5(interrupt_INST_0_i_14_n_0),
        .O(interrupt_INST_0_i_3_n_0));
  LUT6 #(
    .INIT(64'hFFFF00A800A800A8)) 
    interrupt_INST_0_i_7
       (.I0(\ier_reg_n_0_[13] ),
        .I1(p_0_in9_in),
        .I2(\isr_i_reg[31] [7]),
        .I3(soft_rst),
        .I4(\ier_reg_n_0_[12] ),
        .I5(\isr_i_reg[22] [11]),
        .O(interrupt_INST_0_i_7_n_0));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT4 #(
    .INIT(16'hDCFC)) 
    \isr_i[21]_i_1 
       (.I0(s_axi_wdata[21]),
        .I1(incorrect_lanes),
        .I2(\isr_i_reg[31] [11]),
        .I3(wr2_isr),
        .O(D[1]));
  LUT2 #(
    .INIT(4'hB)) 
    \isr_i[31]_i_1 
       (.I0(soft_rst),
        .I1(s_axi_aresetn),
        .O(SR));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \isr_i[31]_i_3 
       (.I0(p_0_in_0[3]),
        .I1(p_0_in_0[0]),
        .I2(\core_config[1]_i_2_n_0 ),
        .O(wr2_isr));
  FDRE pktnppi_fifo_rst_ack_i_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(pktnppi_fifo_rst_ack_i_reg_0),
        .Q(pktnppi_fifo_rst_ack_i),
        .R(SS));
  FDRE pktnppi_fifo_rst_ack_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(pktnppi_fifo_rst_ack_i),
        .Q(pktnppi_fifo_rst_ack),
        .R(SS));
  LUT2 #(
    .INIT(4'hB)) 
    pktnppi_fifo_rst_i_1
       (.I0(soft_rst),
        .I1(\core_config_reg_n_0_[0] ),
        .O(pktnppi_fifo_rst0));
  FDRE pktnppi_fifo_rst_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(pktnppi_fifo_rst0),
        .Q(pktnppi_fifo_rst_ack_i_reg_0),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT5 #(
    .INIT(32'hE000E0E0)) 
    ppi_dis_done_i_1
       (.I0(pkt_dis_done),
        .I1(pktnppi_fifo_rst_ack),
        .I2(s_axi_aresetn),
        .I3(soft_rst),
        .I4(\core_config_reg_n_0_[0] ),
        .O(ppi_dis_done_i_1_n_0));
  FDRE ppi_dis_done_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(ppi_dis_done_i_1_n_0),
        .Q(pkt_dis_done),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEFFF2000)) 
    \prot_config[1]_i_1 
       (.I0(s_axi_wdata[1]),
        .I1(p_0_in_0[3]),
        .I2(p_0_in_0[0]),
        .I3(\core_config[1]_i_2_n_0 ),
        .I4(incorrect_lanes),
        .O(\prot_config[1]_i_1_n_0 ));
  FDRE \prot_config_reg[1] 
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(\prot_config[1]_i_1_n_0 ),
        .Q(incorrect_lanes),
        .R(SS));
  FDRE \rd_addr_reg[2] 
       (.C(s_axi_aclk),
        .CE(p_19_in),
        .D(s_axi_araddr[0]),
        .Q(sel0[0]),
        .R(SS));
  FDRE \rd_addr_reg[3] 
       (.C(s_axi_aclk),
        .CE(p_19_in),
        .D(s_axi_araddr[1]),
        .Q(sel0[1]),
        .R(SS));
  FDRE \rd_addr_reg[4] 
       (.C(s_axi_aclk),
        .CE(p_19_in),
        .D(s_axi_araddr[2]),
        .Q(sel0[2]),
        .R(SS));
  FDRE \rd_addr_reg[5] 
       (.C(s_axi_aclk),
        .CE(p_19_in),
        .D(s_axi_araddr[3]),
        .Q(sel0[3]),
        .R(SS));
  FDRE \rd_addr_reg[6] 
       (.C(s_axi_aclk),
        .CE(p_19_in),
        .D(s_axi_araddr[4]),
        .Q(sel0[4]),
        .R(SS));
  LUT6 #(
    .INIT(64'h7777777700F00000)) 
    rd_req_i_1
       (.I0(s_axi_rvalid),
        .I1(s_axi_rready),
        .I2(s_axi_arvalid),
        .I3(wr_req),
        .I4(reset_released),
        .I5(rd_req),
        .O(rd_req_i_1_n_0));
  FDRE rd_req_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(rd_req_i_1_n_0),
        .Q(rd_req),
        .R(SS));
  FDRE reset_released_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_axi_aresetn),
        .Q(reset_released),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT3 #(
    .INIT(8'h04)) 
    s_axi_arready_INST_0
       (.I0(wr_req),
        .I1(reset_released),
        .I2(rd_req),
        .O(s_axi_arready));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    s_axi_awready_INST_0
       (.I0(s_axi_arvalid),
        .I1(rd_req),
        .I2(wr_req),
        .I3(reset_released),
        .O(s_axi_awready));
  LUT1 #(
    .INIT(2'h1)) 
    s_axi_bvalid_i_1
       (.I0(s_axi_aresetn),
        .O(SS));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT4 #(
    .INIT(16'h08F8)) 
    s_axi_bvalid_i_2
       (.I0(s_axi_wvalid),
        .I1(wr_req),
        .I2(s_axi_bvalid),
        .I3(s_axi_bready),
        .O(s_axi_bvalid_i_2_n_0));
  FDRE s_axi_bvalid_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_axi_bvalid_i_2_n_0),
        .Q(s_axi_bvalid),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \s_axi_rdata[0]_i_3 
       (.I0(sel0[3]),
        .I1(sel0[1]),
        .O(\s_axi_rdata[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hCFAFCFA0C0AFC0A0)) 
    \s_axi_rdata[0]_i_4 
       (.I0(\isr_i_reg[22] [0]),
        .I1(\img_info2_vc0_reg_n_0_[0] ),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(\gie_reg_n_0_[0] ),
        .I5(img_info1_vc0[0]),
        .O(\s_axi_rdata[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hA2228202A0208000)) 
    \s_axi_rdata[0]_i_5 
       (.I0(\s_axi_rdata[5]_i_8_n_0 ),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(\img_info2_vc1_reg_n_0_[0] ),
        .I4(img_info1_vc1[0]),
        .I5(\ier_reg_n_0_[0] ),
        .O(\s_axi_rdata[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000020300000200)) 
    \s_axi_rdata[0]_i_6 
       (.I0(p_10_in[0]),
        .I1(sel0[3]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(sel0[4]),
        .I5(\core_config_reg_n_0_[0] ),
        .O(\s_axi_rdata[0]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'hF0CCAA00)) 
    \s_axi_rdata[0]_i_8 
       (.I0(img_info1_vc3[0]),
        .I1(cl_info[0]),
        .I2(\img_info2_vc3_reg_n_0_[0] ),
        .I3(sel0[4]),
        .I4(sel0[0]),
        .O(\s_axi_rdata[0]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \s_axi_rdata[0]_i_9 
       (.I0(sel0[2]),
        .I1(sel0[1]),
        .I2(sel0[4]),
        .I3(sel0[0]),
        .O(\s_axi_rdata[0]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hABAEABAAAAAEAAAA)) 
    \s_axi_rdata[10]_i_2 
       (.I0(\s_axi_rdata[10]_i_4_n_0 ),
        .I1(sel0[1]),
        .I2(sel0[4]),
        .I3(sel0[0]),
        .I4(\ier_reg_n_0_[10] ),
        .I5(\isr_i_reg[22] [9]),
        .O(\s_axi_rdata[10]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[10]_i_4 
       (.I0(img_info1_vc1[10]),
        .I1(img_info1_vc0[10]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[10]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hABAEABAAAAAEAAAA)) 
    \s_axi_rdata[11]_i_2 
       (.I0(\s_axi_rdata[11]_i_4_n_0 ),
        .I1(sel0[1]),
        .I2(sel0[4]),
        .I3(sel0[0]),
        .I4(\ier_reg_n_0_[11] ),
        .I5(\isr_i_reg[22] [10]),
        .O(\s_axi_rdata[11]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[11]_i_4 
       (.I0(img_info1_vc1[11]),
        .I1(img_info1_vc0[11]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[11]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[12]_i_2 
       (.I0(img_info1_vc1[12]),
        .I1(img_info1_vc0[12]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0E000E000E00)) 
    \s_axi_rdata[12]_i_3 
       (.I0(p_0_in10_in),
        .I1(\isr_i_reg[31] [6]),
        .I2(soft_rst),
        .I3(\s_axi_rdata[31]_i_18_n_0 ),
        .I4(\ier_reg_n_0_[12] ),
        .I5(\s_axi_rdata[31]_i_19_n_0 ),
        .O(\s_axi_rdata[12]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[13]_i_2 
       (.I0(img_info1_vc1[13]),
        .I1(img_info1_vc0[13]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0E000E000E00)) 
    \s_axi_rdata[13]_i_3 
       (.I0(p_0_in9_in),
        .I1(\isr_i_reg[31] [7]),
        .I2(soft_rst),
        .I3(\s_axi_rdata[31]_i_18_n_0 ),
        .I4(\ier_reg_n_0_[13] ),
        .I5(\s_axi_rdata[31]_i_19_n_0 ),
        .O(\s_axi_rdata[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hABAEABAAAAAEAAAA)) 
    \s_axi_rdata[14]_i_2 
       (.I0(\s_axi_rdata[14]_i_4_n_0 ),
        .I1(sel0[1]),
        .I2(sel0[4]),
        .I3(sel0[0]),
        .I4(\ier_reg_n_0_[14] ),
        .I5(\isr_i_reg[22] [12]),
        .O(\s_axi_rdata[14]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[14]_i_4 
       (.I0(img_info1_vc1[14]),
        .I1(img_info1_vc0[14]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[14]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hABAEABAAAAAEAAAA)) 
    \s_axi_rdata[15]_i_2 
       (.I0(\s_axi_rdata[15]_i_4_n_0 ),
        .I1(sel0[1]),
        .I2(sel0[4]),
        .I3(sel0[0]),
        .I4(\ier_reg_n_0_[15] ),
        .I5(\isr_i_reg[22] [13]),
        .O(\s_axi_rdata[15]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[15]_i_4 
       (.I0(img_info1_vc1[15]),
        .I1(img_info1_vc0[15]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[15]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hABAEABAAAAAEAAAA)) 
    \s_axi_rdata[16]_i_3 
       (.I0(\s_axi_rdata[16]_i_4_n_0 ),
        .I1(sel0[1]),
        .I2(sel0[4]),
        .I3(sel0[0]),
        .I4(\ier_reg_n_0_[16] ),
        .I5(\isr_i_reg[22] [14]),
        .O(\s_axi_rdata[16]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[16]_i_4 
       (.I0(img_info1_vc1[16]),
        .I1(img_info1_vc0[16]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[16]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hABAEABAAAAAEAAAA)) 
    \s_axi_rdata[17]_i_3 
       (.I0(\s_axi_rdata[17]_i_4_n_0 ),
        .I1(sel0[1]),
        .I2(sel0[4]),
        .I3(sel0[0]),
        .I4(\ier_reg_n_0_[17] ),
        .I5(\isr_i_reg[22] [15]),
        .O(\s_axi_rdata[17]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[17]_i_4 
       (.I0(img_info1_vc1[17]),
        .I1(img_info1_vc0[17]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[17]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF0C080400)) 
    \s_axi_rdata[18]_i_3 
       (.I0(sel0[1]),
        .I1(sel0[4]),
        .I2(sel0[0]),
        .I3(img_info1_vc0[18]),
        .I4(img_info1_vc1[18]),
        .I5(\s_axi_rdata[18]_i_4_n_0 ),
        .O(\s_axi_rdata[18]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0E000E000E00)) 
    \s_axi_rdata[18]_i_4 
       (.I0(\syncstages_ff_reg[1][1] [0]),
        .I1(\isr_i_reg[31] [8]),
        .I2(soft_rst),
        .I3(\s_axi_rdata[31]_i_18_n_0 ),
        .I4(\ier_reg_n_0_[18] ),
        .I5(\s_axi_rdata[31]_i_19_n_0 ),
        .O(\s_axi_rdata[18]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h566A)) 
    \s_axi_rdata[19]_i_10 
       (.I0(\s_axi_rdata[19]_i_7_n_0 ),
        .I1(\LP_CNT_C2R[1].lp_count_reg[1]_4 [0]),
        .I2(\LP_CNT_C2R[2].lp_count_reg[2]_3 [0]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_5 [0]),
        .O(\s_axi_rdata[19]_i_10_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \s_axi_rdata[19]_i_11 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_4 [0]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [0]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_5 [0]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_6 [0]),
        .O(\s_axi_rdata[19]_i_11_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[19]_i_13 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_5 [2]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [2]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_4 [2]),
        .O(\s_axi_rdata[19]_i_13_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[19]_i_5 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_4 [1]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [1]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_5 [1]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_6 [2]),
        .I4(\s_axi_rdata[19]_i_13_n_0 ),
        .O(\s_axi_rdata[19]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hE81717E8)) 
    \s_axi_rdata[19]_i_6 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_4 [1]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [1]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_5 [1]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_6 [2]),
        .I4(\s_axi_rdata[19]_i_13_n_0 ),
        .O(\s_axi_rdata[19]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \s_axi_rdata[19]_i_7 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_4 [1]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [1]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_5 [1]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_6 [1]),
        .O(\s_axi_rdata[19]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[19]_i_8 
       (.I0(\s_axi_rdata[19]_i_5_n_0 ),
        .I1(\s_axi_rdata[22]_i_17_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_6 [3]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_5 [2]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_3 [2]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_4 [2]),
        .O(\s_axi_rdata[19]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6999999699969666)) 
    \s_axi_rdata[19]_i_9 
       (.I0(\s_axi_rdata[19]_i_13_n_0 ),
        .I1(\LP_CNT_C2R[3].lp_count_reg[3]_6 [2]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_5 [1]),
        .I3(\LP_CNT_C2R[2].lp_count_reg[2]_3 [1]),
        .I4(\LP_CNT_C2R[1].lp_count_reg[1]_4 [1]),
        .I5(\LP_CNT_C2R[3].lp_count_reg[3]_6 [1]),
        .O(\s_axi_rdata[19]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hA828A02088088000)) 
    \s_axi_rdata[1]_i_3 
       (.I0(\s_axi_rdata[0]_i_3_n_0 ),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(\img_info2_vc0_reg_n_0_[1] ),
        .I4(\isr_i_reg[22] [1]),
        .I5(img_info1_vc0[1]),
        .O(\s_axi_rdata[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hA2228202A0208000)) 
    \s_axi_rdata[1]_i_4 
       (.I0(\s_axi_rdata[5]_i_8_n_0 ),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(\img_info2_vc1_reg_n_0_[1] ),
        .I4(img_info1_vc1[1]),
        .I5(\ier_reg_n_0_[1] ),
        .O(\s_axi_rdata[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000020300000200)) 
    \s_axi_rdata[1]_i_5 
       (.I0(p_10_in[1]),
        .I1(sel0[3]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(sel0[4]),
        .I5(soft_rst),
        .O(\s_axi_rdata[1]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hF0CCAA00)) 
    \s_axi_rdata[1]_i_7 
       (.I0(img_info1_vc3[1]),
        .I1(cl_info[1]),
        .I2(\img_info2_vc3_reg_n_0_[1] ),
        .I3(sel0[4]),
        .I4(sel0[0]),
        .O(\s_axi_rdata[1]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF0C080400)) 
    \s_axi_rdata[20]_i_3 
       (.I0(sel0[1]),
        .I1(sel0[4]),
        .I2(sel0[0]),
        .I3(img_info1_vc0[20]),
        .I4(img_info1_vc1[20]),
        .I5(\s_axi_rdata[20]_i_4_n_0 ),
        .O(\s_axi_rdata[20]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0E000E000E00)) 
    \s_axi_rdata[20]_i_4 
       (.I0(\syncstages_ff_reg[1][1] [1]),
        .I1(\isr_i_reg[31] [10]),
        .I2(soft_rst),
        .I3(\s_axi_rdata[31]_i_18_n_0 ),
        .I4(\ier_reg_n_0_[20] ),
        .I5(\s_axi_rdata[31]_i_19_n_0 ),
        .O(\s_axi_rdata[20]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF0C080400)) 
    \s_axi_rdata[21]_i_3 
       (.I0(sel0[1]),
        .I1(sel0[4]),
        .I2(sel0[0]),
        .I3(img_info1_vc0[21]),
        .I4(img_info1_vc1[21]),
        .I5(\s_axi_rdata[21]_i_4_n_0 ),
        .O(\s_axi_rdata[21]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0E000E000E00)) 
    \s_axi_rdata[21]_i_4 
       (.I0(incorrect_lanes),
        .I1(\isr_i_reg[31] [11]),
        .I2(soft_rst),
        .I3(\s_axi_rdata[31]_i_18_n_0 ),
        .I4(\ier_reg_n_0_[21] ),
        .I5(\s_axi_rdata[31]_i_19_n_0 ),
        .O(\s_axi_rdata[21]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[22]_i_10 
       (.I0(\s_axi_rdata[22]_i_6_n_0 ),
        .I1(\s_axi_rdata[22]_i_14_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_6 [6]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_5 [5]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_3 [5]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_4 [5]),
        .O(\s_axi_rdata[22]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[22]_i_11 
       (.I0(\s_axi_rdata[22]_i_7_n_0 ),
        .I1(\s_axi_rdata[22]_i_15_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_6 [5]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_5 [4]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_3 [4]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_4 [4]),
        .O(\s_axi_rdata[22]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[22]_i_12 
       (.I0(\s_axi_rdata[22]_i_8_n_0 ),
        .I1(\s_axi_rdata[22]_i_16_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_6 [4]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_5 [3]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_3 [3]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_4 [3]),
        .O(\s_axi_rdata[22]_i_12_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0E000E000E00)) 
    \s_axi_rdata[22]_i_13 
       (.I0(dest_pulse),
        .I1(\isr_i_reg[31] [12]),
        .I2(soft_rst),
        .I3(\s_axi_rdata[31]_i_18_n_0 ),
        .I4(\ier_reg_n_0_[22] ),
        .I5(\s_axi_rdata[31]_i_19_n_0 ),
        .O(\s_axi_rdata[22]_i_13_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[22]_i_14 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_5 [6]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [6]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_4 [6]),
        .O(\s_axi_rdata[22]_i_14_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[22]_i_15 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_5 [5]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [5]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_4 [5]),
        .O(\s_axi_rdata[22]_i_15_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[22]_i_16 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_5 [4]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [4]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_4 [4]),
        .O(\s_axi_rdata[22]_i_16_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[22]_i_17 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_5 [3]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [3]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_4 [3]),
        .O(\s_axi_rdata[22]_i_17_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[22]_i_18 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_5 [7]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [7]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_4 [7]),
        .O(\s_axi_rdata[22]_i_18_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF0C080400)) 
    \s_axi_rdata[22]_i_4 
       (.I0(sel0[1]),
        .I1(sel0[4]),
        .I2(sel0[0]),
        .I3(img_info1_vc0[22]),
        .I4(img_info1_vc1[22]),
        .I5(\s_axi_rdata[22]_i_13_n_0 ),
        .O(\s_axi_rdata[22]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[22]_i_5 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_4 [5]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [5]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_5 [5]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_6 [6]),
        .I4(\s_axi_rdata[22]_i_14_n_0 ),
        .O(\s_axi_rdata[22]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[22]_i_6 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_4 [4]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [4]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_5 [4]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_6 [5]),
        .I4(\s_axi_rdata[22]_i_15_n_0 ),
        .O(\s_axi_rdata[22]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[22]_i_7 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_4 [3]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [3]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_5 [3]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_6 [4]),
        .I4(\s_axi_rdata[22]_i_16_n_0 ),
        .O(\s_axi_rdata[22]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[22]_i_8 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_4 [2]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [2]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_5 [2]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_6 [3]),
        .I4(\s_axi_rdata[22]_i_17_n_0 ),
        .O(\s_axi_rdata[22]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[22]_i_9 
       (.I0(\s_axi_rdata[22]_i_5_n_0 ),
        .I1(\s_axi_rdata[22]_i_18_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_6 [7]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_5 [6]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_3 [6]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_4 [6]),
        .O(\s_axi_rdata[22]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[23]_i_3 
       (.I0(\s_axi_rdata[30]_i_6_n_0 ),
        .I1(lp_count_all[7]),
        .I2(\s_axi_rdata[30]_i_7_n_0 ),
        .I3(img_info1_vc0[23]),
        .I4(img_info1_vc1[23]),
        .I5(\s_axi_rdata[30]_i_8_n_0 ),
        .O(\s_axi_rdata[23]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8880000F888)) 
    \s_axi_rdata[24]_i_1 
       (.I0(\s_axi_rdata[30]_i_2_n_0 ),
        .I1(img_info1_vc2[24]),
        .I2(\s_axi_rdata[30]_i_3_n_0 ),
        .I3(img_info1_vc3[24]),
        .I4(\s_axi_rdata[30]_i_4_n_0 ),
        .I5(\s_axi_rdata[24]_i_2_n_0 ),
        .O(\s_axi_rdata[24]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[24]_i_2 
       (.I0(\s_axi_rdata[30]_i_6_n_0 ),
        .I1(lp_count_all[8]),
        .I2(\s_axi_rdata[30]_i_7_n_0 ),
        .I3(img_info1_vc0[24]),
        .I4(img_info1_vc1[24]),
        .I5(\s_axi_rdata[30]_i_8_n_0 ),
        .O(\s_axi_rdata[24]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8880000F888)) 
    \s_axi_rdata[25]_i_1 
       (.I0(\s_axi_rdata[30]_i_2_n_0 ),
        .I1(img_info1_vc2[25]),
        .I2(\s_axi_rdata[30]_i_3_n_0 ),
        .I3(img_info1_vc3[25]),
        .I4(\s_axi_rdata[30]_i_4_n_0 ),
        .I5(\s_axi_rdata[25]_i_2_n_0 ),
        .O(\s_axi_rdata[25]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[25]_i_2 
       (.I0(\s_axi_rdata[30]_i_6_n_0 ),
        .I1(lp_count_all[9]),
        .I2(\s_axi_rdata[30]_i_7_n_0 ),
        .I3(img_info1_vc0[25]),
        .I4(img_info1_vc1[25]),
        .I5(\s_axi_rdata[30]_i_8_n_0 ),
        .O(\s_axi_rdata[25]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8880000F888)) 
    \s_axi_rdata[26]_i_1 
       (.I0(\s_axi_rdata[30]_i_2_n_0 ),
        .I1(img_info1_vc2[26]),
        .I2(\s_axi_rdata[30]_i_3_n_0 ),
        .I3(img_info1_vc3[26]),
        .I4(\s_axi_rdata[30]_i_4_n_0 ),
        .I5(\s_axi_rdata[26]_i_2_n_0 ),
        .O(\s_axi_rdata[26]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[26]_i_2 
       (.I0(\s_axi_rdata[30]_i_6_n_0 ),
        .I1(lp_count_all[10]),
        .I2(\s_axi_rdata[30]_i_7_n_0 ),
        .I3(img_info1_vc0[26]),
        .I4(img_info1_vc1[26]),
        .I5(\s_axi_rdata[30]_i_8_n_0 ),
        .O(\s_axi_rdata[26]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8880000F888)) 
    \s_axi_rdata[27]_i_1 
       (.I0(\s_axi_rdata[30]_i_2_n_0 ),
        .I1(img_info1_vc2[27]),
        .I2(\s_axi_rdata[30]_i_3_n_0 ),
        .I3(img_info1_vc3[27]),
        .I4(\s_axi_rdata[30]_i_4_n_0 ),
        .I5(\s_axi_rdata[27]_i_2_n_0 ),
        .O(\s_axi_rdata[27]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[27]_i_2 
       (.I0(\s_axi_rdata[30]_i_6_n_0 ),
        .I1(lp_count_all[11]),
        .I2(\s_axi_rdata[30]_i_7_n_0 ),
        .I3(img_info1_vc0[27]),
        .I4(img_info1_vc1[27]),
        .I5(\s_axi_rdata[30]_i_8_n_0 ),
        .O(\s_axi_rdata[27]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8880000F888)) 
    \s_axi_rdata[28]_i_1 
       (.I0(\s_axi_rdata[30]_i_2_n_0 ),
        .I1(img_info1_vc2[28]),
        .I2(\s_axi_rdata[30]_i_3_n_0 ),
        .I3(img_info1_vc3[28]),
        .I4(\s_axi_rdata[30]_i_4_n_0 ),
        .I5(\s_axi_rdata[28]_i_2_n_0 ),
        .O(\s_axi_rdata[28]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[28]_i_2 
       (.I0(\s_axi_rdata[30]_i_6_n_0 ),
        .I1(lp_count_all[12]),
        .I2(\s_axi_rdata[30]_i_7_n_0 ),
        .I3(img_info1_vc0[28]),
        .I4(img_info1_vc1[28]),
        .I5(\s_axi_rdata[30]_i_8_n_0 ),
        .O(\s_axi_rdata[28]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8880000F888)) 
    \s_axi_rdata[29]_i_1 
       (.I0(\s_axi_rdata[30]_i_2_n_0 ),
        .I1(img_info1_vc2[29]),
        .I2(\s_axi_rdata[30]_i_3_n_0 ),
        .I3(img_info1_vc3[29]),
        .I4(\s_axi_rdata[30]_i_4_n_0 ),
        .I5(\s_axi_rdata[29]_i_2_n_0 ),
        .O(\s_axi_rdata[29]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[29]_i_2 
       (.I0(\s_axi_rdata[30]_i_6_n_0 ),
        .I1(lp_count_all[13]),
        .I2(\s_axi_rdata[30]_i_7_n_0 ),
        .I3(img_info1_vc0[29]),
        .I4(img_info1_vc1[29]),
        .I5(\s_axi_rdata[30]_i_8_n_0 ),
        .O(\s_axi_rdata[29]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h5454444455444444)) 
    \s_axi_rdata[2]_i_3 
       (.I0(sel0[2]),
        .I1(\s_axi_rdata[2]_i_5_n_0 ),
        .I2(\s_axi_rdata[2]_i_6_n_0 ),
        .I3(\s_axi_rdata[2]_i_7_n_0 ),
        .I4(sel0[3]),
        .I5(sel0[1]),
        .O(\s_axi_rdata[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000B00080)) 
    \s_axi_rdata[2]_i_5 
       (.I0(\LX_INFO_GEN[1].lx_info_reg[1]_2 [2]),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(sel0[1]),
        .I4(\LX_INFO_GEN[0].lx_info_reg[0]_1 [2]),
        .I5(sel0[3]),
        .O(\s_axi_rdata[2]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hF000CCAA)) 
    \s_axi_rdata[2]_i_6 
       (.I0(\ier_reg_n_0_[2] ),
        .I1(img_info1_vc1[2]),
        .I2(\img_info2_vc1_reg_n_0_[2] ),
        .I3(sel0[4]),
        .I4(sel0[0]),
        .O(\s_axi_rdata[2]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT5 #(
    .INIT(32'hF0CCAA00)) 
    \s_axi_rdata[2]_i_7 
       (.I0(img_info1_vc0[2]),
        .I1(\isr_i_reg[22] [2]),
        .I2(\img_info2_vc0_reg_n_0_[2] ),
        .I3(sel0[4]),
        .I4(sel0[0]),
        .O(\s_axi_rdata[2]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8880000F888)) 
    \s_axi_rdata[30]_i_1 
       (.I0(\s_axi_rdata[30]_i_2_n_0 ),
        .I1(img_info1_vc2[30]),
        .I2(\s_axi_rdata[30]_i_3_n_0 ),
        .I3(img_info1_vc3[30]),
        .I4(\s_axi_rdata[30]_i_4_n_0 ),
        .I5(\s_axi_rdata[30]_i_5_n_0 ),
        .O(\s_axi_rdata[30]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT5 #(
    .INIT(32'h00404040)) 
    \s_axi_rdata[30]_i_2 
       (.I0(sel0[0]),
        .I1(sel0[4]),
        .I2(sel0[2]),
        .I3(sel0[3]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[30]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT5 #(
    .INIT(32'h44040404)) 
    \s_axi_rdata[30]_i_3 
       (.I0(sel0[0]),
        .I1(sel0[4]),
        .I2(sel0[2]),
        .I3(sel0[3]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[30]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \s_axi_rdata[30]_i_4 
       (.I0(sel0[2]),
        .I1(sel0[3]),
        .O(\s_axi_rdata[30]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \s_axi_rdata[30]_i_5 
       (.I0(\s_axi_rdata[30]_i_6_n_0 ),
        .I1(lp_count_all[14]),
        .I2(\s_axi_rdata[30]_i_7_n_0 ),
        .I3(img_info1_vc0[30]),
        .I4(img_info1_vc1[30]),
        .I5(\s_axi_rdata[30]_i_8_n_0 ),
        .O(\s_axi_rdata[30]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT5 #(
    .INIT(32'h00000100)) 
    \s_axi_rdata[30]_i_6 
       (.I0(sel0[0]),
        .I1(sel0[4]),
        .I2(sel0[1]),
        .I3(sel0[2]),
        .I4(soft_rst),
        .O(\s_axi_rdata[30]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT5 #(
    .INIT(32'h00000020)) 
    \s_axi_rdata[30]_i_7 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(sel0[2]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[30]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    \s_axi_rdata[30]_i_8 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(sel0[1]),
        .O(\s_axi_rdata[30]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \s_axi_rdata[31]_i_1 
       (.I0(rd_req),
        .I1(s_axi_aresetn),
        .O(\s_axi_rdata[31]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[31]_i_11 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_4 [12]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [12]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_5 [12]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_6 [13]),
        .I4(\s_axi_rdata[31]_i_29_n_0 ),
        .O(\s_axi_rdata[31]_i_11_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[31]_i_12 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_4 [11]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [11]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_5 [11]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_6 [12]),
        .I4(\s_axi_rdata[31]_i_30_n_0 ),
        .O(\s_axi_rdata[31]_i_12_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[31]_i_13 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_4 [10]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [10]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_5 [10]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_6 [11]),
        .I4(\s_axi_rdata[31]_i_31_n_0 ),
        .O(\s_axi_rdata[31]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'hE187871E871E1E78)) 
    \s_axi_rdata[31]_i_14 
       (.I0(\LP_CNT_C2R[3].lp_count_reg[3]_6 [14]),
        .I1(\s_axi_rdata[31]_i_32_n_0 ),
        .I2(\s_axi_rdata[31]_i_33_n_0 ),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_5 [14]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_3 [14]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_4 [14]),
        .O(\s_axi_rdata[31]_i_14_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[31]_i_15 
       (.I0(\s_axi_rdata[31]_i_11_n_0 ),
        .I1(\s_axi_rdata[31]_i_34_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_6 [14]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_5 [13]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_3 [13]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_4 [13]),
        .O(\s_axi_rdata[31]_i_15_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[31]_i_16 
       (.I0(\s_axi_rdata[31]_i_12_n_0 ),
        .I1(\s_axi_rdata[31]_i_29_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_6 [13]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_5 [12]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_3 [12]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_4 [12]),
        .O(\s_axi_rdata[31]_i_16_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[31]_i_17 
       (.I0(\s_axi_rdata[31]_i_13_n_0 ),
        .I1(\s_axi_rdata[31]_i_30_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_6 [12]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_5 [11]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_3 [11]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_4 [11]),
        .O(\s_axi_rdata[31]_i_17_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \s_axi_rdata[31]_i_18 
       (.I0(sel0[0]),
        .I1(sel0[4]),
        .I2(sel0[1]),
        .O(\s_axi_rdata[31]_i_18_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \s_axi_rdata[31]_i_19 
       (.I0(sel0[0]),
        .I1(sel0[4]),
        .I2(sel0[1]),
        .O(\s_axi_rdata[31]_i_19_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \s_axi_rdata[31]_i_2 
       (.I0(s_axi_rvalid),
        .O(\s_axi_rdata[31]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \s_axi_rdata[31]_i_20 
       (.I0(sel0[4]),
        .I1(sel0[0]),
        .O(\s_axi_rdata[31]_i_20_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[31]_i_21 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_4 [9]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [9]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_5 [9]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_6 [10]),
        .I4(\s_axi_rdata[31]_i_35_n_0 ),
        .O(\s_axi_rdata[31]_i_21_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[31]_i_22 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_4 [8]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [8]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_5 [8]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_6 [9]),
        .I4(\s_axi_rdata[31]_i_36_n_0 ),
        .O(\s_axi_rdata[31]_i_22_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[31]_i_23 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_4 [7]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [7]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_5 [7]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_6 [8]),
        .I4(\s_axi_rdata[31]_i_37_n_0 ),
        .O(\s_axi_rdata[31]_i_23_n_0 ));
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    \s_axi_rdata[31]_i_24 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_4 [6]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [6]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_5 [6]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_6 [7]),
        .I4(\s_axi_rdata[22]_i_18_n_0 ),
        .O(\s_axi_rdata[31]_i_24_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[31]_i_25 
       (.I0(\s_axi_rdata[31]_i_21_n_0 ),
        .I1(\s_axi_rdata[31]_i_31_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_6 [11]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_5 [10]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_3 [10]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_4 [10]),
        .O(\s_axi_rdata[31]_i_25_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[31]_i_26 
       (.I0(\s_axi_rdata[31]_i_22_n_0 ),
        .I1(\s_axi_rdata[31]_i_35_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_6 [10]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_5 [9]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_3 [9]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_4 [9]),
        .O(\s_axi_rdata[31]_i_26_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[31]_i_27 
       (.I0(\s_axi_rdata[31]_i_23_n_0 ),
        .I1(\s_axi_rdata[31]_i_36_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_6 [9]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_5 [8]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_3 [8]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_4 [8]),
        .O(\s_axi_rdata[31]_i_27_n_0 ));
  LUT6 #(
    .INIT(64'h6969699669969696)) 
    \s_axi_rdata[31]_i_28 
       (.I0(\s_axi_rdata[31]_i_24_n_0 ),
        .I1(\s_axi_rdata[31]_i_37_n_0 ),
        .I2(\LP_CNT_C2R[3].lp_count_reg[3]_6 [8]),
        .I3(\LP_CNT_C2R[0].lp_count_reg[0]_5 [7]),
        .I4(\LP_CNT_C2R[2].lp_count_reg[2]_3 [7]),
        .I5(\LP_CNT_C2R[1].lp_count_reg[1]_4 [7]),
        .O(\s_axi_rdata[31]_i_28_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[31]_i_29 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_5 [13]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [13]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_4 [13]),
        .O(\s_axi_rdata[31]_i_29_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFF8F8F888)) 
    \s_axi_rdata[31]_i_3 
       (.I0(\s_axi_rdata[31]_i_4_n_0 ),
        .I1(lp_count_all[15]),
        .I2(\s_axi_rdata[31]_i_6_n_0 ),
        .I3(\s_axi_rdata[31]_i_7_n_0 ),
        .I4(\s_axi_rdata[31]_i_8_n_0 ),
        .I5(\s_axi_rdata[31]_i_9_n_0 ),
        .O(\s_axi_rdata[31]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[31]_i_30 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_5 [12]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [12]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_4 [12]),
        .O(\s_axi_rdata[31]_i_30_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[31]_i_31 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_5 [11]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [11]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_4 [11]),
        .O(\s_axi_rdata[31]_i_31_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    \s_axi_rdata[31]_i_32 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_5 [13]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [13]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_4 [13]),
        .O(\s_axi_rdata[31]_i_32_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \s_axi_rdata[31]_i_33 
       (.I0(\LP_CNT_C2R[1].lp_count_reg[1]_4 [15]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [15]),
        .I2(\LP_CNT_C2R[0].lp_count_reg[0]_5 [15]),
        .I3(\LP_CNT_C2R[3].lp_count_reg[3]_6 [15]),
        .O(\s_axi_rdata[31]_i_33_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[31]_i_34 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_5 [14]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [14]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_4 [14]),
        .O(\s_axi_rdata[31]_i_34_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[31]_i_35 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_5 [10]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [10]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_4 [10]),
        .O(\s_axi_rdata[31]_i_35_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[31]_i_36 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_5 [9]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [9]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_4 [9]),
        .O(\s_axi_rdata[31]_i_36_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \s_axi_rdata[31]_i_37 
       (.I0(\LP_CNT_C2R[0].lp_count_reg[0]_5 [8]),
        .I1(\LP_CNT_C2R[2].lp_count_reg[2]_3 [8]),
        .I2(\LP_CNT_C2R[1].lp_count_reg[1]_4 [8]),
        .O(\s_axi_rdata[31]_i_37_n_0 ));
  LUT6 #(
    .INIT(64'h0000000100000000)) 
    \s_axi_rdata[31]_i_4 
       (.I0(soft_rst),
        .I1(sel0[1]),
        .I2(sel0[4]),
        .I3(sel0[0]),
        .I4(sel0[3]),
        .I5(sel0[2]),
        .O(\s_axi_rdata[31]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \s_axi_rdata[31]_i_6 
       (.I0(sel0[2]),
        .I1(sel0[3]),
        .O(\s_axi_rdata[31]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0E000E000E00)) 
    \s_axi_rdata[31]_i_7 
       (.I0(p_0_in),
        .I1(\isr_i_reg[31] [13]),
        .I2(soft_rst),
        .I3(\s_axi_rdata[31]_i_18_n_0 ),
        .I4(\ier_reg_n_0_[31] ),
        .I5(\s_axi_rdata[31]_i_19_n_0 ),
        .O(\s_axi_rdata[31]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[31]_i_8 
       (.I0(img_info1_vc1[31]),
        .I1(img_info1_vc0[31]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[31]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hAC00000000000000)) 
    \s_axi_rdata[31]_i_9 
       (.I0(img_info1_vc3[31]),
        .I1(img_info1_vc2[31]),
        .I2(sel0[1]),
        .I3(\s_axi_rdata[31]_i_20_n_0 ),
        .I4(sel0[3]),
        .I5(sel0[2]),
        .O(\s_axi_rdata[31]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hEEFFFAAAAAAAAAAA)) 
    \s_axi_rdata[3]_i_3 
       (.I0(\s_axi_rdata[3]_i_7_n_0 ),
        .I1(\LX_INFO_GEN[1].lx_info_reg[1]_2 [3]),
        .I2(\LX_INFO_GEN[0].lx_info_reg[0]_1 [3]),
        .I3(sel0[4]),
        .I4(sel0[0]),
        .I5(\s_axi_rdata[3]_i_8_n_0 ),
        .O(\s_axi_rdata[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hA2228202A0208000)) 
    \s_axi_rdata[3]_i_4 
       (.I0(\s_axi_rdata[5]_i_8_n_0 ),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(\img_info2_vc1_reg_n_0_[3] ),
        .I4(img_info1_vc1[3]),
        .I5(\ier_reg_n_0_[3] ),
        .O(\s_axi_rdata[3]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT5 #(
    .INIT(32'h88080808)) 
    \s_axi_rdata[3]_i_5 
       (.I0(sel0[0]),
        .I1(sel0[4]),
        .I2(sel0[2]),
        .I3(sel0[3]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[3]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hA828A02088088000)) 
    \s_axi_rdata[3]_i_7 
       (.I0(\s_axi_rdata[0]_i_3_n_0 ),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(\img_info2_vc0_reg_n_0_[3] ),
        .I4(\isr_i_reg[22] [3]),
        .I5(img_info1_vc0[3]),
        .O(\s_axi_rdata[3]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \s_axi_rdata[3]_i_8 
       (.I0(sel0[3]),
        .I1(sel0[1]),
        .O(\s_axi_rdata[3]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hA828A02088088000)) 
    \s_axi_rdata[4]_i_2 
       (.I0(\s_axi_rdata[0]_i_3_n_0 ),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(\img_info2_vc0_reg_n_0_[4] ),
        .I4(\isr_i_reg[22] [4]),
        .I5(img_info1_vc0[4]),
        .O(\s_axi_rdata[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hA2228202A0208000)) 
    \s_axi_rdata[4]_i_3 
       (.I0(\s_axi_rdata[5]_i_8_n_0 ),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(\img_info2_vc1_reg_n_0_[4] ),
        .I4(img_info1_vc1[4]),
        .I5(\ier_reg_n_0_[4] ),
        .O(\s_axi_rdata[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000B00080)) 
    \s_axi_rdata[4]_i_4 
       (.I0(\LX_INFO_GEN[1].lx_info_reg[1]_2 [4]),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(sel0[1]),
        .I4(\LX_INFO_GEN[0].lx_info_reg[0]_1 [4]),
        .I5(sel0[3]),
        .O(\s_axi_rdata[4]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hA828A02088088000)) 
    \s_axi_rdata[5]_i_2 
       (.I0(\s_axi_rdata[0]_i_3_n_0 ),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(\img_info2_vc0_reg_n_0_[5] ),
        .I4(\isr_i_reg[22] [5]),
        .I5(img_info1_vc0[5]),
        .O(\s_axi_rdata[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hA2228202A0208000)) 
    \s_axi_rdata[5]_i_3 
       (.I0(\s_axi_rdata[5]_i_8_n_0 ),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(\img_info2_vc1_reg_n_0_[5] ),
        .I4(img_info1_vc1[5]),
        .I5(\ier_reg_n_0_[5] ),
        .O(\s_axi_rdata[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000B00080)) 
    \s_axi_rdata[5]_i_4 
       (.I0(\LX_INFO_GEN[1].lx_info_reg[1]_2 [5]),
        .I1(sel0[0]),
        .I2(sel0[4]),
        .I3(sel0[1]),
        .I4(\LX_INFO_GEN[0].lx_info_reg[0]_1 [5]),
        .I5(sel0[3]),
        .O(\s_axi_rdata[5]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT3 #(
    .INIT(8'h8F)) 
    \s_axi_rdata[5]_i_5 
       (.I0(sel0[1]),
        .I1(sel0[3]),
        .I2(sel0[2]),
        .O(\s_axi_rdata[5]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \s_axi_rdata[5]_i_8 
       (.I0(sel0[3]),
        .I1(sel0[1]),
        .O(\s_axi_rdata[5]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[6]_i_2 
       (.I0(img_info1_vc1[6]),
        .I1(img_info1_vc0[6]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0E000E000E00)) 
    \s_axi_rdata[6]_i_3 
       (.I0(p_0_in14_in),
        .I1(\isr_i_reg[31] [2]),
        .I2(soft_rst),
        .I3(\s_axi_rdata[31]_i_18_n_0 ),
        .I4(\ier_reg_n_0_[6] ),
        .I5(\s_axi_rdata[31]_i_19_n_0 ),
        .O(\s_axi_rdata[6]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[7]_i_2 
       (.I0(img_info1_vc1[7]),
        .I1(img_info1_vc0[7]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0E000E000E00)) 
    \s_axi_rdata[7]_i_3 
       (.I0(p_0_in13_in),
        .I1(\isr_i_reg[31] [3]),
        .I2(soft_rst),
        .I3(\s_axi_rdata[31]_i_18_n_0 ),
        .I4(\ier_reg_n_0_[7] ),
        .I5(\s_axi_rdata[31]_i_19_n_0 ),
        .O(\s_axi_rdata[7]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[8]_i_2 
       (.I0(img_info1_vc1[8]),
        .I1(img_info1_vc0[8]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0E000E000E00)) 
    \s_axi_rdata[8]_i_3 
       (.I0(p_0_in12_in),
        .I1(\isr_i_reg[31] [4]),
        .I2(soft_rst),
        .I3(\s_axi_rdata[31]_i_18_n_0 ),
        .I4(\ier_reg_n_0_[8] ),
        .I5(\s_axi_rdata[31]_i_19_n_0 ),
        .O(\s_axi_rdata[8]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT5 #(
    .INIT(32'h0A000C00)) 
    \s_axi_rdata[9]_i_2 
       (.I0(img_info1_vc1[9]),
        .I1(img_info1_vc0[9]),
        .I2(sel0[0]),
        .I3(sel0[4]),
        .I4(sel0[1]),
        .O(\s_axi_rdata[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0E000E000E00)) 
    \s_axi_rdata[9]_i_3 
       (.I0(p_0_in11_in),
        .I1(\isr_i_reg[31] [5]),
        .I2(soft_rst),
        .I3(\s_axi_rdata[31]_i_18_n_0 ),
        .I4(\ier_reg_n_0_[9] ),
        .I5(\s_axi_rdata[31]_i_19_n_0 ),
        .O(\s_axi_rdata[9]_i_3_n_0 ));
  FDRE \s_axi_rdata_reg[0] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_25),
        .Q(s_axi_rdata[0]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[10] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_15),
        .Q(s_axi_rdata[10]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[11] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_14),
        .Q(s_axi_rdata[11]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[12] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_13),
        .Q(s_axi_rdata[12]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[13] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_12),
        .Q(s_axi_rdata[13]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[14] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_11),
        .Q(s_axi_rdata[14]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[15] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_10),
        .Q(s_axi_rdata[15]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[16] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_9),
        .Q(s_axi_rdata[16]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[17] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_8),
        .Q(s_axi_rdata[17]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[18] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_7),
        .Q(s_axi_rdata[18]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[19] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_6),
        .Q(s_axi_rdata[19]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  CARRY4 \s_axi_rdata_reg[19]_i_3 
       (.CI(1'b0),
        .CO({\s_axi_rdata_reg[19]_i_3_n_0 ,\s_axi_rdata_reg[19]_i_3_n_1 ,\s_axi_rdata_reg[19]_i_3_n_2 ,\s_axi_rdata_reg[19]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({\s_axi_rdata[19]_i_5_n_0 ,\s_axi_rdata[19]_i_6_n_0 ,\s_axi_rdata[19]_i_7_n_0 ,\LP_CNT_C2R[3].lp_count_reg[3]_6 [0]}),
        .O(lp_count_all[3:0]),
        .S({\s_axi_rdata[19]_i_8_n_0 ,\s_axi_rdata[19]_i_9_n_0 ,\s_axi_rdata[19]_i_10_n_0 ,\s_axi_rdata[19]_i_11_n_0 }));
  FDRE \s_axi_rdata_reg[1] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_24),
        .Q(s_axi_rdata[1]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[20] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_5),
        .Q(s_axi_rdata[20]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[21] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_4),
        .Q(s_axi_rdata[21]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[22] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_3),
        .Q(s_axi_rdata[22]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  CARRY4 \s_axi_rdata_reg[22]_i_3 
       (.CI(\s_axi_rdata_reg[19]_i_3_n_0 ),
        .CO({\s_axi_rdata_reg[22]_i_3_n_0 ,\s_axi_rdata_reg[22]_i_3_n_1 ,\s_axi_rdata_reg[22]_i_3_n_2 ,\s_axi_rdata_reg[22]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({\s_axi_rdata[22]_i_5_n_0 ,\s_axi_rdata[22]_i_6_n_0 ,\s_axi_rdata[22]_i_7_n_0 ,\s_axi_rdata[22]_i_8_n_0 }),
        .O(lp_count_all[7:4]),
        .S({\s_axi_rdata[22]_i_9_n_0 ,\s_axi_rdata[22]_i_10_n_0 ,\s_axi_rdata[22]_i_11_n_0 ,\s_axi_rdata[22]_i_12_n_0 }));
  FDRE \s_axi_rdata_reg[23] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_2),
        .Q(s_axi_rdata[23]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[24] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(\s_axi_rdata[24]_i_1_n_0 ),
        .Q(s_axi_rdata[24]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[25] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(\s_axi_rdata[25]_i_1_n_0 ),
        .Q(s_axi_rdata[25]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[26] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(\s_axi_rdata[26]_i_1_n_0 ),
        .Q(s_axi_rdata[26]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[27] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(\s_axi_rdata[27]_i_1_n_0 ),
        .Q(s_axi_rdata[27]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[28] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(\s_axi_rdata[28]_i_1_n_0 ),
        .Q(s_axi_rdata[28]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[29] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(\s_axi_rdata[29]_i_1_n_0 ),
        .Q(s_axi_rdata[29]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[2] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_23),
        .Q(s_axi_rdata[2]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[30] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(\s_axi_rdata[30]_i_1_n_0 ),
        .Q(s_axi_rdata[30]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[31] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(\s_axi_rdata[31]_i_3_n_0 ),
        .Q(s_axi_rdata[31]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  CARRY4 \s_axi_rdata_reg[31]_i_10 
       (.CI(\s_axi_rdata_reg[22]_i_3_n_0 ),
        .CO({\s_axi_rdata_reg[31]_i_10_n_0 ,\s_axi_rdata_reg[31]_i_10_n_1 ,\s_axi_rdata_reg[31]_i_10_n_2 ,\s_axi_rdata_reg[31]_i_10_n_3 }),
        .CYINIT(1'b0),
        .DI({\s_axi_rdata[31]_i_21_n_0 ,\s_axi_rdata[31]_i_22_n_0 ,\s_axi_rdata[31]_i_23_n_0 ,\s_axi_rdata[31]_i_24_n_0 }),
        .O(lp_count_all[11:8]),
        .S({\s_axi_rdata[31]_i_25_n_0 ,\s_axi_rdata[31]_i_26_n_0 ,\s_axi_rdata[31]_i_27_n_0 ,\s_axi_rdata[31]_i_28_n_0 }));
  CARRY4 \s_axi_rdata_reg[31]_i_5 
       (.CI(\s_axi_rdata_reg[31]_i_10_n_0 ),
        .CO({\NLW_s_axi_rdata_reg[31]_i_5_CO_UNCONNECTED [3],\s_axi_rdata_reg[31]_i_5_n_1 ,\s_axi_rdata_reg[31]_i_5_n_2 ,\s_axi_rdata_reg[31]_i_5_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,\s_axi_rdata[31]_i_11_n_0 ,\s_axi_rdata[31]_i_12_n_0 ,\s_axi_rdata[31]_i_13_n_0 }),
        .O(lp_count_all[15:12]),
        .S({\s_axi_rdata[31]_i_14_n_0 ,\s_axi_rdata[31]_i_15_n_0 ,\s_axi_rdata[31]_i_16_n_0 ,\s_axi_rdata[31]_i_17_n_0 }));
  FDRE \s_axi_rdata_reg[3] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_22),
        .Q(s_axi_rdata[3]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[4] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_21),
        .Q(s_axi_rdata[4]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[5] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_20),
        .Q(s_axi_rdata[5]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[6] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_19),
        .Q(s_axi_rdata[6]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[7] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_18),
        .Q(s_axi_rdata[7]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[8] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_17),
        .Q(s_axi_rdata[8]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  FDRE \s_axi_rdata_reg[9] 
       (.C(s_axi_aclk),
        .CE(\s_axi_rdata[31]_i_2_n_0 ),
        .D(gen_spkt_fifo_n_16),
        .Q(s_axi_rdata[9]),
        .R(\s_axi_rdata[31]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0888)) 
    s_axi_rvalid_i_1
       (.I0(s_axi_aresetn),
        .I1(rd_req),
        .I2(s_axi_rvalid),
        .I3(s_axi_rready),
        .O(s_axi_rvalid_i_1_n_0));
  FDRE s_axi_rvalid_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(s_axi_rvalid_i_1_n_0),
        .Q(s_axi_rvalid),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT2 #(
    .INIT(4'h2)) 
    s_axi_wready_INST_0
       (.I0(wr_req),
        .I1(s_axi_bvalid),
        .O(s_axi_wready));
  FDRE soft_rst_d1_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(soft_rst),
        .Q(soft_rst_d1),
        .R(SS));
  LUT5 #(
    .INIT(32'hE000E0E0)) 
    spkt_fifo_dis_done_i_1
       (.I0(spkt_fifo_dis_done_reg_n_0),
        .I1(spkt_fifo_rst_ack),
        .I2(s_axi_aresetn),
        .I3(soft_rst),
        .I4(\core_config_reg_n_0_[0] ),
        .O(spkt_fifo_dis_done_i_1_n_0));
  FDRE spkt_fifo_dis_done_reg
       (.C(s_axi_aclk),
        .CE(1'b1),
        .D(spkt_fifo_dis_done_i_1_n_0),
        .Q(spkt_fifo_dis_done_reg_n_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    \wr_addr[2]_i_1 
       (.I0(s_axi_awvalid),
        .I1(s_axi_arvalid),
        .I2(rd_req),
        .I3(wr_req),
        .I4(reset_released),
        .I5(s_axi_awaddr[0]),
        .O(\wr_addr[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    \wr_addr[3]_i_1 
       (.I0(s_axi_awvalid),
        .I1(s_axi_arvalid),
        .I2(rd_req),
        .I3(wr_req),
        .I4(reset_released),
        .I5(s_axi_awaddr[1]),
        .O(\wr_addr[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    \wr_addr[4]_i_1 
       (.I0(s_axi_awvalid),
        .I1(s_axi_arvalid),
        .I2(rd_req),
        .I3(wr_req),
        .I4(reset_released),
        .I5(s_axi_awaddr[2]),
        .O(\wr_addr[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    \wr_addr[5]_i_1 
       (.I0(s_axi_awvalid),
        .I1(s_axi_arvalid),
        .I2(rd_req),
        .I3(wr_req),
        .I4(reset_released),
        .I5(s_axi_awaddr[3]),
        .O(\wr_addr[5]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hF8)) 
    \wr_addr[6]_i_1 
       (.I0(s_axi_bvalid),
        .I1(s_axi_bready),
        .I2(wr_req016_out),
        .O(\wr_addr[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    \wr_addr[6]_i_2 
       (.I0(s_axi_awvalid),
        .I1(s_axi_arvalid),
        .I2(rd_req),
        .I3(wr_req),
        .I4(reset_released),
        .I5(s_axi_awaddr[4]),
        .O(\wr_addr[6]_i_2_n_0 ));
  FDRE \wr_addr_reg[2] 
       (.C(s_axi_aclk),
        .CE(\wr_addr[6]_i_1_n_0 ),
        .D(\wr_addr[2]_i_1_n_0 ),
        .Q(p_0_in_0[0]),
        .R(SS));
  FDRE \wr_addr_reg[3] 
       (.C(s_axi_aclk),
        .CE(\wr_addr[6]_i_1_n_0 ),
        .D(\wr_addr[3]_i_1_n_0 ),
        .Q(p_0_in_0[1]),
        .R(SS));
  FDRE \wr_addr_reg[4] 
       (.C(s_axi_aclk),
        .CE(\wr_addr[6]_i_1_n_0 ),
        .D(\wr_addr[4]_i_1_n_0 ),
        .Q(p_0_in_0[2]),
        .R(SS));
  FDRE \wr_addr_reg[5] 
       (.C(s_axi_aclk),
        .CE(\wr_addr[6]_i_1_n_0 ),
        .D(\wr_addr[5]_i_1_n_0 ),
        .Q(p_0_in_0[3]),
        .R(SS));
  FDRE \wr_addr_reg[6] 
       (.C(s_axi_aclk),
        .CE(\wr_addr[6]_i_1_n_0 ),
        .D(\wr_addr[6]_i_2_n_0 ),
        .Q(p_0_in_0[4]),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT5 #(
    .INIT(32'h00020000)) 
    wr_req_i_1
       (.I0(reset_released),
        .I1(wr_req),
        .I2(rd_req),
        .I3(s_axi_arvalid),
        .I4(s_axi_awvalid),
        .O(wr_req016_out));
  FDRE wr_req_reg
       (.C(s_axi_aclk),
        .CE(\wr_addr[6]_i_1_n_0 ),
        .D(wr_req016_out),
        .Q(wr_req),
        .R(SS));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "22" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_array_single__parameterized0 xpm_array_single_01
       (.dest_clk(s_axi_aclk),
        .dest_out(NLW_xpm_array_single_01_dest_out_UNCONNECTED[21:0]),
        .src_clk(m_axis_aclk),
        .src_in({1'b0,1'b0,1'b0,1'b0,src_in}));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "2" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_array_single__parameterized1__1 xpm_array_single_02
       (.dest_clk(m_axis_aclk),
        .dest_out({xpm_array_single_02_n_0,xpm_array_single_02_n_1}),
        .src_clk(s_axi_aclk),
        .src_in({soft_rst,\core_config_reg_n_0_[0] }));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "2" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_array_single__parameterized1__2 xpm_array_single_03
       (.dest_clk(dl0_rxbyteclkhs),
        .dest_out(active_lanes_r2p),
        .src_clk(s_axi_aclk),
        .src_in({1'b0,1'b1}));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "2" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_array_single__parameterized1 xpm_array_single_04
       (.dest_clk(s_axi_aclk),
        .dest_out(p_10_in),
        .src_clk(dl0_rxbyteclkhs),
        .src_in({\active_lanes_reg_n_0_[1] ,\active_lanes_reg_n_0_[0] }));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__91 xpm_single_01
       (.dest_clk(s_axi_aclk),
        .dest_out(NLW_xpm_single_01_dest_out_UNCONNECTED),
        .src_clk(m_axis_aclk),
        .src_in(full));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__parameterized1__1 xpm_single_02
       (.dest_clk(m_axis_aclk),
        .dest_out(dest_out),
        .src_clk(s_axi_aclk),
        .src_in(core_men));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT2 #(
    .INIT(4'h2)) 
    xpm_single_02_i_1
       (.I0(\core_config_reg_n_0_[0] ),
        .I1(soft_rst),
        .O(core_men));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__parameterized1 xpm_single_05
       (.dest_clk(s_axi_aclk),
        .dest_out(NLW_xpm_single_05_dest_out_UNCONNECTED),
        .src_clk(m_axis_aclk),
        .src_in(src_ff_reg));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__99 xpm_single_07
       (.dest_clk(s_axi_aclk),
        .dest_out(spkt_fifo_rst_ack),
        .src_clk(m_axis_aclk),
        .src_in(spkt_fifo_rst_r2c));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT1 #(
    .INIT(2'h1)) 
    xpm_single_07_i_1
       (.I0(dest_out),
        .O(spkt_fifo_rst_r2c));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__98 xpm_single_08
       (.dest_clk(s_axi_aclk),
        .dest_out(data_shutdown_c2r),
        .src_clk(m_axis_aclk),
        .src_in(data_shutdown));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__92 xpm_single_17
       (.dest_clk(dl0_rxbyteclkhs),
        .dest_out(l0_ppiclk_ss1),
        .src_clk(1'b0),
        .src_in(dl0_stopstate));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__93 xpm_single_18
       (.dest_clk(dl0_rxbyteclkhs),
        .dest_out(l1_ppiclk_ss1),
        .src_clk(1'b0),
        .src_in(dl1_stopstate));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__94 xpm_single_19
       (.dest_clk(dl0_rxbyteclkhs),
        .dest_out(l2_ppiclk_ss1),
        .src_clk(1'b0),
        .src_in(dl2_stopstate));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__95 xpm_single_20
       (.dest_clk(dl0_rxbyteclkhs),
        .dest_out(l3_ppiclk_ss1),
        .src_clk(1'b0),
        .src_in(dl3_stopstate));
endmodule

(* ORIG_REF_NAME = "mipi_csi2_rx_ctrl_v1_0_8_stream" *) 
module bd_0ac3_rx_0_mipi_csi2_rx_ctrl_v1_0_8_stream
   (srst,
    rd_en,
    m_axis_tvalid,
    m_axis_tuser,
    m_axis_tlast,
    CO,
    m_axis_tkeep,
    m_axis_tdata,
    m_axis_tdest,
    m_axis_aclk,
    m_axis_aresetn,
    S,
    m_axis_tready,
    empty,
    D);
  output srst;
  output rd_en;
  output m_axis_tvalid;
  output [79:0]m_axis_tuser;
  output m_axis_tlast;
  output [0:0]CO;
  output [7:0]m_axis_tkeep;
  output [63:0]m_axis_tdata;
  output [1:0]m_axis_tdest;
  input m_axis_aclk;
  input m_axis_aresetn;
  input [0:0]S;
  input m_axis_tready;
  input empty;
  input [67:0]D;

  wire [0:0]CO;
  wire [67:0]D;
  wire \LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ;
  wire [15:0]\LINE_NUM_VC[0].line_num_reg[0]_3 ;
  wire \LINE_NUM_VC[0].rst_lnum_reg_n_0_[0] ;
  wire \LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ;
  wire [15:0]\LINE_NUM_VC[1].line_num_reg[1]_2 ;
  wire \LINE_NUM_VC[1].rst_lnum[1]_i_1_n_0 ;
  wire \LINE_NUM_VC[1].rst_lnum_reg_n_0_[1] ;
  wire \LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ;
  wire [15:0]\LINE_NUM_VC[2].line_num_reg[2]_1 ;
  wire \LINE_NUM_VC[2].rst_lnum[2]_i_1_n_0 ;
  wire \LINE_NUM_VC[2].rst_lnum_reg_n_0_[2] ;
  wire \LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ;
  wire [15:0]\LINE_NUM_VC[3].line_num_reg[3]_0 ;
  wire \LINE_NUM_VC[3].rst_lnum[3]_i_2_n_0 ;
  wire \LINE_NUM_VC[3].rst_lnum[3]_i_3_n_0 ;
  wire \LINE_NUM_VC[3].rst_lnum_reg_n_0_[3] ;
  wire [0:0]S;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_3_n_0 ;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[0] ;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[1] ;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[2] ;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[3] ;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[4] ;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[5] ;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[6] ;
  wire \TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[7] ;
  wire \TUSER_WIDTH_GTE2.m_axis_tuser[1]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[16]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[17]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[18]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[19]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[20]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[21]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[22]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[23]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[24]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[25]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[26]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[27]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[28]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[29]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[30]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE32.m_axis_tuser[31]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[32]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[33]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[34]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[35]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[36]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[37]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[38]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[39]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[40]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[41]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[42]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[43]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[44]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[45]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[46]_i_1_n_0 ;
  wire \TUSER_WIDTH_GTE48.m_axis_tuser[47]_i_1_n_0 ;
  wire blk_rd0;
  wire bytes_sent;
  wire \bytes_sent[3]_i_1_n_0 ;
  wire \bytes_sent[3]_i_3_n_0 ;
  wire [15:3]bytes_sent_reg;
  wire \bytes_sent_reg[11]_i_1_n_0 ;
  wire \bytes_sent_reg[11]_i_1_n_1 ;
  wire \bytes_sent_reg[11]_i_1_n_2 ;
  wire \bytes_sent_reg[11]_i_1_n_3 ;
  wire \bytes_sent_reg[11]_i_1_n_4 ;
  wire \bytes_sent_reg[11]_i_1_n_5 ;
  wire \bytes_sent_reg[11]_i_1_n_6 ;
  wire \bytes_sent_reg[11]_i_1_n_7 ;
  wire \bytes_sent_reg[15]_i_1_n_7 ;
  wire \bytes_sent_reg[3]_i_2_n_0 ;
  wire \bytes_sent_reg[3]_i_2_n_1 ;
  wire \bytes_sent_reg[3]_i_2_n_2 ;
  wire \bytes_sent_reg[3]_i_2_n_3 ;
  wire \bytes_sent_reg[3]_i_2_n_4 ;
  wire \bytes_sent_reg[3]_i_2_n_5 ;
  wire \bytes_sent_reg[3]_i_2_n_6 ;
  wire \bytes_sent_reg[3]_i_2_n_7 ;
  wire \bytes_sent_reg[7]_i_1_n_0 ;
  wire \bytes_sent_reg[7]_i_1_n_1 ;
  wire \bytes_sent_reg[7]_i_1_n_2 ;
  wire \bytes_sent_reg[7]_i_1_n_3 ;
  wire \bytes_sent_reg[7]_i_1_n_4 ;
  wire \bytes_sent_reg[7]_i_1_n_5 ;
  wire \bytes_sent_reg[7]_i_1_n_6 ;
  wire \bytes_sent_reg[7]_i_1_n_7 ;
  wire [5:0]cur_lp_dtype;
  wire [1:0]cur_lp_vc;
  wire cur_lp_vc0;
  wire cur_lp_wc_lte4;
  wire cur_lp_wc_lte4_i_3_n_0;
  wire cur_lp_wc_lte4_i_4_n_0;
  wire cur_lp_wc_lte4_i_5_n_0;
  wire \cur_lp_wc_reg_n_0_[0] ;
  wire \cur_lp_wc_reg_n_0_[10] ;
  wire \cur_lp_wc_reg_n_0_[11] ;
  wire \cur_lp_wc_reg_n_0_[12] ;
  wire \cur_lp_wc_reg_n_0_[13] ;
  wire \cur_lp_wc_reg_n_0_[14] ;
  wire \cur_lp_wc_reg_n_0_[15] ;
  wire \cur_lp_wc_reg_n_0_[1] ;
  wire \cur_lp_wc_reg_n_0_[2] ;
  wire \cur_lp_wc_reg_n_0_[3] ;
  wire \cur_lp_wc_reg_n_0_[4] ;
  wire \cur_lp_wc_reg_n_0_[5] ;
  wire \cur_lp_wc_reg_n_0_[6] ;
  wire \cur_lp_wc_reg_n_0_[7] ;
  wire \cur_lp_wc_reg_n_0_[8] ;
  wire \cur_lp_wc_reg_n_0_[9] ;
  wire empty;
  wire frame_num_vc0;
  wire \frame_num_vc0[15]_i_1_n_0 ;
  wire \frame_num_vc0_reg_n_0_[0] ;
  wire \frame_num_vc0_reg_n_0_[10] ;
  wire \frame_num_vc0_reg_n_0_[11] ;
  wire \frame_num_vc0_reg_n_0_[12] ;
  wire \frame_num_vc0_reg_n_0_[13] ;
  wire \frame_num_vc0_reg_n_0_[14] ;
  wire \frame_num_vc0_reg_n_0_[15] ;
  wire \frame_num_vc0_reg_n_0_[1] ;
  wire \frame_num_vc0_reg_n_0_[2] ;
  wire \frame_num_vc0_reg_n_0_[3] ;
  wire \frame_num_vc0_reg_n_0_[4] ;
  wire \frame_num_vc0_reg_n_0_[5] ;
  wire \frame_num_vc0_reg_n_0_[6] ;
  wire \frame_num_vc0_reg_n_0_[7] ;
  wire \frame_num_vc0_reg_n_0_[8] ;
  wire \frame_num_vc0_reg_n_0_[9] ;
  wire frame_num_vc1;
  wire \frame_num_vc1[15]_i_1_n_0 ;
  wire \frame_num_vc1_reg_n_0_[0] ;
  wire \frame_num_vc1_reg_n_0_[10] ;
  wire \frame_num_vc1_reg_n_0_[11] ;
  wire \frame_num_vc1_reg_n_0_[12] ;
  wire \frame_num_vc1_reg_n_0_[13] ;
  wire \frame_num_vc1_reg_n_0_[14] ;
  wire \frame_num_vc1_reg_n_0_[15] ;
  wire \frame_num_vc1_reg_n_0_[1] ;
  wire \frame_num_vc1_reg_n_0_[2] ;
  wire \frame_num_vc1_reg_n_0_[3] ;
  wire \frame_num_vc1_reg_n_0_[4] ;
  wire \frame_num_vc1_reg_n_0_[5] ;
  wire \frame_num_vc1_reg_n_0_[6] ;
  wire \frame_num_vc1_reg_n_0_[7] ;
  wire \frame_num_vc1_reg_n_0_[8] ;
  wire \frame_num_vc1_reg_n_0_[9] ;
  wire frame_num_vc2;
  wire \frame_num_vc2[15]_i_1_n_0 ;
  wire \frame_num_vc2_reg_n_0_[0] ;
  wire \frame_num_vc2_reg_n_0_[10] ;
  wire \frame_num_vc2_reg_n_0_[11] ;
  wire \frame_num_vc2_reg_n_0_[12] ;
  wire \frame_num_vc2_reg_n_0_[13] ;
  wire \frame_num_vc2_reg_n_0_[14] ;
  wire \frame_num_vc2_reg_n_0_[15] ;
  wire \frame_num_vc2_reg_n_0_[1] ;
  wire \frame_num_vc2_reg_n_0_[2] ;
  wire \frame_num_vc2_reg_n_0_[3] ;
  wire \frame_num_vc2_reg_n_0_[4] ;
  wire \frame_num_vc2_reg_n_0_[5] ;
  wire \frame_num_vc2_reg_n_0_[6] ;
  wire \frame_num_vc2_reg_n_0_[7] ;
  wire \frame_num_vc2_reg_n_0_[8] ;
  wire \frame_num_vc2_reg_n_0_[9] ;
  wire frame_num_vc3;
  wire \frame_num_vc3[15]_i_1_n_0 ;
  wire \frame_num_vc3[15]_i_3_n_0 ;
  wire \frame_num_vc3[15]_i_4_n_0 ;
  wire \frame_num_vc3_reg_n_0_[0] ;
  wire \frame_num_vc3_reg_n_0_[10] ;
  wire \frame_num_vc3_reg_n_0_[11] ;
  wire \frame_num_vc3_reg_n_0_[12] ;
  wire \frame_num_vc3_reg_n_0_[13] ;
  wire \frame_num_vc3_reg_n_0_[14] ;
  wire \frame_num_vc3_reg_n_0_[15] ;
  wire \frame_num_vc3_reg_n_0_[1] ;
  wire \frame_num_vc3_reg_n_0_[2] ;
  wire \frame_num_vc3_reg_n_0_[3] ;
  wire \frame_num_vc3_reg_n_0_[4] ;
  wire \frame_num_vc3_reg_n_0_[5] ;
  wire \frame_num_vc3_reg_n_0_[6] ;
  wire \frame_num_vc3_reg_n_0_[7] ;
  wire \frame_num_vc3_reg_n_0_[8] ;
  wire \frame_num_vc3_reg_n_0_[9] ;
  wire fsync_eni_int_reg;
  wire fsync_vc0_int_reg;
  wire fsync_vc0_int_reg_i_1_n_0;
  wire fsync_vc0_rst_reg;
  wire fsync_vc0_rst_reg0;
  wire fsync_vc0_rst_reg1;
  wire fsync_vc1_int_reg;
  wire fsync_vc1_int_reg_i_1_n_0;
  wire fsync_vc1_rst_reg;
  wire fsync_vc1_rst_reg0;
  wire fsync_vc2_int_reg;
  wire fsync_vc2_int_reg_i_1_n_0;
  wire fsync_vc2_rst_reg;
  wire fsync_vc2_rst_reg0;
  wire fsync_vc2_rst_reg_i_2_n_0;
  wire fsync_vc3_int_reg;
  wire fsync_vc3_int_reg_i_1_n_0;
  wire fsync_vc3_rst_reg;
  wire fsync_vc3_rst_reg0;
  wire fsync_vc3_rst_reg_i_2_n_0;
  wire hunt_ecccrc;
  wire hunt_ecccrc_i_1_n_0;
  wire last_beat1;
  wire [15:3]last_beat2;
  wire m_axis_aclk;
  wire m_axis_aresetn;
  wire [63:0]m_axis_tdata;
  wire \m_axis_tdata[63]_i_2_n_0 ;
  wire [1:0]m_axis_tdest;
  wire [7:0]m_axis_tkeep;
  wire [7:0]m_axis_tkeep_i;
  wire m_axis_tlast;
  wire m_axis_tlast_i_10_n_0;
  wire m_axis_tlast_i_11_n_0;
  wire m_axis_tlast_i_12_n_0;
  wire m_axis_tlast_i_13_n_0;
  wire m_axis_tlast_i_14_n_0;
  wire m_axis_tlast_i_15_n_0;
  wire m_axis_tlast_i_16_n_0;
  wire m_axis_tlast_i_17_n_0;
  wire m_axis_tlast_i_19_n_0;
  wire m_axis_tlast_i_1_n_0;
  wire m_axis_tlast_i_20_n_0;
  wire m_axis_tlast_i_21_n_0;
  wire m_axis_tlast_i_22_n_0;
  wire m_axis_tlast_i_23_n_0;
  wire m_axis_tlast_i_24_n_0;
  wire m_axis_tlast_i_25_n_0;
  wire m_axis_tlast_i_28_n_0;
  wire m_axis_tlast_i_4_n_0;
  wire m_axis_tlast_reg_i_18_n_0;
  wire m_axis_tlast_reg_i_18_n_1;
  wire m_axis_tlast_reg_i_18_n_2;
  wire m_axis_tlast_reg_i_18_n_3;
  wire m_axis_tlast_reg_i_26_n_0;
  wire m_axis_tlast_reg_i_26_n_1;
  wire m_axis_tlast_reg_i_26_n_2;
  wire m_axis_tlast_reg_i_26_n_3;
  wire m_axis_tlast_reg_i_27_n_0;
  wire m_axis_tlast_reg_i_27_n_1;
  wire m_axis_tlast_reg_i_27_n_2;
  wire m_axis_tlast_reg_i_27_n_3;
  wire m_axis_tlast_reg_i_6_n_0;
  wire m_axis_tlast_reg_i_6_n_1;
  wire m_axis_tlast_reg_i_6_n_2;
  wire m_axis_tlast_reg_i_6_n_3;
  wire m_axis_tlast_reg_i_9_n_0;
  wire m_axis_tlast_reg_i_9_n_1;
  wire m_axis_tlast_reg_i_9_n_2;
  wire m_axis_tlast_reg_i_9_n_3;
  wire m_axis_tready;
  wire [79:0]m_axis_tuser;
  wire m_axis_tuser0;
  wire \m_axis_tuser[0]_i_1_n_0 ;
  wire \m_axis_tuser[0]_i_2_n_0 ;
  wire m_axis_tvalid;
  wire m_axis_tvalid_i_1_n_0;
  wire m_axis_tvalid_i_2_n_0;
  wire m_axis_tvalid_i_3_n_0;
  wire m_axis_tvalid_i_4_n_0;
  wire m_axis_tvalid_i_5_n_0;
  wire m_axis_tvalid_i_6_n_0;
  wire m_axis_tvalid_i_7_n_0;
  wire m_axis_tvalid_i_8_n_0;
  wire \mem_rdata_r_reg_n_0_[0] ;
  wire \mem_rdata_r_reg_n_0_[1] ;
  wire \mem_rdata_r_reg_n_0_[24] ;
  wire \mem_rdata_r_reg_n_0_[25] ;
  wire \mem_rdata_r_reg_n_0_[26] ;
  wire \mem_rdata_r_reg_n_0_[27] ;
  wire \mem_rdata_r_reg_n_0_[28] ;
  wire \mem_rdata_r_reg_n_0_[29] ;
  wire \mem_rdata_r_reg_n_0_[2] ;
  wire \mem_rdata_r_reg_n_0_[30] ;
  wire \mem_rdata_r_reg_n_0_[31] ;
  wire \mem_rdata_r_reg_n_0_[32] ;
  wire \mem_rdata_r_reg_n_0_[33] ;
  wire \mem_rdata_r_reg_n_0_[34] ;
  wire \mem_rdata_r_reg_n_0_[35] ;
  wire \mem_rdata_r_reg_n_0_[36] ;
  wire \mem_rdata_r_reg_n_0_[37] ;
  wire \mem_rdata_r_reg_n_0_[38] ;
  wire \mem_rdata_r_reg_n_0_[39] ;
  wire \mem_rdata_r_reg_n_0_[3] ;
  wire \mem_rdata_r_reg_n_0_[40] ;
  wire \mem_rdata_r_reg_n_0_[41] ;
  wire \mem_rdata_r_reg_n_0_[42] ;
  wire \mem_rdata_r_reg_n_0_[43] ;
  wire \mem_rdata_r_reg_n_0_[44] ;
  wire \mem_rdata_r_reg_n_0_[45] ;
  wire \mem_rdata_r_reg_n_0_[46] ;
  wire \mem_rdata_r_reg_n_0_[47] ;
  wire \mem_rdata_r_reg_n_0_[48] ;
  wire \mem_rdata_r_reg_n_0_[49] ;
  wire \mem_rdata_r_reg_n_0_[4] ;
  wire \mem_rdata_r_reg_n_0_[50] ;
  wire \mem_rdata_r_reg_n_0_[51] ;
  wire \mem_rdata_r_reg_n_0_[52] ;
  wire \mem_rdata_r_reg_n_0_[53] ;
  wire \mem_rdata_r_reg_n_0_[54] ;
  wire \mem_rdata_r_reg_n_0_[55] ;
  wire \mem_rdata_r_reg_n_0_[56] ;
  wire \mem_rdata_r_reg_n_0_[57] ;
  wire \mem_rdata_r_reg_n_0_[58] ;
  wire \mem_rdata_r_reg_n_0_[59] ;
  wire \mem_rdata_r_reg_n_0_[5] ;
  wire \mem_rdata_r_reg_n_0_[60] ;
  wire \mem_rdata_r_reg_n_0_[61] ;
  wire \mem_rdata_r_reg_n_0_[62] ;
  wire \mem_rdata_r_reg_n_0_[63] ;
  wire mem_rvld;
  wire [1:0]mem_vc;
  wire [15:0]mem_wc;
  wire [3:0]p_0_in;
  wire p_0_out;
  wire p_19_out;
  wire p_1_in;
  wire p_28_out;
  wire [69:69]p_2_out;
  wire p_37_out;
  wire p_3_out;
  wire p_45_in;
  wire p_46_out;
  wire p_67_in;
  wire p_6_in;
  wire pend_data;
  wire pend_data_i_1_n_0;
  wire rd_en;
  wire srst;
  wire strm_prgrs_reg;
  wire tlast_d1;
  wire tlast_d1_i_1_n_0;
  wire tvalid_d1;
  wire [3:0]\NLW_bytes_sent_reg[15]_i_1_CO_UNCONNECTED ;
  wire [3:1]\NLW_bytes_sent_reg[15]_i_1_O_UNCONNECTED ;
  wire [3:1]NLW_m_axis_tlast_reg_i_5_CO_UNCONNECTED;
  wire [3:0]NLW_m_axis_tlast_reg_i_5_O_UNCONNECTED;
  wire [3:0]NLW_m_axis_tlast_reg_i_6_O_UNCONNECTED;
  wire [3:0]NLW_m_axis_tlast_reg_i_7_CO_UNCONNECTED;
  wire [3:1]NLW_m_axis_tlast_reg_i_7_O_UNCONNECTED;
  wire [3:0]NLW_m_axis_tlast_reg_i_9_O_UNCONNECTED;

  LUT5 #(
    .INIT(32'hA8AAFFFF)) 
    \LINE_NUM_VC[0].line_num[0][15]_i_1 
       (.I0(\LINE_NUM_VC[0].rst_lnum_reg_n_0_[0] ),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .I3(p_45_in),
        .I4(m_axis_aresetn),
        .O(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h02)) 
    \LINE_NUM_VC[0].line_num[0][15]_i_2 
       (.I0(p_45_in),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .O(p_46_out));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][0] 
       (.C(m_axis_aclk),
        .CE(p_46_out),
        .D(mem_wc[0]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [0]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][10] 
       (.C(m_axis_aclk),
        .CE(p_46_out),
        .D(mem_wc[10]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [10]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][11] 
       (.C(m_axis_aclk),
        .CE(p_46_out),
        .D(mem_wc[11]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [11]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][12] 
       (.C(m_axis_aclk),
        .CE(p_46_out),
        .D(mem_wc[12]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [12]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][13] 
       (.C(m_axis_aclk),
        .CE(p_46_out),
        .D(mem_wc[13]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [13]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][14] 
       (.C(m_axis_aclk),
        .CE(p_46_out),
        .D(mem_wc[14]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [14]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][15] 
       (.C(m_axis_aclk),
        .CE(p_46_out),
        .D(mem_wc[15]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [15]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][1] 
       (.C(m_axis_aclk),
        .CE(p_46_out),
        .D(mem_wc[1]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [1]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][2] 
       (.C(m_axis_aclk),
        .CE(p_46_out),
        .D(mem_wc[2]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [2]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][3] 
       (.C(m_axis_aclk),
        .CE(p_46_out),
        .D(mem_wc[3]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [3]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][4] 
       (.C(m_axis_aclk),
        .CE(p_46_out),
        .D(mem_wc[4]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [4]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][5] 
       (.C(m_axis_aclk),
        .CE(p_46_out),
        .D(mem_wc[5]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [5]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][6] 
       (.C(m_axis_aclk),
        .CE(p_46_out),
        .D(mem_wc[6]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [6]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][7] 
       (.C(m_axis_aclk),
        .CE(p_46_out),
        .D(mem_wc[7]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [7]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][8] 
       (.C(m_axis_aclk),
        .CE(p_46_out),
        .D(mem_wc[8]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [8]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[0].line_num_reg[0][9] 
       (.C(m_axis_aclk),
        .CE(p_46_out),
        .D(mem_wc[9]),
        .Q(\LINE_NUM_VC[0].line_num_reg[0]_3 [9]),
        .R(\LINE_NUM_VC[0].line_num[0][15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAEFFFFAAAEAAAE)) 
    \LINE_NUM_VC[0].rst_lnum[0]_i_1 
       (.I0(\LINE_NUM_VC[3].rst_lnum[3]_i_2_n_0 ),
        .I1(\LINE_NUM_VC[3].rst_lnum[3]_i_3_n_0 ),
        .I2(mem_vc[0]),
        .I3(mem_vc[1]),
        .I4(cur_lp_vc[1]),
        .I5(fsync_vc2_rst_reg_i_2_n_0),
        .O(p_3_out));
  FDRE \LINE_NUM_VC[0].rst_lnum_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_3_out),
        .Q(\LINE_NUM_VC[0].rst_lnum_reg_n_0_[0] ),
        .R(srst));
  LUT5 #(
    .INIT(32'hA2AAFFFF)) 
    \LINE_NUM_VC[1].line_num[1][15]_i_1 
       (.I0(\LINE_NUM_VC[1].rst_lnum_reg_n_0_[1] ),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .I3(p_45_in),
        .I4(m_axis_aresetn),
        .O(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h20)) 
    \LINE_NUM_VC[1].line_num[1][15]_i_2 
       (.I0(p_45_in),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .O(p_37_out));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][0] 
       (.C(m_axis_aclk),
        .CE(p_37_out),
        .D(mem_wc[0]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [0]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][10] 
       (.C(m_axis_aclk),
        .CE(p_37_out),
        .D(mem_wc[10]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [10]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][11] 
       (.C(m_axis_aclk),
        .CE(p_37_out),
        .D(mem_wc[11]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [11]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][12] 
       (.C(m_axis_aclk),
        .CE(p_37_out),
        .D(mem_wc[12]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [12]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][13] 
       (.C(m_axis_aclk),
        .CE(p_37_out),
        .D(mem_wc[13]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [13]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][14] 
       (.C(m_axis_aclk),
        .CE(p_37_out),
        .D(mem_wc[14]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [14]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][15] 
       (.C(m_axis_aclk),
        .CE(p_37_out),
        .D(mem_wc[15]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [15]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][1] 
       (.C(m_axis_aclk),
        .CE(p_37_out),
        .D(mem_wc[1]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [1]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][2] 
       (.C(m_axis_aclk),
        .CE(p_37_out),
        .D(mem_wc[2]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [2]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][3] 
       (.C(m_axis_aclk),
        .CE(p_37_out),
        .D(mem_wc[3]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [3]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][4] 
       (.C(m_axis_aclk),
        .CE(p_37_out),
        .D(mem_wc[4]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [4]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][5] 
       (.C(m_axis_aclk),
        .CE(p_37_out),
        .D(mem_wc[5]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [5]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][6] 
       (.C(m_axis_aclk),
        .CE(p_37_out),
        .D(mem_wc[6]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [6]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][7] 
       (.C(m_axis_aclk),
        .CE(p_37_out),
        .D(mem_wc[7]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [7]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][8] 
       (.C(m_axis_aclk),
        .CE(p_37_out),
        .D(mem_wc[8]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [8]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].line_num_reg[1][9] 
       (.C(m_axis_aclk),
        .CE(p_37_out),
        .D(mem_wc[9]),
        .Q(\LINE_NUM_VC[1].line_num_reg[1]_2 [9]),
        .R(\LINE_NUM_VC[1].line_num[1][15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAEAFFFFAAEAAAEA)) 
    \LINE_NUM_VC[1].rst_lnum[1]_i_1 
       (.I0(\LINE_NUM_VC[3].rst_lnum[3]_i_2_n_0 ),
        .I1(\LINE_NUM_VC[3].rst_lnum[3]_i_3_n_0 ),
        .I2(mem_vc[0]),
        .I3(mem_vc[1]),
        .I4(cur_lp_vc[1]),
        .I5(fsync_vc3_rst_reg_i_2_n_0),
        .O(\LINE_NUM_VC[1].rst_lnum[1]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[1].rst_lnum_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_NUM_VC[1].rst_lnum[1]_i_1_n_0 ),
        .Q(\LINE_NUM_VC[1].rst_lnum_reg_n_0_[1] ),
        .R(srst));
  LUT5 #(
    .INIT(32'hA2AAFFFF)) 
    \LINE_NUM_VC[2].line_num[2][15]_i_1 
       (.I0(\LINE_NUM_VC[2].rst_lnum_reg_n_0_[2] ),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .I3(p_45_in),
        .I4(m_axis_aresetn),
        .O(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h20)) 
    \LINE_NUM_VC[2].line_num[2][15]_i_2 
       (.I0(p_45_in),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .O(p_28_out));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][0] 
       (.C(m_axis_aclk),
        .CE(p_28_out),
        .D(mem_wc[0]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [0]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][10] 
       (.C(m_axis_aclk),
        .CE(p_28_out),
        .D(mem_wc[10]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [10]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][11] 
       (.C(m_axis_aclk),
        .CE(p_28_out),
        .D(mem_wc[11]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [11]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][12] 
       (.C(m_axis_aclk),
        .CE(p_28_out),
        .D(mem_wc[12]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [12]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][13] 
       (.C(m_axis_aclk),
        .CE(p_28_out),
        .D(mem_wc[13]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [13]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][14] 
       (.C(m_axis_aclk),
        .CE(p_28_out),
        .D(mem_wc[14]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [14]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][15] 
       (.C(m_axis_aclk),
        .CE(p_28_out),
        .D(mem_wc[15]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [15]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][1] 
       (.C(m_axis_aclk),
        .CE(p_28_out),
        .D(mem_wc[1]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [1]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][2] 
       (.C(m_axis_aclk),
        .CE(p_28_out),
        .D(mem_wc[2]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [2]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][3] 
       (.C(m_axis_aclk),
        .CE(p_28_out),
        .D(mem_wc[3]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [3]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][4] 
       (.C(m_axis_aclk),
        .CE(p_28_out),
        .D(mem_wc[4]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [4]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][5] 
       (.C(m_axis_aclk),
        .CE(p_28_out),
        .D(mem_wc[5]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [5]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][6] 
       (.C(m_axis_aclk),
        .CE(p_28_out),
        .D(mem_wc[6]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [6]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][7] 
       (.C(m_axis_aclk),
        .CE(p_28_out),
        .D(mem_wc[7]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [7]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][8] 
       (.C(m_axis_aclk),
        .CE(p_28_out),
        .D(mem_wc[8]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [8]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].line_num_reg[2][9] 
       (.C(m_axis_aclk),
        .CE(p_28_out),
        .D(mem_wc[9]),
        .Q(\LINE_NUM_VC[2].line_num_reg[2]_1 [9]),
        .R(\LINE_NUM_VC[2].line_num[2][15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFAAEAAAEAAAEA)) 
    \LINE_NUM_VC[2].rst_lnum[2]_i_1 
       (.I0(\LINE_NUM_VC[3].rst_lnum[3]_i_2_n_0 ),
        .I1(\LINE_NUM_VC[3].rst_lnum[3]_i_3_n_0 ),
        .I2(mem_vc[1]),
        .I3(mem_vc[0]),
        .I4(cur_lp_vc[1]),
        .I5(fsync_vc2_rst_reg_i_2_n_0),
        .O(\LINE_NUM_VC[2].rst_lnum[2]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[2].rst_lnum_reg[2] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\LINE_NUM_VC[2].rst_lnum[2]_i_1_n_0 ),
        .Q(\LINE_NUM_VC[2].rst_lnum_reg_n_0_[2] ),
        .R(srst));
  LUT5 #(
    .INIT(32'h2AAAFFFF)) 
    \LINE_NUM_VC[3].line_num[3][15]_i_1 
       (.I0(\LINE_NUM_VC[3].rst_lnum_reg_n_0_[3] ),
        .I1(mem_vc[0]),
        .I2(mem_vc[1]),
        .I3(p_45_in),
        .I4(m_axis_aresetn),
        .O(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \LINE_NUM_VC[3].line_num[3][15]_i_2 
       (.I0(p_45_in),
        .I1(mem_vc[1]),
        .I2(mem_vc[0]),
        .O(p_19_out));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT5 #(
    .INIT(32'h00080000)) 
    \LINE_NUM_VC[3].line_num[3][15]_i_3 
       (.I0(p_0_in[1]),
        .I1(mem_rvld),
        .I2(p_0_in[2]),
        .I3(p_0_in[0]),
        .I4(p_0_in[3]),
        .O(p_45_in));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][0] 
       (.C(m_axis_aclk),
        .CE(p_19_out),
        .D(mem_wc[0]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [0]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][10] 
       (.C(m_axis_aclk),
        .CE(p_19_out),
        .D(mem_wc[10]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [10]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][11] 
       (.C(m_axis_aclk),
        .CE(p_19_out),
        .D(mem_wc[11]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [11]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][12] 
       (.C(m_axis_aclk),
        .CE(p_19_out),
        .D(mem_wc[12]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [12]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][13] 
       (.C(m_axis_aclk),
        .CE(p_19_out),
        .D(mem_wc[13]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [13]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][14] 
       (.C(m_axis_aclk),
        .CE(p_19_out),
        .D(mem_wc[14]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [14]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][15] 
       (.C(m_axis_aclk),
        .CE(p_19_out),
        .D(mem_wc[15]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [15]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][1] 
       (.C(m_axis_aclk),
        .CE(p_19_out),
        .D(mem_wc[1]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [1]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][2] 
       (.C(m_axis_aclk),
        .CE(p_19_out),
        .D(mem_wc[2]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [2]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][3] 
       (.C(m_axis_aclk),
        .CE(p_19_out),
        .D(mem_wc[3]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [3]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][4] 
       (.C(m_axis_aclk),
        .CE(p_19_out),
        .D(mem_wc[4]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [4]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][5] 
       (.C(m_axis_aclk),
        .CE(p_19_out),
        .D(mem_wc[5]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [5]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][6] 
       (.C(m_axis_aclk),
        .CE(p_19_out),
        .D(mem_wc[6]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [6]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][7] 
       (.C(m_axis_aclk),
        .CE(p_19_out),
        .D(mem_wc[7]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [7]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][8] 
       (.C(m_axis_aclk),
        .CE(p_19_out),
        .D(mem_wc[8]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [8]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  FDRE \LINE_NUM_VC[3].line_num_reg[3][9] 
       (.C(m_axis_aclk),
        .CE(p_19_out),
        .D(mem_wc[9]),
        .Q(\LINE_NUM_VC[3].line_num_reg[3]_0 [9]),
        .R(\LINE_NUM_VC[3].line_num[3][15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFEAAAEAAAEAAA)) 
    \LINE_NUM_VC[3].rst_lnum[3]_i_1 
       (.I0(\LINE_NUM_VC[3].rst_lnum[3]_i_2_n_0 ),
        .I1(\LINE_NUM_VC[3].rst_lnum[3]_i_3_n_0 ),
        .I2(mem_vc[0]),
        .I3(mem_vc[1]),
        .I4(cur_lp_vc[1]),
        .I5(fsync_vc3_rst_reg_i_2_n_0),
        .O(p_0_out));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT4 #(
    .INIT(16'h2010)) 
    \LINE_NUM_VC[3].rst_lnum[3]_i_2 
       (.I0(p_0_in[3]),
        .I1(p_0_in[0]),
        .I2(p_0_in[1]),
        .I3(p_0_in[2]),
        .O(\LINE_NUM_VC[3].rst_lnum[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT4 #(
    .INIT(16'h3100)) 
    \LINE_NUM_VC[3].rst_lnum[3]_i_3 
       (.I0(p_0_in[1]),
        .I1(p_0_in[2]),
        .I2(p_0_in[0]),
        .I3(p_0_in[3]),
        .O(\LINE_NUM_VC[3].rst_lnum[3]_i_3_n_0 ));
  FDRE \LINE_NUM_VC[3].rst_lnum_reg[3] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_0_out),
        .Q(\LINE_NUM_VC[3].rst_lnum_reg_n_0_[3] ),
        .R(srst));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT4 #(
    .INIT(16'hF1FF)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[0]_i_1 
       (.I0(\cur_lp_wc_reg_n_0_[1] ),
        .I1(\cur_lp_wc_reg_n_0_[0] ),
        .I2(\cur_lp_wc_reg_n_0_[2] ),
        .I3(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_3_n_0 ),
        .O(m_axis_tkeep_i[0]));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT4 #(
    .INIT(16'hFFC7)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[1]_i_1 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_3_n_0 ),
        .I1(\cur_lp_wc_reg_n_0_[1] ),
        .I2(\cur_lp_wc_reg_n_0_[0] ),
        .I3(\cur_lp_wc_reg_n_0_[2] ),
        .O(m_axis_tkeep_i[1]));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT4 #(
    .INIT(16'hFFCB)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[2]_i_1 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_3_n_0 ),
        .I1(\cur_lp_wc_reg_n_0_[1] ),
        .I2(\cur_lp_wc_reg_n_0_[0] ),
        .I3(\cur_lp_wc_reg_n_0_[2] ),
        .O(m_axis_tkeep_i[2]));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT4 #(
    .INIT(16'hFFF1)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[3]_i_1 
       (.I0(\cur_lp_wc_reg_n_0_[1] ),
        .I1(\cur_lp_wc_reg_n_0_[0] ),
        .I2(\cur_lp_wc_reg_n_0_[2] ),
        .I3(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_3_n_0 ),
        .O(m_axis_tkeep_i[3]));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT4 #(
    .INIT(16'h4443)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[4]_i_1 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_3_n_0 ),
        .I1(\cur_lp_wc_reg_n_0_[2] ),
        .I2(\cur_lp_wc_reg_n_0_[1] ),
        .I3(\cur_lp_wc_reg_n_0_[0] ),
        .O(m_axis_tkeep_i[4]));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT4 #(
    .INIT(16'hC043)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[5]_i_1 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_3_n_0 ),
        .I1(\cur_lp_wc_reg_n_0_[2] ),
        .I2(\cur_lp_wc_reg_n_0_[1] ),
        .I3(\cur_lp_wc_reg_n_0_[0] ),
        .O(m_axis_tkeep_i[5]));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT4 #(
    .INIT(16'hC083)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[6]_i_1 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_3_n_0 ),
        .I1(\cur_lp_wc_reg_n_0_[2] ),
        .I2(\cur_lp_wc_reg_n_0_[1] ),
        .I3(\cur_lp_wc_reg_n_0_[0] ),
        .O(m_axis_tkeep_i[6]));
  LUT4 #(
    .INIT(16'h80FF)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_1 
       (.I0(m_axis_tlast),
        .I1(m_axis_tvalid),
        .I2(m_axis_tready),
        .I3(m_axis_aresetn),
        .O(bytes_sent));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT4 #(
    .INIT(16'h8883)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_2 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_3_n_0 ),
        .I1(\cur_lp_wc_reg_n_0_[2] ),
        .I2(\cur_lp_wc_reg_n_0_[1] ),
        .I3(\cur_lp_wc_reg_n_0_[0] ),
        .O(m_axis_tkeep_i[7]));
  LUT5 #(
    .INIT(32'h00400000)) 
    \TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_3 
       (.I0(cur_lp_dtype[0]),
        .I1(cur_lp_dtype[1]),
        .I2(cur_lp_dtype[3]),
        .I3(cur_lp_dtype[5]),
        .I4(cur_lp_dtype[4]),
        .O(\TSTRB_KEPP_64.m_axis_tkeep_i[7]_i_3_n_0 ));
  FDSE \TSTRB_KEPP_64.m_axis_tkeep_i_reg[0] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(m_axis_tkeep_i[0]),
        .Q(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[0] ),
        .S(bytes_sent));
  FDSE \TSTRB_KEPP_64.m_axis_tkeep_i_reg[1] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(m_axis_tkeep_i[1]),
        .Q(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[1] ),
        .S(bytes_sent));
  FDSE \TSTRB_KEPP_64.m_axis_tkeep_i_reg[2] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(m_axis_tkeep_i[2]),
        .Q(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[2] ),
        .S(bytes_sent));
  FDSE \TSTRB_KEPP_64.m_axis_tkeep_i_reg[3] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(m_axis_tkeep_i[3]),
        .Q(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[3] ),
        .S(bytes_sent));
  FDSE \TSTRB_KEPP_64.m_axis_tkeep_i_reg[4] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(m_axis_tkeep_i[4]),
        .Q(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[4] ),
        .S(bytes_sent));
  FDSE \TSTRB_KEPP_64.m_axis_tkeep_i_reg[5] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(m_axis_tkeep_i[5]),
        .Q(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[5] ),
        .S(bytes_sent));
  FDSE \TSTRB_KEPP_64.m_axis_tkeep_i_reg[6] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(m_axis_tkeep_i[6]),
        .Q(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[6] ),
        .S(bytes_sent));
  FDSE \TSTRB_KEPP_64.m_axis_tkeep_i_reg[7] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(m_axis_tkeep_i[7]),
        .Q(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[7] ),
        .S(bytes_sent));
  LUT6 #(
    .INIT(64'h0CCCCCCC00888088)) 
    \TUSER_WIDTH_GTE2.m_axis_tuser[1]_i_1 
       (.I0(m_axis_tuser0),
        .I1(m_axis_aresetn),
        .I2(m_axis_tready),
        .I3(m_axis_tvalid),
        .I4(m_axis_tlast),
        .I5(m_axis_tuser[1]),
        .O(\TUSER_WIDTH_GTE2.m_axis_tuser[1]_i_1_n_0 ));
  FDRE \TUSER_WIDTH_GTE2.m_axis_tuser_reg[1] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\TUSER_WIDTH_GTE2.m_axis_tuser[1]_i_1_n_0 ),
        .Q(m_axis_tuser[1]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[16]_i_1 
       (.I0(\frame_num_vc2_reg_n_0_[0] ),
        .I1(\frame_num_vc3_reg_n_0_[0] ),
        .I2(\frame_num_vc0_reg_n_0_[0] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc1_reg_n_0_[0] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[17]_i_1 
       (.I0(\frame_num_vc2_reg_n_0_[1] ),
        .I1(\frame_num_vc3_reg_n_0_[1] ),
        .I2(\frame_num_vc0_reg_n_0_[1] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc1_reg_n_0_[1] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[17]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[18]_i_1 
       (.I0(\frame_num_vc2_reg_n_0_[2] ),
        .I1(\frame_num_vc3_reg_n_0_[2] ),
        .I2(\frame_num_vc0_reg_n_0_[2] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc1_reg_n_0_[2] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[18]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[19]_i_1 
       (.I0(\frame_num_vc2_reg_n_0_[3] ),
        .I1(\frame_num_vc3_reg_n_0_[3] ),
        .I2(\frame_num_vc0_reg_n_0_[3] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc1_reg_n_0_[3] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[19]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[20]_i_1 
       (.I0(\frame_num_vc2_reg_n_0_[4] ),
        .I1(\frame_num_vc3_reg_n_0_[4] ),
        .I2(\frame_num_vc0_reg_n_0_[4] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc1_reg_n_0_[4] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[20]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[21]_i_1 
       (.I0(\frame_num_vc2_reg_n_0_[5] ),
        .I1(\frame_num_vc3_reg_n_0_[5] ),
        .I2(\frame_num_vc0_reg_n_0_[5] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc1_reg_n_0_[5] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[21]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[22]_i_1 
       (.I0(\frame_num_vc2_reg_n_0_[6] ),
        .I1(\frame_num_vc3_reg_n_0_[6] ),
        .I2(\frame_num_vc0_reg_n_0_[6] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc1_reg_n_0_[6] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[22]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[23]_i_1 
       (.I0(\frame_num_vc2_reg_n_0_[7] ),
        .I1(\frame_num_vc3_reg_n_0_[7] ),
        .I2(\frame_num_vc0_reg_n_0_[7] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc1_reg_n_0_[7] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[23]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[24]_i_1 
       (.I0(\frame_num_vc2_reg_n_0_[8] ),
        .I1(\frame_num_vc3_reg_n_0_[8] ),
        .I2(\frame_num_vc0_reg_n_0_[8] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc1_reg_n_0_[8] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[24]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[25]_i_1 
       (.I0(\frame_num_vc2_reg_n_0_[9] ),
        .I1(\frame_num_vc3_reg_n_0_[9] ),
        .I2(\frame_num_vc0_reg_n_0_[9] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc1_reg_n_0_[9] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[25]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[26]_i_1 
       (.I0(\frame_num_vc2_reg_n_0_[10] ),
        .I1(\frame_num_vc3_reg_n_0_[10] ),
        .I2(\frame_num_vc0_reg_n_0_[10] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc1_reg_n_0_[10] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[26]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[27]_i_1 
       (.I0(\frame_num_vc2_reg_n_0_[11] ),
        .I1(\frame_num_vc3_reg_n_0_[11] ),
        .I2(\frame_num_vc0_reg_n_0_[11] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc1_reg_n_0_[11] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[27]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[28]_i_1 
       (.I0(\frame_num_vc2_reg_n_0_[12] ),
        .I1(\frame_num_vc3_reg_n_0_[12] ),
        .I2(\frame_num_vc0_reg_n_0_[12] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc1_reg_n_0_[12] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[28]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[29]_i_1 
       (.I0(\frame_num_vc2_reg_n_0_[13] ),
        .I1(\frame_num_vc3_reg_n_0_[13] ),
        .I2(\frame_num_vc0_reg_n_0_[13] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc1_reg_n_0_[13] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[29]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[30]_i_1 
       (.I0(\frame_num_vc2_reg_n_0_[14] ),
        .I1(\frame_num_vc3_reg_n_0_[14] ),
        .I2(\frame_num_vc0_reg_n_0_[14] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc1_reg_n_0_[14] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[30]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE32.m_axis_tuser[31]_i_1 
       (.I0(\frame_num_vc2_reg_n_0_[15] ),
        .I1(\frame_num_vc3_reg_n_0_[15] ),
        .I2(\frame_num_vc0_reg_n_0_[15] ),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\frame_num_vc1_reg_n_0_[15] ),
        .O(\TUSER_WIDTH_GTE32.m_axis_tuser[31]_i_1_n_0 ));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[16] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[16]_i_1_n_0 ),
        .Q(m_axis_tuser[2]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[17] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[17]_i_1_n_0 ),
        .Q(m_axis_tuser[3]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[18] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[18]_i_1_n_0 ),
        .Q(m_axis_tuser[4]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[19] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[19]_i_1_n_0 ),
        .Q(m_axis_tuser[5]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[20] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[20]_i_1_n_0 ),
        .Q(m_axis_tuser[6]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[21] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[21]_i_1_n_0 ),
        .Q(m_axis_tuser[7]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[22] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[22]_i_1_n_0 ),
        .Q(m_axis_tuser[8]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[23] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[23]_i_1_n_0 ),
        .Q(m_axis_tuser[9]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[24] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[24]_i_1_n_0 ),
        .Q(m_axis_tuser[10]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[25] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[25]_i_1_n_0 ),
        .Q(m_axis_tuser[11]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[26] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[26]_i_1_n_0 ),
        .Q(m_axis_tuser[12]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[27] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[27]_i_1_n_0 ),
        .Q(m_axis_tuser[13]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[28] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[28]_i_1_n_0 ),
        .Q(m_axis_tuser[14]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[29] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[29]_i_1_n_0 ),
        .Q(m_axis_tuser[15]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[30] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[30]_i_1_n_0 ),
        .Q(m_axis_tuser[16]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE32.m_axis_tuser_reg[31] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE32.m_axis_tuser[31]_i_1_n_0 ),
        .Q(m_axis_tuser[17]),
        .R(srst));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[32]_i_1 
       (.I0(\LINE_NUM_VC[2].line_num_reg[2]_1 [0]),
        .I1(\LINE_NUM_VC[3].line_num_reg[3]_0 [0]),
        .I2(\LINE_NUM_VC[0].line_num_reg[0]_3 [0]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[1].line_num_reg[1]_2 [0]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[32]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[33]_i_1 
       (.I0(\LINE_NUM_VC[2].line_num_reg[2]_1 [1]),
        .I1(\LINE_NUM_VC[3].line_num_reg[3]_0 [1]),
        .I2(\LINE_NUM_VC[0].line_num_reg[0]_3 [1]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[1].line_num_reg[1]_2 [1]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[33]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[34]_i_1 
       (.I0(\LINE_NUM_VC[2].line_num_reg[2]_1 [2]),
        .I1(\LINE_NUM_VC[3].line_num_reg[3]_0 [2]),
        .I2(\LINE_NUM_VC[0].line_num_reg[0]_3 [2]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[1].line_num_reg[1]_2 [2]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[34]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[35]_i_1 
       (.I0(\LINE_NUM_VC[2].line_num_reg[2]_1 [3]),
        .I1(\LINE_NUM_VC[3].line_num_reg[3]_0 [3]),
        .I2(\LINE_NUM_VC[0].line_num_reg[0]_3 [3]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[1].line_num_reg[1]_2 [3]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[35]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[36]_i_1 
       (.I0(\LINE_NUM_VC[2].line_num_reg[2]_1 [4]),
        .I1(\LINE_NUM_VC[3].line_num_reg[3]_0 [4]),
        .I2(\LINE_NUM_VC[0].line_num_reg[0]_3 [4]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[1].line_num_reg[1]_2 [4]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[36]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[37]_i_1 
       (.I0(\LINE_NUM_VC[2].line_num_reg[2]_1 [5]),
        .I1(\LINE_NUM_VC[3].line_num_reg[3]_0 [5]),
        .I2(\LINE_NUM_VC[0].line_num_reg[0]_3 [5]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[1].line_num_reg[1]_2 [5]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[37]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[38]_i_1 
       (.I0(\LINE_NUM_VC[2].line_num_reg[2]_1 [6]),
        .I1(\LINE_NUM_VC[3].line_num_reg[3]_0 [6]),
        .I2(\LINE_NUM_VC[0].line_num_reg[0]_3 [6]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[1].line_num_reg[1]_2 [6]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[38]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[39]_i_1 
       (.I0(\LINE_NUM_VC[2].line_num_reg[2]_1 [7]),
        .I1(\LINE_NUM_VC[3].line_num_reg[3]_0 [7]),
        .I2(\LINE_NUM_VC[0].line_num_reg[0]_3 [7]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[1].line_num_reg[1]_2 [7]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[39]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[40]_i_1 
       (.I0(\LINE_NUM_VC[2].line_num_reg[2]_1 [8]),
        .I1(\LINE_NUM_VC[3].line_num_reg[3]_0 [8]),
        .I2(\LINE_NUM_VC[0].line_num_reg[0]_3 [8]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[1].line_num_reg[1]_2 [8]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[40]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[41]_i_1 
       (.I0(\LINE_NUM_VC[2].line_num_reg[2]_1 [9]),
        .I1(\LINE_NUM_VC[3].line_num_reg[3]_0 [9]),
        .I2(\LINE_NUM_VC[0].line_num_reg[0]_3 [9]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[1].line_num_reg[1]_2 [9]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[41]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[42]_i_1 
       (.I0(\LINE_NUM_VC[2].line_num_reg[2]_1 [10]),
        .I1(\LINE_NUM_VC[3].line_num_reg[3]_0 [10]),
        .I2(\LINE_NUM_VC[0].line_num_reg[0]_3 [10]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[1].line_num_reg[1]_2 [10]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[42]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[43]_i_1 
       (.I0(\LINE_NUM_VC[2].line_num_reg[2]_1 [11]),
        .I1(\LINE_NUM_VC[3].line_num_reg[3]_0 [11]),
        .I2(\LINE_NUM_VC[0].line_num_reg[0]_3 [11]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[1].line_num_reg[1]_2 [11]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[43]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[44]_i_1 
       (.I0(\LINE_NUM_VC[2].line_num_reg[2]_1 [12]),
        .I1(\LINE_NUM_VC[3].line_num_reg[3]_0 [12]),
        .I2(\LINE_NUM_VC[0].line_num_reg[0]_3 [12]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[1].line_num_reg[1]_2 [12]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[44]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[45]_i_1 
       (.I0(\LINE_NUM_VC[2].line_num_reg[2]_1 [13]),
        .I1(\LINE_NUM_VC[3].line_num_reg[3]_0 [13]),
        .I2(\LINE_NUM_VC[0].line_num_reg[0]_3 [13]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[1].line_num_reg[1]_2 [13]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[45]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[46]_i_1 
       (.I0(\LINE_NUM_VC[2].line_num_reg[2]_1 [14]),
        .I1(\LINE_NUM_VC[3].line_num_reg[3]_0 [14]),
        .I2(\LINE_NUM_VC[0].line_num_reg[0]_3 [14]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[1].line_num_reg[1]_2 [14]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[46]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \TUSER_WIDTH_GTE48.m_axis_tuser[47]_i_1 
       (.I0(\LINE_NUM_VC[2].line_num_reg[2]_1 [15]),
        .I1(\LINE_NUM_VC[3].line_num_reg[3]_0 [15]),
        .I2(\LINE_NUM_VC[0].line_num_reg[0]_3 [15]),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(\LINE_NUM_VC[1].line_num_reg[1]_2 [15]),
        .O(\TUSER_WIDTH_GTE48.m_axis_tuser[47]_i_1_n_0 ));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[32] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[32]_i_1_n_0 ),
        .Q(m_axis_tuser[18]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[33] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[33]_i_1_n_0 ),
        .Q(m_axis_tuser[19]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[34] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[34]_i_1_n_0 ),
        .Q(m_axis_tuser[20]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[35] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[35]_i_1_n_0 ),
        .Q(m_axis_tuser[21]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[36] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[36]_i_1_n_0 ),
        .Q(m_axis_tuser[22]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[37] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[37]_i_1_n_0 ),
        .Q(m_axis_tuser[23]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[38] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[38]_i_1_n_0 ),
        .Q(m_axis_tuser[24]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[39] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[39]_i_1_n_0 ),
        .Q(m_axis_tuser[25]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[40] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[40]_i_1_n_0 ),
        .Q(m_axis_tuser[26]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[41] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[41]_i_1_n_0 ),
        .Q(m_axis_tuser[27]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[42] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[42]_i_1_n_0 ),
        .Q(m_axis_tuser[28]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[43] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[43]_i_1_n_0 ),
        .Q(m_axis_tuser[29]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[44] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[44]_i_1_n_0 ),
        .Q(m_axis_tuser[30]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[45] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[45]_i_1_n_0 ),
        .Q(m_axis_tuser[31]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[46] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[46]_i_1_n_0 ),
        .Q(m_axis_tuser[32]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE48.m_axis_tuser_reg[47] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\TUSER_WIDTH_GTE48.m_axis_tuser[47]_i_1_n_0 ),
        .Q(m_axis_tuser[33]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[48] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\cur_lp_wc_reg_n_0_[0] ),
        .Q(m_axis_tuser[34]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[49] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\cur_lp_wc_reg_n_0_[1] ),
        .Q(m_axis_tuser[35]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[50] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\cur_lp_wc_reg_n_0_[2] ),
        .Q(m_axis_tuser[36]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[51] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\cur_lp_wc_reg_n_0_[3] ),
        .Q(m_axis_tuser[37]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[52] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\cur_lp_wc_reg_n_0_[4] ),
        .Q(m_axis_tuser[38]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[53] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\cur_lp_wc_reg_n_0_[5] ),
        .Q(m_axis_tuser[39]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[54] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\cur_lp_wc_reg_n_0_[6] ),
        .Q(m_axis_tuser[40]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[55] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\cur_lp_wc_reg_n_0_[7] ),
        .Q(m_axis_tuser[41]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[56] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\cur_lp_wc_reg_n_0_[8] ),
        .Q(m_axis_tuser[42]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[57] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\cur_lp_wc_reg_n_0_[9] ),
        .Q(m_axis_tuser[43]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[58] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\cur_lp_wc_reg_n_0_[10] ),
        .Q(m_axis_tuser[44]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[59] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\cur_lp_wc_reg_n_0_[11] ),
        .Q(m_axis_tuser[45]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[60] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\cur_lp_wc_reg_n_0_[12] ),
        .Q(m_axis_tuser[46]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[61] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\cur_lp_wc_reg_n_0_[13] ),
        .Q(m_axis_tuser[47]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[62] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\cur_lp_wc_reg_n_0_[14] ),
        .Q(m_axis_tuser[48]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE64.m_axis_tuser_reg[63] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(\cur_lp_wc_reg_n_0_[15] ),
        .Q(m_axis_tuser[49]),
        .R(srst));
  LUT6 #(
    .INIT(64'h0000000000000040)) 
    \TUSER_WIDTH_GTE96.m_axis_tuser[69]_i_1 
       (.I0(p_67_in),
        .I1(mem_rvld),
        .I2(p_1_in),
        .I3(p_0_in[2]),
        .I4(p_0_in[1]),
        .I5(p_0_in[3]),
        .O(p_2_out));
  LUT2 #(
    .INIT(4'hB)) 
    \TUSER_WIDTH_GTE96.m_axis_tuser[95]_i_1 
       (.I0(m_axis_tready),
        .I1(m_axis_tvalid),
        .O(p_1_in));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[64] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(cur_lp_dtype[0]),
        .Q(m_axis_tuser[50]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[65] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(cur_lp_dtype[1]),
        .Q(m_axis_tuser[51]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[66] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(cur_lp_dtype[2]),
        .Q(m_axis_tuser[52]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[67] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(cur_lp_dtype[3]),
        .Q(m_axis_tuser[53]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[68] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(cur_lp_dtype[4]),
        .Q(m_axis_tuser[54]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[69] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(cur_lp_dtype[5]),
        .Q(m_axis_tuser[55]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[72] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(\mem_rdata_r_reg_n_0_[0] ),
        .Q(m_axis_tuser[56]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[73] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(\mem_rdata_r_reg_n_0_[1] ),
        .Q(m_axis_tuser[57]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[74] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(\mem_rdata_r_reg_n_0_[2] ),
        .Q(m_axis_tuser[58]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[75] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(\mem_rdata_r_reg_n_0_[3] ),
        .Q(m_axis_tuser[59]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[76] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(\mem_rdata_r_reg_n_0_[4] ),
        .Q(m_axis_tuser[60]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[77] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(\mem_rdata_r_reg_n_0_[5] ),
        .Q(m_axis_tuser[61]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[78] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_vc[0]),
        .Q(m_axis_tuser[62]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[79] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_vc[1]),
        .Q(m_axis_tuser[63]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[80] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_wc[0]),
        .Q(m_axis_tuser[64]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[81] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_wc[1]),
        .Q(m_axis_tuser[65]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[82] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_wc[2]),
        .Q(m_axis_tuser[66]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[83] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_wc[3]),
        .Q(m_axis_tuser[67]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[84] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_wc[4]),
        .Q(m_axis_tuser[68]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[85] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_wc[5]),
        .Q(m_axis_tuser[69]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[86] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_wc[6]),
        .Q(m_axis_tuser[70]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[87] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_wc[7]),
        .Q(m_axis_tuser[71]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[88] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_wc[8]),
        .Q(m_axis_tuser[72]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[89] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_wc[9]),
        .Q(m_axis_tuser[73]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[90] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_wc[10]),
        .Q(m_axis_tuser[74]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[91] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_wc[11]),
        .Q(m_axis_tuser[75]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[92] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_wc[12]),
        .Q(m_axis_tuser[76]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[93] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_wc[13]),
        .Q(m_axis_tuser[77]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[94] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_wc[14]),
        .Q(m_axis_tuser[78]),
        .R(srst));
  FDRE \TUSER_WIDTH_GTE96.m_axis_tuser_reg[95] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(mem_wc[15]),
        .Q(m_axis_tuser[79]),
        .R(srst));
  LUT2 #(
    .INIT(4'h8)) 
    \bytes_sent[3]_i_1 
       (.I0(m_axis_tvalid),
        .I1(m_axis_tready),
        .O(\bytes_sent[3]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \bytes_sent[3]_i_3 
       (.I0(bytes_sent_reg[3]),
        .O(\bytes_sent[3]_i_3_n_0 ));
  FDRE \bytes_sent_reg[10] 
       (.C(m_axis_aclk),
        .CE(\bytes_sent[3]_i_1_n_0 ),
        .D(\bytes_sent_reg[7]_i_1_n_4 ),
        .Q(bytes_sent_reg[10]),
        .R(bytes_sent));
  FDRE \bytes_sent_reg[11] 
       (.C(m_axis_aclk),
        .CE(\bytes_sent[3]_i_1_n_0 ),
        .D(\bytes_sent_reg[11]_i_1_n_7 ),
        .Q(bytes_sent_reg[11]),
        .R(bytes_sent));
  CARRY4 \bytes_sent_reg[11]_i_1 
       (.CI(\bytes_sent_reg[7]_i_1_n_0 ),
        .CO({\bytes_sent_reg[11]_i_1_n_0 ,\bytes_sent_reg[11]_i_1_n_1 ,\bytes_sent_reg[11]_i_1_n_2 ,\bytes_sent_reg[11]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\bytes_sent_reg[11]_i_1_n_4 ,\bytes_sent_reg[11]_i_1_n_5 ,\bytes_sent_reg[11]_i_1_n_6 ,\bytes_sent_reg[11]_i_1_n_7 }),
        .S(bytes_sent_reg[14:11]));
  FDRE \bytes_sent_reg[12] 
       (.C(m_axis_aclk),
        .CE(\bytes_sent[3]_i_1_n_0 ),
        .D(\bytes_sent_reg[11]_i_1_n_6 ),
        .Q(bytes_sent_reg[12]),
        .R(bytes_sent));
  FDRE \bytes_sent_reg[13] 
       (.C(m_axis_aclk),
        .CE(\bytes_sent[3]_i_1_n_0 ),
        .D(\bytes_sent_reg[11]_i_1_n_5 ),
        .Q(bytes_sent_reg[13]),
        .R(bytes_sent));
  FDRE \bytes_sent_reg[14] 
       (.C(m_axis_aclk),
        .CE(\bytes_sent[3]_i_1_n_0 ),
        .D(\bytes_sent_reg[11]_i_1_n_4 ),
        .Q(bytes_sent_reg[14]),
        .R(bytes_sent));
  FDRE \bytes_sent_reg[15] 
       (.C(m_axis_aclk),
        .CE(\bytes_sent[3]_i_1_n_0 ),
        .D(\bytes_sent_reg[15]_i_1_n_7 ),
        .Q(bytes_sent_reg[15]),
        .R(bytes_sent));
  CARRY4 \bytes_sent_reg[15]_i_1 
       (.CI(\bytes_sent_reg[11]_i_1_n_0 ),
        .CO(\NLW_bytes_sent_reg[15]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_bytes_sent_reg[15]_i_1_O_UNCONNECTED [3:1],\bytes_sent_reg[15]_i_1_n_7 }),
        .S({1'b0,1'b0,1'b0,bytes_sent_reg[15]}));
  FDRE \bytes_sent_reg[3] 
       (.C(m_axis_aclk),
        .CE(\bytes_sent[3]_i_1_n_0 ),
        .D(\bytes_sent_reg[3]_i_2_n_7 ),
        .Q(bytes_sent_reg[3]),
        .R(bytes_sent));
  CARRY4 \bytes_sent_reg[3]_i_2 
       (.CI(1'b0),
        .CO({\bytes_sent_reg[3]_i_2_n_0 ,\bytes_sent_reg[3]_i_2_n_1 ,\bytes_sent_reg[3]_i_2_n_2 ,\bytes_sent_reg[3]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\bytes_sent_reg[3]_i_2_n_4 ,\bytes_sent_reg[3]_i_2_n_5 ,\bytes_sent_reg[3]_i_2_n_6 ,\bytes_sent_reg[3]_i_2_n_7 }),
        .S({bytes_sent_reg[6:4],\bytes_sent[3]_i_3_n_0 }));
  FDRE \bytes_sent_reg[4] 
       (.C(m_axis_aclk),
        .CE(\bytes_sent[3]_i_1_n_0 ),
        .D(\bytes_sent_reg[3]_i_2_n_6 ),
        .Q(bytes_sent_reg[4]),
        .R(bytes_sent));
  FDRE \bytes_sent_reg[5] 
       (.C(m_axis_aclk),
        .CE(\bytes_sent[3]_i_1_n_0 ),
        .D(\bytes_sent_reg[3]_i_2_n_5 ),
        .Q(bytes_sent_reg[5]),
        .R(bytes_sent));
  FDRE \bytes_sent_reg[6] 
       (.C(m_axis_aclk),
        .CE(\bytes_sent[3]_i_1_n_0 ),
        .D(\bytes_sent_reg[3]_i_2_n_4 ),
        .Q(bytes_sent_reg[6]),
        .R(bytes_sent));
  FDRE \bytes_sent_reg[7] 
       (.C(m_axis_aclk),
        .CE(\bytes_sent[3]_i_1_n_0 ),
        .D(\bytes_sent_reg[7]_i_1_n_7 ),
        .Q(bytes_sent_reg[7]),
        .R(bytes_sent));
  CARRY4 \bytes_sent_reg[7]_i_1 
       (.CI(\bytes_sent_reg[3]_i_2_n_0 ),
        .CO({\bytes_sent_reg[7]_i_1_n_0 ,\bytes_sent_reg[7]_i_1_n_1 ,\bytes_sent_reg[7]_i_1_n_2 ,\bytes_sent_reg[7]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\bytes_sent_reg[7]_i_1_n_4 ,\bytes_sent_reg[7]_i_1_n_5 ,\bytes_sent_reg[7]_i_1_n_6 ,\bytes_sent_reg[7]_i_1_n_7 }),
        .S(bytes_sent_reg[10:7]));
  FDRE \bytes_sent_reg[8] 
       (.C(m_axis_aclk),
        .CE(\bytes_sent[3]_i_1_n_0 ),
        .D(\bytes_sent_reg[7]_i_1_n_6 ),
        .Q(bytes_sent_reg[8]),
        .R(bytes_sent));
  FDRE \bytes_sent_reg[9] 
       (.C(m_axis_aclk),
        .CE(\bytes_sent[3]_i_1_n_0 ),
        .D(\bytes_sent_reg[7]_i_1_n_5 ),
        .Q(bytes_sent_reg[9]),
        .R(bytes_sent));
  FDRE \cur_lp_dtype_reg[0] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(\mem_rdata_r_reg_n_0_[0] ),
        .Q(cur_lp_dtype[0]),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_dtype_reg[1] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(\mem_rdata_r_reg_n_0_[1] ),
        .Q(cur_lp_dtype[1]),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_dtype_reg[2] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(\mem_rdata_r_reg_n_0_[2] ),
        .Q(cur_lp_dtype[2]),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_dtype_reg[3] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(\mem_rdata_r_reg_n_0_[3] ),
        .Q(cur_lp_dtype[3]),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_dtype_reg[4] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(\mem_rdata_r_reg_n_0_[4] ),
        .Q(cur_lp_dtype[4]),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_dtype_reg[5] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(\mem_rdata_r_reg_n_0_[5] ),
        .Q(cur_lp_dtype[5]),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_vc_reg[0] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_vc[0]),
        .Q(cur_lp_vc[0]),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_vc_reg[1] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_vc[1]),
        .Q(cur_lp_vc[1]),
        .R(fsync_eni_int_reg));
  LUT5 #(
    .INIT(32'h0804FFFF)) 
    cur_lp_wc_lte4_i_1
       (.I0(p_0_in[2]),
        .I1(p_0_in[1]),
        .I2(p_0_in[0]),
        .I3(p_0_in[3]),
        .I4(m_axis_aresetn),
        .O(fsync_eni_int_reg));
  LUT5 #(
    .INIT(32'h00400000)) 
    cur_lp_wc_lte4_i_2
       (.I0(p_0_in[1]),
        .I1(p_0_in[2]),
        .I2(mem_rvld),
        .I3(p_0_in[0]),
        .I4(p_0_in[3]),
        .O(cur_lp_vc0));
  LUT6 #(
    .INIT(64'h01FF000000000000)) 
    cur_lp_wc_lte4_i_3
       (.I0(mem_wc[0]),
        .I1(mem_wc[1]),
        .I2(mem_wc[2]),
        .I3(mem_wc[3]),
        .I4(cur_lp_wc_lte4_i_4_n_0),
        .I5(cur_lp_wc_lte4_i_5_n_0),
        .O(cur_lp_wc_lte4_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    cur_lp_wc_lte4_i_4
       (.I0(mem_wc[12]),
        .I1(mem_wc[13]),
        .I2(mem_wc[10]),
        .I3(mem_wc[11]),
        .I4(mem_wc[15]),
        .I5(mem_wc[14]),
        .O(cur_lp_wc_lte4_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    cur_lp_wc_lte4_i_5
       (.I0(mem_wc[6]),
        .I1(mem_wc[7]),
        .I2(mem_wc[4]),
        .I3(mem_wc[5]),
        .I4(mem_wc[9]),
        .I5(mem_wc[8]),
        .O(cur_lp_wc_lte4_i_5_n_0));
  FDRE cur_lp_wc_lte4_reg
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(cur_lp_wc_lte4_i_3_n_0),
        .Q(cur_lp_wc_lte4),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_wc_reg[0] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[0]),
        .Q(\cur_lp_wc_reg_n_0_[0] ),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_wc_reg[10] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[10]),
        .Q(\cur_lp_wc_reg_n_0_[10] ),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_wc_reg[11] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[11]),
        .Q(\cur_lp_wc_reg_n_0_[11] ),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_wc_reg[12] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[12]),
        .Q(\cur_lp_wc_reg_n_0_[12] ),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_wc_reg[13] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[13]),
        .Q(\cur_lp_wc_reg_n_0_[13] ),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_wc_reg[14] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[14]),
        .Q(\cur_lp_wc_reg_n_0_[14] ),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_wc_reg[15] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[15]),
        .Q(\cur_lp_wc_reg_n_0_[15] ),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_wc_reg[1] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[1]),
        .Q(\cur_lp_wc_reg_n_0_[1] ),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_wc_reg[2] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[2]),
        .Q(\cur_lp_wc_reg_n_0_[2] ),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_wc_reg[3] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[3]),
        .Q(\cur_lp_wc_reg_n_0_[3] ),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_wc_reg[4] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[4]),
        .Q(\cur_lp_wc_reg_n_0_[4] ),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_wc_reg[5] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[5]),
        .Q(\cur_lp_wc_reg_n_0_[5] ),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_wc_reg[6] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[6]),
        .Q(\cur_lp_wc_reg_n_0_[6] ),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_wc_reg[7] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[7]),
        .Q(\cur_lp_wc_reg_n_0_[7] ),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_wc_reg[8] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[8]),
        .Q(\cur_lp_wc_reg_n_0_[8] ),
        .R(fsync_eni_int_reg));
  FDRE \cur_lp_wc_reg[9] 
       (.C(m_axis_aclk),
        .CE(cur_lp_vc0),
        .D(mem_wc[9]),
        .Q(\cur_lp_wc_reg_n_0_[9] ),
        .R(fsync_eni_int_reg));
  LUT4 #(
    .INIT(16'hFF10)) 
    \frame_num_vc0[15]_i_1 
       (.I0(mem_vc[1]),
        .I1(mem_vc[0]),
        .I2(\frame_num_vc3[15]_i_3_n_0 ),
        .I3(fsync_eni_int_reg),
        .O(\frame_num_vc0[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000800)) 
    \frame_num_vc0[15]_i_2 
       (.I0(mem_rvld),
        .I1(\frame_num_vc3[15]_i_4_n_0 ),
        .I2(p_0_in[0]),
        .I3(p_0_in[3]),
        .I4(mem_vc[0]),
        .I5(mem_vc[1]),
        .O(frame_num_vc0));
  FDRE \frame_num_vc0_reg[0] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[0]),
        .Q(\frame_num_vc0_reg_n_0_[0] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[10] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[10]),
        .Q(\frame_num_vc0_reg_n_0_[10] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[11] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[11]),
        .Q(\frame_num_vc0_reg_n_0_[11] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[12] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[12]),
        .Q(\frame_num_vc0_reg_n_0_[12] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[13] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[13]),
        .Q(\frame_num_vc0_reg_n_0_[13] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[14] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[14]),
        .Q(\frame_num_vc0_reg_n_0_[14] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[15] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[15]),
        .Q(\frame_num_vc0_reg_n_0_[15] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[1] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[1]),
        .Q(\frame_num_vc0_reg_n_0_[1] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[2] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[2]),
        .Q(\frame_num_vc0_reg_n_0_[2] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[3] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[3]),
        .Q(\frame_num_vc0_reg_n_0_[3] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[4] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[4]),
        .Q(\frame_num_vc0_reg_n_0_[4] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[5] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[5]),
        .Q(\frame_num_vc0_reg_n_0_[5] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[6] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[6]),
        .Q(\frame_num_vc0_reg_n_0_[6] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[7] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[7]),
        .Q(\frame_num_vc0_reg_n_0_[7] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[8] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[8]),
        .Q(\frame_num_vc0_reg_n_0_[8] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  FDRE \frame_num_vc0_reg[9] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc0),
        .D(mem_wc[9]),
        .Q(\frame_num_vc0_reg_n_0_[9] ),
        .R(\frame_num_vc0[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFF40)) 
    \frame_num_vc1[15]_i_1 
       (.I0(mem_vc[1]),
        .I1(mem_vc[0]),
        .I2(\frame_num_vc3[15]_i_3_n_0 ),
        .I3(fsync_eni_int_reg),
        .O(\frame_num_vc1[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000008000000)) 
    \frame_num_vc1[15]_i_2 
       (.I0(mem_rvld),
        .I1(\frame_num_vc3[15]_i_4_n_0 ),
        .I2(p_0_in[0]),
        .I3(p_0_in[3]),
        .I4(mem_vc[0]),
        .I5(mem_vc[1]),
        .O(frame_num_vc1));
  FDRE \frame_num_vc1_reg[0] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[0]),
        .Q(\frame_num_vc1_reg_n_0_[0] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[10] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[10]),
        .Q(\frame_num_vc1_reg_n_0_[10] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[11] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[11]),
        .Q(\frame_num_vc1_reg_n_0_[11] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[12] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[12]),
        .Q(\frame_num_vc1_reg_n_0_[12] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[13] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[13]),
        .Q(\frame_num_vc1_reg_n_0_[13] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[14] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[14]),
        .Q(\frame_num_vc1_reg_n_0_[14] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[15] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[15]),
        .Q(\frame_num_vc1_reg_n_0_[15] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[1] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[1]),
        .Q(\frame_num_vc1_reg_n_0_[1] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[2] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[2]),
        .Q(\frame_num_vc1_reg_n_0_[2] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[3] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[3]),
        .Q(\frame_num_vc1_reg_n_0_[3] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[4] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[4]),
        .Q(\frame_num_vc1_reg_n_0_[4] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[5] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[5]),
        .Q(\frame_num_vc1_reg_n_0_[5] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[6] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[6]),
        .Q(\frame_num_vc1_reg_n_0_[6] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[7] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[7]),
        .Q(\frame_num_vc1_reg_n_0_[7] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[8] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[8]),
        .Q(\frame_num_vc1_reg_n_0_[8] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  FDRE \frame_num_vc1_reg[9] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc1),
        .D(mem_wc[9]),
        .Q(\frame_num_vc1_reg_n_0_[9] ),
        .R(\frame_num_vc1[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFF40)) 
    \frame_num_vc2[15]_i_1 
       (.I0(mem_vc[0]),
        .I1(mem_vc[1]),
        .I2(\frame_num_vc3[15]_i_3_n_0 ),
        .I3(fsync_eni_int_reg),
        .O(\frame_num_vc2[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000008000000)) 
    \frame_num_vc2[15]_i_2 
       (.I0(mem_rvld),
        .I1(\frame_num_vc3[15]_i_4_n_0 ),
        .I2(p_0_in[0]),
        .I3(p_0_in[3]),
        .I4(mem_vc[1]),
        .I5(mem_vc[0]),
        .O(frame_num_vc2));
  FDRE \frame_num_vc2_reg[0] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[0]),
        .Q(\frame_num_vc2_reg_n_0_[0] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[10] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[10]),
        .Q(\frame_num_vc2_reg_n_0_[10] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[11] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[11]),
        .Q(\frame_num_vc2_reg_n_0_[11] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[12] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[12]),
        .Q(\frame_num_vc2_reg_n_0_[12] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[13] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[13]),
        .Q(\frame_num_vc2_reg_n_0_[13] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[14] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[14]),
        .Q(\frame_num_vc2_reg_n_0_[14] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[15] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[15]),
        .Q(\frame_num_vc2_reg_n_0_[15] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[1] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[1]),
        .Q(\frame_num_vc2_reg_n_0_[1] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[2] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[2]),
        .Q(\frame_num_vc2_reg_n_0_[2] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[3] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[3]),
        .Q(\frame_num_vc2_reg_n_0_[3] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[4] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[4]),
        .Q(\frame_num_vc2_reg_n_0_[4] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[5] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[5]),
        .Q(\frame_num_vc2_reg_n_0_[5] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[6] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[6]),
        .Q(\frame_num_vc2_reg_n_0_[6] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[7] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[7]),
        .Q(\frame_num_vc2_reg_n_0_[7] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[8] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[8]),
        .Q(\frame_num_vc2_reg_n_0_[8] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  FDRE \frame_num_vc2_reg[9] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc2),
        .D(mem_wc[9]),
        .Q(\frame_num_vc2_reg_n_0_[9] ),
        .R(\frame_num_vc2[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFF80)) 
    \frame_num_vc3[15]_i_1 
       (.I0(mem_vc[1]),
        .I1(mem_vc[0]),
        .I2(\frame_num_vc3[15]_i_3_n_0 ),
        .I3(fsync_eni_int_reg),
        .O(\frame_num_vc3[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0800000000000000)) 
    \frame_num_vc3[15]_i_2 
       (.I0(mem_rvld),
        .I1(\frame_num_vc3[15]_i_4_n_0 ),
        .I2(p_0_in[0]),
        .I3(p_0_in[3]),
        .I4(mem_vc[0]),
        .I5(mem_vc[1]),
        .O(frame_num_vc3));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT5 #(
    .INIT(32'h10000000)) 
    \frame_num_vc3[15]_i_3 
       (.I0(p_0_in[2]),
        .I1(p_0_in[1]),
        .I2(p_0_in[0]),
        .I3(p_0_in[3]),
        .I4(mem_rvld),
        .O(\frame_num_vc3[15]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \frame_num_vc3[15]_i_4 
       (.I0(p_0_in[1]),
        .I1(p_0_in[2]),
        .O(\frame_num_vc3[15]_i_4_n_0 ));
  FDRE \frame_num_vc3_reg[0] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[0]),
        .Q(\frame_num_vc3_reg_n_0_[0] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[10] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[10]),
        .Q(\frame_num_vc3_reg_n_0_[10] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[11] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[11]),
        .Q(\frame_num_vc3_reg_n_0_[11] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[12] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[12]),
        .Q(\frame_num_vc3_reg_n_0_[12] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[13] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[13]),
        .Q(\frame_num_vc3_reg_n_0_[13] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[14] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[14]),
        .Q(\frame_num_vc3_reg_n_0_[14] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[15] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[15]),
        .Q(\frame_num_vc3_reg_n_0_[15] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[1] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[1]),
        .Q(\frame_num_vc3_reg_n_0_[1] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[2] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[2]),
        .Q(\frame_num_vc3_reg_n_0_[2] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[3] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[3]),
        .Q(\frame_num_vc3_reg_n_0_[3] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[4] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[4]),
        .Q(\frame_num_vc3_reg_n_0_[4] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[5] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[5]),
        .Q(\frame_num_vc3_reg_n_0_[5] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[6] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[6]),
        .Q(\frame_num_vc3_reg_n_0_[6] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[7] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[7]),
        .Q(\frame_num_vc3_reg_n_0_[7] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[8] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[8]),
        .Q(\frame_num_vc3_reg_n_0_[8] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  FDRE \frame_num_vc3_reg[9] 
       (.C(m_axis_aclk),
        .CE(frame_num_vc3),
        .D(mem_wc[9]),
        .Q(\frame_num_vc3_reg_n_0_[9] ),
        .R(\frame_num_vc3[15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hBA)) 
    fsync_vc0_int_reg_i_1
       (.I0(frame_num_vc0),
        .I1(fsync_vc0_rst_reg),
        .I2(fsync_vc0_int_reg),
        .O(fsync_vc0_int_reg_i_1_n_0));
  FDRE fsync_vc0_int_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsync_vc0_int_reg_i_1_n_0),
        .Q(fsync_vc0_int_reg),
        .R(fsync_eni_int_reg));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT3 #(
    .INIT(8'h40)) 
    fsync_vc0_rst_reg_i_1
       (.I0(cur_lp_vc[1]),
        .I1(mem_rvld),
        .I2(fsync_vc2_rst_reg_i_2_n_0),
        .O(fsync_vc0_rst_reg0));
  FDRE fsync_vc0_rst_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsync_vc0_rst_reg0),
        .Q(fsync_vc0_rst_reg),
        .R(srst));
  LUT3 #(
    .INIT(8'hBA)) 
    fsync_vc1_int_reg_i_1
       (.I0(frame_num_vc1),
        .I1(fsync_vc1_rst_reg),
        .I2(fsync_vc1_int_reg),
        .O(fsync_vc1_int_reg_i_1_n_0));
  FDRE fsync_vc1_int_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsync_vc1_int_reg_i_1_n_0),
        .Q(fsync_vc1_int_reg),
        .R(fsync_eni_int_reg));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT3 #(
    .INIT(8'h40)) 
    fsync_vc1_rst_reg_i_1
       (.I0(cur_lp_vc[1]),
        .I1(mem_rvld),
        .I2(fsync_vc3_rst_reg_i_2_n_0),
        .O(fsync_vc1_rst_reg0));
  FDRE fsync_vc1_rst_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsync_vc1_rst_reg0),
        .Q(fsync_vc1_rst_reg),
        .R(srst));
  LUT3 #(
    .INIT(8'hBA)) 
    fsync_vc2_int_reg_i_1
       (.I0(frame_num_vc2),
        .I1(fsync_vc2_rst_reg),
        .I2(fsync_vc2_int_reg),
        .O(fsync_vc2_int_reg_i_1_n_0));
  FDRE fsync_vc2_int_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsync_vc2_int_reg_i_1_n_0),
        .Q(fsync_vc2_int_reg),
        .R(fsync_eni_int_reg));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT3 #(
    .INIT(8'h80)) 
    fsync_vc2_rst_reg_i_1
       (.I0(mem_rvld),
        .I1(cur_lp_vc[1]),
        .I2(fsync_vc2_rst_reg_i_2_n_0),
        .O(fsync_vc2_rst_reg0));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT5 #(
    .INIT(32'h00000100)) 
    fsync_vc2_rst_reg_i_2
       (.I0(p_0_in[2]),
        .I1(p_0_in[1]),
        .I2(p_0_in[3]),
        .I3(fsync_vc0_rst_reg1),
        .I4(cur_lp_vc[0]),
        .O(fsync_vc2_rst_reg_i_2_n_0));
  FDRE fsync_vc2_rst_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsync_vc2_rst_reg0),
        .Q(fsync_vc2_rst_reg),
        .R(srst));
  LUT3 #(
    .INIT(8'hBA)) 
    fsync_vc3_int_reg_i_1
       (.I0(frame_num_vc3),
        .I1(fsync_vc3_rst_reg),
        .I2(fsync_vc3_int_reg),
        .O(fsync_vc3_int_reg_i_1_n_0));
  FDRE fsync_vc3_int_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsync_vc3_int_reg_i_1_n_0),
        .Q(fsync_vc3_int_reg),
        .R(fsync_eni_int_reg));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT3 #(
    .INIT(8'h80)) 
    fsync_vc3_rst_reg_i_1
       (.I0(mem_rvld),
        .I1(cur_lp_vc[1]),
        .I2(fsync_vc3_rst_reg_i_2_n_0),
        .O(fsync_vc3_rst_reg0));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT5 #(
    .INIT(32'h01000000)) 
    fsync_vc3_rst_reg_i_2
       (.I0(p_0_in[2]),
        .I1(p_0_in[1]),
        .I2(p_0_in[3]),
        .I3(fsync_vc0_rst_reg1),
        .I4(cur_lp_vc[0]),
        .O(fsync_vc3_rst_reg_i_2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFF7)) 
    fsync_vc3_rst_reg_i_3
       (.I0(cur_lp_dtype[1]),
        .I1(cur_lp_dtype[4]),
        .I2(cur_lp_dtype[3]),
        .I3(cur_lp_dtype[0]),
        .I4(cur_lp_dtype[2]),
        .I5(cur_lp_dtype[5]),
        .O(fsync_vc0_rst_reg1));
  FDRE fsync_vc3_rst_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(fsync_vc3_rst_reg0),
        .Q(fsync_vc3_rst_reg),
        .R(srst));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT5 #(
    .INIT(32'hBFFFAAAA)) 
    hunt_ecccrc_i_1
       (.I0(blk_rd0),
        .I1(m_axis_tlast),
        .I2(m_axis_tvalid),
        .I3(m_axis_tready),
        .I4(hunt_ecccrc),
        .O(hunt_ecccrc_i_1_n_0));
  FDRE hunt_ecccrc_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(hunt_ecccrc_i_1_n_0),
        .Q(hunt_ecccrc),
        .R(srst));
  LUT5 #(
    .INIT(32'h0000000B)) 
    lbuf_i_1
       (.I0(m_axis_tready),
        .I1(m_axis_tvalid),
        .I2(empty),
        .I3(hunt_ecccrc),
        .I4(blk_rd0),
        .O(rd_en));
  LUT6 #(
    .INIT(64'h8000800080000000)) 
    lbuf_i_2
       (.I0(p_0_in[1]),
        .I1(p_0_in[2]),
        .I2(p_0_in[0]),
        .I3(p_0_in[3]),
        .I4(mem_rvld),
        .I5(pend_data),
        .O(blk_rd0));
  LUT1 #(
    .INIT(2'h1)) 
    \m_axis_tdata[63]_i_1 
       (.I0(m_axis_aresetn),
        .O(srst));
  LUT6 #(
    .INIT(64'h4000000C00000000)) 
    \m_axis_tdata[63]_i_2 
       (.I0(p_0_in[0]),
        .I1(m_axis_tvalid_i_3_n_0),
        .I2(p_0_in[3]),
        .I3(p_0_in[1]),
        .I4(p_0_in[2]),
        .I5(p_1_in),
        .O(\m_axis_tdata[63]_i_2_n_0 ));
  FDRE \m_axis_tdata_reg[0] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[0] ),
        .Q(m_axis_tdata[0]),
        .R(srst));
  FDRE \m_axis_tdata_reg[10] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[2]),
        .Q(m_axis_tdata[10]),
        .R(srst));
  FDRE \m_axis_tdata_reg[11] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[3]),
        .Q(m_axis_tdata[11]),
        .R(srst));
  FDRE \m_axis_tdata_reg[12] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[4]),
        .Q(m_axis_tdata[12]),
        .R(srst));
  FDRE \m_axis_tdata_reg[13] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[5]),
        .Q(m_axis_tdata[13]),
        .R(srst));
  FDRE \m_axis_tdata_reg[14] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[6]),
        .Q(m_axis_tdata[14]),
        .R(srst));
  FDRE \m_axis_tdata_reg[15] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[7]),
        .Q(m_axis_tdata[15]),
        .R(srst));
  FDRE \m_axis_tdata_reg[16] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[8]),
        .Q(m_axis_tdata[16]),
        .R(srst));
  FDRE \m_axis_tdata_reg[17] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[9]),
        .Q(m_axis_tdata[17]),
        .R(srst));
  FDRE \m_axis_tdata_reg[18] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[10]),
        .Q(m_axis_tdata[18]),
        .R(srst));
  FDRE \m_axis_tdata_reg[19] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[11]),
        .Q(m_axis_tdata[19]),
        .R(srst));
  FDRE \m_axis_tdata_reg[1] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[1] ),
        .Q(m_axis_tdata[1]),
        .R(srst));
  FDRE \m_axis_tdata_reg[20] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[12]),
        .Q(m_axis_tdata[20]),
        .R(srst));
  FDRE \m_axis_tdata_reg[21] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[13]),
        .Q(m_axis_tdata[21]),
        .R(srst));
  FDRE \m_axis_tdata_reg[22] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[14]),
        .Q(m_axis_tdata[22]),
        .R(srst));
  FDRE \m_axis_tdata_reg[23] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[15]),
        .Q(m_axis_tdata[23]),
        .R(srst));
  FDRE \m_axis_tdata_reg[24] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[24] ),
        .Q(m_axis_tdata[24]),
        .R(srst));
  FDRE \m_axis_tdata_reg[25] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[25] ),
        .Q(m_axis_tdata[25]),
        .R(srst));
  FDRE \m_axis_tdata_reg[26] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[26] ),
        .Q(m_axis_tdata[26]),
        .R(srst));
  FDRE \m_axis_tdata_reg[27] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[27] ),
        .Q(m_axis_tdata[27]),
        .R(srst));
  FDRE \m_axis_tdata_reg[28] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[28] ),
        .Q(m_axis_tdata[28]),
        .R(srst));
  FDRE \m_axis_tdata_reg[29] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[29] ),
        .Q(m_axis_tdata[29]),
        .R(srst));
  FDRE \m_axis_tdata_reg[2] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[2] ),
        .Q(m_axis_tdata[2]),
        .R(srst));
  FDRE \m_axis_tdata_reg[30] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[30] ),
        .Q(m_axis_tdata[30]),
        .R(srst));
  FDRE \m_axis_tdata_reg[31] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[31] ),
        .Q(m_axis_tdata[31]),
        .R(srst));
  FDRE \m_axis_tdata_reg[32] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[32] ),
        .Q(m_axis_tdata[32]),
        .R(srst));
  FDRE \m_axis_tdata_reg[33] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[33] ),
        .Q(m_axis_tdata[33]),
        .R(srst));
  FDRE \m_axis_tdata_reg[34] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[34] ),
        .Q(m_axis_tdata[34]),
        .R(srst));
  FDRE \m_axis_tdata_reg[35] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[35] ),
        .Q(m_axis_tdata[35]),
        .R(srst));
  FDRE \m_axis_tdata_reg[36] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[36] ),
        .Q(m_axis_tdata[36]),
        .R(srst));
  FDRE \m_axis_tdata_reg[37] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[37] ),
        .Q(m_axis_tdata[37]),
        .R(srst));
  FDRE \m_axis_tdata_reg[38] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[38] ),
        .Q(m_axis_tdata[38]),
        .R(srst));
  FDRE \m_axis_tdata_reg[39] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[39] ),
        .Q(m_axis_tdata[39]),
        .R(srst));
  FDRE \m_axis_tdata_reg[3] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[3] ),
        .Q(m_axis_tdata[3]),
        .R(srst));
  FDRE \m_axis_tdata_reg[40] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[40] ),
        .Q(m_axis_tdata[40]),
        .R(srst));
  FDRE \m_axis_tdata_reg[41] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[41] ),
        .Q(m_axis_tdata[41]),
        .R(srst));
  FDRE \m_axis_tdata_reg[42] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[42] ),
        .Q(m_axis_tdata[42]),
        .R(srst));
  FDRE \m_axis_tdata_reg[43] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[43] ),
        .Q(m_axis_tdata[43]),
        .R(srst));
  FDRE \m_axis_tdata_reg[44] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[44] ),
        .Q(m_axis_tdata[44]),
        .R(srst));
  FDRE \m_axis_tdata_reg[45] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[45] ),
        .Q(m_axis_tdata[45]),
        .R(srst));
  FDRE \m_axis_tdata_reg[46] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[46] ),
        .Q(m_axis_tdata[46]),
        .R(srst));
  FDRE \m_axis_tdata_reg[47] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[47] ),
        .Q(m_axis_tdata[47]),
        .R(srst));
  FDRE \m_axis_tdata_reg[48] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[48] ),
        .Q(m_axis_tdata[48]),
        .R(srst));
  FDRE \m_axis_tdata_reg[49] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[49] ),
        .Q(m_axis_tdata[49]),
        .R(srst));
  FDRE \m_axis_tdata_reg[4] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[4] ),
        .Q(m_axis_tdata[4]),
        .R(srst));
  FDRE \m_axis_tdata_reg[50] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[50] ),
        .Q(m_axis_tdata[50]),
        .R(srst));
  FDRE \m_axis_tdata_reg[51] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[51] ),
        .Q(m_axis_tdata[51]),
        .R(srst));
  FDRE \m_axis_tdata_reg[52] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[52] ),
        .Q(m_axis_tdata[52]),
        .R(srst));
  FDRE \m_axis_tdata_reg[53] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[53] ),
        .Q(m_axis_tdata[53]),
        .R(srst));
  FDRE \m_axis_tdata_reg[54] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[54] ),
        .Q(m_axis_tdata[54]),
        .R(srst));
  FDRE \m_axis_tdata_reg[55] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[55] ),
        .Q(m_axis_tdata[55]),
        .R(srst));
  FDRE \m_axis_tdata_reg[56] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[56] ),
        .Q(m_axis_tdata[56]),
        .R(srst));
  FDRE \m_axis_tdata_reg[57] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[57] ),
        .Q(m_axis_tdata[57]),
        .R(srst));
  FDRE \m_axis_tdata_reg[58] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[58] ),
        .Q(m_axis_tdata[58]),
        .R(srst));
  FDRE \m_axis_tdata_reg[59] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[59] ),
        .Q(m_axis_tdata[59]),
        .R(srst));
  FDRE \m_axis_tdata_reg[5] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[5] ),
        .Q(m_axis_tdata[5]),
        .R(srst));
  FDRE \m_axis_tdata_reg[60] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[60] ),
        .Q(m_axis_tdata[60]),
        .R(srst));
  FDRE \m_axis_tdata_reg[61] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[61] ),
        .Q(m_axis_tdata[61]),
        .R(srst));
  FDRE \m_axis_tdata_reg[62] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[62] ),
        .Q(m_axis_tdata[62]),
        .R(srst));
  FDRE \m_axis_tdata_reg[63] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(\mem_rdata_r_reg_n_0_[63] ),
        .Q(m_axis_tdata[63]),
        .R(srst));
  FDRE \m_axis_tdata_reg[6] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_vc[0]),
        .Q(m_axis_tdata[6]),
        .R(srst));
  FDRE \m_axis_tdata_reg[7] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_vc[1]),
        .Q(m_axis_tdata[7]),
        .R(srst));
  FDRE \m_axis_tdata_reg[8] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[0]),
        .Q(m_axis_tdata[8]),
        .R(srst));
  FDRE \m_axis_tdata_reg[9] 
       (.C(m_axis_aclk),
        .CE(\m_axis_tdata[63]_i_2_n_0 ),
        .D(mem_wc[1]),
        .Q(m_axis_tdata[9]),
        .R(srst));
  FDRE \m_axis_tdest_reg[0] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(cur_lp_vc[0]),
        .Q(m_axis_tdest[0]),
        .R(srst));
  FDRE \m_axis_tdest_reg[1] 
       (.C(m_axis_aclk),
        .CE(p_2_out),
        .D(cur_lp_vc[1]),
        .Q(m_axis_tdest[1]),
        .R(srst));
  LUT2 #(
    .INIT(4'hB)) 
    \m_axis_tkeep[0]_INST_0 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[0] ),
        .I1(m_axis_tlast),
        .O(m_axis_tkeep[0]));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axis_tkeep[1]_INST_0 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[1] ),
        .I1(m_axis_tlast),
        .O(m_axis_tkeep[1]));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axis_tkeep[2]_INST_0 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[2] ),
        .I1(m_axis_tlast),
        .O(m_axis_tkeep[2]));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axis_tkeep[3]_INST_0 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[3] ),
        .I1(m_axis_tlast),
        .O(m_axis_tkeep[3]));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axis_tkeep[4]_INST_0 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[4] ),
        .I1(m_axis_tlast),
        .O(m_axis_tkeep[4]));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axis_tkeep[5]_INST_0 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[5] ),
        .I1(m_axis_tlast),
        .O(m_axis_tkeep[5]));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axis_tkeep[6]_INST_0 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[6] ),
        .I1(m_axis_tlast),
        .O(m_axis_tkeep[6]));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \m_axis_tkeep[7]_INST_0 
       (.I0(\TSTRB_KEPP_64.m_axis_tkeep_i_reg_n_0_[7] ),
        .I1(m_axis_tlast),
        .O(m_axis_tkeep[7]));
  LUT6 #(
    .INIT(64'h00F0F0F0E000E0E0)) 
    m_axis_tlast_i_1
       (.I0(p_6_in),
        .I1(m_axis_tuser0),
        .I2(m_axis_aresetn),
        .I3(m_axis_tready),
        .I4(m_axis_tvalid),
        .I5(m_axis_tlast),
        .O(m_axis_tlast_i_1_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    m_axis_tlast_i_10
       (.I0(last_beat2[15]),
        .I1(\cur_lp_wc_reg_n_0_[15] ),
        .I2(last_beat2[14]),
        .I3(\cur_lp_wc_reg_n_0_[14] ),
        .O(m_axis_tlast_i_10_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    m_axis_tlast_i_11
       (.I0(last_beat2[13]),
        .I1(\cur_lp_wc_reg_n_0_[13] ),
        .I2(last_beat2[12]),
        .I3(\cur_lp_wc_reg_n_0_[12] ),
        .O(m_axis_tlast_i_11_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    m_axis_tlast_i_12
       (.I0(last_beat2[11]),
        .I1(\cur_lp_wc_reg_n_0_[11] ),
        .I2(last_beat2[10]),
        .I3(\cur_lp_wc_reg_n_0_[10] ),
        .O(m_axis_tlast_i_12_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    m_axis_tlast_i_13
       (.I0(last_beat2[9]),
        .I1(\cur_lp_wc_reg_n_0_[9] ),
        .I2(last_beat2[8]),
        .I3(\cur_lp_wc_reg_n_0_[8] ),
        .O(m_axis_tlast_i_13_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    m_axis_tlast_i_14
       (.I0(\cur_lp_wc_reg_n_0_[15] ),
        .I1(last_beat2[15]),
        .I2(\cur_lp_wc_reg_n_0_[14] ),
        .I3(last_beat2[14]),
        .O(m_axis_tlast_i_14_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    m_axis_tlast_i_15
       (.I0(\cur_lp_wc_reg_n_0_[13] ),
        .I1(last_beat2[13]),
        .I2(\cur_lp_wc_reg_n_0_[12] ),
        .I3(last_beat2[12]),
        .O(m_axis_tlast_i_15_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    m_axis_tlast_i_16
       (.I0(\cur_lp_wc_reg_n_0_[11] ),
        .I1(last_beat2[11]),
        .I2(\cur_lp_wc_reg_n_0_[10] ),
        .I3(last_beat2[10]),
        .O(m_axis_tlast_i_16_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    m_axis_tlast_i_17
       (.I0(\cur_lp_wc_reg_n_0_[9] ),
        .I1(last_beat2[9]),
        .I2(\cur_lp_wc_reg_n_0_[8] ),
        .I3(last_beat2[8]),
        .O(m_axis_tlast_i_17_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    m_axis_tlast_i_19
       (.I0(last_beat2[7]),
        .I1(\cur_lp_wc_reg_n_0_[7] ),
        .I2(last_beat2[6]),
        .I3(\cur_lp_wc_reg_n_0_[6] ),
        .O(m_axis_tlast_i_19_n_0));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT4 #(
    .INIT(16'hEAAA)) 
    m_axis_tlast_i_2
       (.I0(m_axis_tlast_i_4_n_0),
        .I1(last_beat1),
        .I2(m_axis_tvalid),
        .I3(m_axis_tready),
        .O(p_6_in));
  LUT4 #(
    .INIT(16'h22B2)) 
    m_axis_tlast_i_20
       (.I0(last_beat2[5]),
        .I1(\cur_lp_wc_reg_n_0_[5] ),
        .I2(last_beat2[4]),
        .I3(\cur_lp_wc_reg_n_0_[4] ),
        .O(m_axis_tlast_i_20_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    m_axis_tlast_i_21
       (.I0(last_beat2[3]),
        .I1(\cur_lp_wc_reg_n_0_[3] ),
        .O(m_axis_tlast_i_21_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    m_axis_tlast_i_22
       (.I0(\cur_lp_wc_reg_n_0_[7] ),
        .I1(last_beat2[7]),
        .I2(\cur_lp_wc_reg_n_0_[6] ),
        .I3(last_beat2[6]),
        .O(m_axis_tlast_i_22_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    m_axis_tlast_i_23
       (.I0(\cur_lp_wc_reg_n_0_[5] ),
        .I1(last_beat2[5]),
        .I2(\cur_lp_wc_reg_n_0_[4] ),
        .I3(last_beat2[4]),
        .O(m_axis_tlast_i_23_n_0));
  LUT3 #(
    .INIT(8'h41)) 
    m_axis_tlast_i_24
       (.I0(\cur_lp_wc_reg_n_0_[2] ),
        .I1(\cur_lp_wc_reg_n_0_[3] ),
        .I2(last_beat2[3]),
        .O(m_axis_tlast_i_24_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    m_axis_tlast_i_25
       (.I0(\cur_lp_wc_reg_n_0_[0] ),
        .I1(\cur_lp_wc_reg_n_0_[1] ),
        .O(m_axis_tlast_i_25_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    m_axis_tlast_i_28
       (.I0(bytes_sent_reg[4]),
        .O(m_axis_tlast_i_28_n_0));
  LUT6 #(
    .INIT(64'h0080000000000C00)) 
    m_axis_tlast_i_3
       (.I0(p_67_in),
        .I1(m_axis_tvalid_i_3_n_0),
        .I2(p_0_in[3]),
        .I3(p_0_in[0]),
        .I4(p_0_in[1]),
        .I5(p_0_in[2]),
        .O(m_axis_tuser0));
  LUT6 #(
    .INIT(64'h0000001000000000)) 
    m_axis_tlast_i_4
       (.I0(p_0_in[1]),
        .I1(p_0_in[2]),
        .I2(cur_lp_wc_lte4),
        .I3(p_0_in[0]),
        .I4(p_0_in[3]),
        .I5(mem_rvld),
        .O(m_axis_tlast_i_4_n_0));
  FDRE m_axis_tlast_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(m_axis_tlast_i_1_n_0),
        .Q(m_axis_tlast),
        .R(1'b0));
  CARRY4 m_axis_tlast_reg_i_18
       (.CI(m_axis_tlast_reg_i_26_n_0),
        .CO({m_axis_tlast_reg_i_18_n_0,m_axis_tlast_reg_i_18_n_1,m_axis_tlast_reg_i_18_n_2,m_axis_tlast_reg_i_18_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(last_beat2[14:11]),
        .S(bytes_sent_reg[14:11]));
  CARRY4 m_axis_tlast_reg_i_26
       (.CI(m_axis_tlast_reg_i_27_n_0),
        .CO({m_axis_tlast_reg_i_26_n_0,m_axis_tlast_reg_i_26_n_1,m_axis_tlast_reg_i_26_n_2,m_axis_tlast_reg_i_26_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(last_beat2[10:7]),
        .S(bytes_sent_reg[10:7]));
  CARRY4 m_axis_tlast_reg_i_27
       (.CI(1'b0),
        .CO({m_axis_tlast_reg_i_27_n_0,m_axis_tlast_reg_i_27_n_1,m_axis_tlast_reg_i_27_n_2,m_axis_tlast_reg_i_27_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,bytes_sent_reg[4],1'b0}),
        .O(last_beat2[6:3]),
        .S({bytes_sent_reg[6:5],m_axis_tlast_i_28_n_0,bytes_sent_reg[3]}));
  CARRY4 m_axis_tlast_reg_i_5
       (.CI(m_axis_tlast_reg_i_6_n_0),
        .CO({NLW_m_axis_tlast_reg_i_5_CO_UNCONNECTED[3:1],last_beat1}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,CO}),
        .O(NLW_m_axis_tlast_reg_i_5_O_UNCONNECTED[3:0]),
        .S({1'b0,1'b0,1'b0,S}));
  CARRY4 m_axis_tlast_reg_i_6
       (.CI(m_axis_tlast_reg_i_9_n_0),
        .CO({m_axis_tlast_reg_i_6_n_0,m_axis_tlast_reg_i_6_n_1,m_axis_tlast_reg_i_6_n_2,m_axis_tlast_reg_i_6_n_3}),
        .CYINIT(1'b0),
        .DI({m_axis_tlast_i_10_n_0,m_axis_tlast_i_11_n_0,m_axis_tlast_i_12_n_0,m_axis_tlast_i_13_n_0}),
        .O(NLW_m_axis_tlast_reg_i_6_O_UNCONNECTED[3:0]),
        .S({m_axis_tlast_i_14_n_0,m_axis_tlast_i_15_n_0,m_axis_tlast_i_16_n_0,m_axis_tlast_i_17_n_0}));
  CARRY4 m_axis_tlast_reg_i_7
       (.CI(m_axis_tlast_reg_i_18_n_0),
        .CO({NLW_m_axis_tlast_reg_i_7_CO_UNCONNECTED[3:2],CO,NLW_m_axis_tlast_reg_i_7_CO_UNCONNECTED[0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_m_axis_tlast_reg_i_7_O_UNCONNECTED[3:1],last_beat2[15]}),
        .S({1'b0,1'b0,1'b1,bytes_sent_reg[15]}));
  CARRY4 m_axis_tlast_reg_i_9
       (.CI(1'b0),
        .CO({m_axis_tlast_reg_i_9_n_0,m_axis_tlast_reg_i_9_n_1,m_axis_tlast_reg_i_9_n_2,m_axis_tlast_reg_i_9_n_3}),
        .CYINIT(1'b1),
        .DI({m_axis_tlast_i_19_n_0,m_axis_tlast_i_20_n_0,m_axis_tlast_i_21_n_0,1'b0}),
        .O(NLW_m_axis_tlast_reg_i_9_O_UNCONNECTED[3:0]),
        .S({m_axis_tlast_i_22_n_0,m_axis_tlast_i_23_n_0,m_axis_tlast_i_24_n_0,m_axis_tlast_i_25_n_0}));
  LUT6 #(
    .INIT(64'h0000B800B800B800)) 
    \m_axis_tuser[0]_i_1 
       (.I0(\m_axis_tuser[0]_i_2_n_0 ),
        .I1(p_2_out),
        .I2(m_axis_tuser[0]),
        .I3(m_axis_aresetn),
        .I4(m_axis_tready),
        .I5(m_axis_tvalid),
        .O(\m_axis_tuser[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \m_axis_tuser[0]_i_2 
       (.I0(fsync_vc2_int_reg),
        .I1(fsync_vc3_int_reg),
        .I2(fsync_vc0_int_reg),
        .I3(cur_lp_vc[1]),
        .I4(cur_lp_vc[0]),
        .I5(fsync_vc1_int_reg),
        .O(\m_axis_tuser[0]_i_2_n_0 ));
  FDRE \m_axis_tuser_reg[0] 
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(\m_axis_tuser[0]_i_1_n_0 ),
        .Q(m_axis_tuser[0]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h08FF000008080000)) 
    m_axis_tvalid_i_1
       (.I0(m_axis_tvalid_i_2_n_0),
        .I1(m_axis_tvalid_i_3_n_0),
        .I2(bytes_sent),
        .I3(p_1_in),
        .I4(m_axis_tvalid_i_4_n_0),
        .I5(m_axis_aresetn),
        .O(m_axis_tvalid_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT2 #(
    .INIT(4'hB)) 
    m_axis_tvalid_i_2
       (.I0(m_axis_tlast),
        .I1(p_6_in),
        .O(m_axis_tvalid_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT2 #(
    .INIT(4'hE)) 
    m_axis_tvalid_i_3
       (.I0(pend_data),
        .I1(mem_rvld),
        .O(m_axis_tvalid_i_3_n_0));
  LUT5 #(
    .INIT(32'hFFFFFBF8)) 
    m_axis_tvalid_i_4
       (.I0(blk_rd0),
        .I1(m_axis_tvalid_i_5_n_0),
        .I2(m_axis_tvalid_i_6_n_0),
        .I3(m_axis_tvalid_i_7_n_0),
        .I4(m_axis_tvalid),
        .O(m_axis_tvalid_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT5 #(
    .INIT(32'hFFFFFF80)) 
    m_axis_tvalid_i_5
       (.I0(m_axis_tready),
        .I1(m_axis_tvalid),
        .I2(last_beat1),
        .I3(m_axis_tlast_i_4_n_0),
        .I4(m_axis_tlast),
        .O(m_axis_tvalid_i_5_n_0));
  LUT6 #(
    .INIT(64'hEE0E000000000000)) 
    m_axis_tvalid_i_6
       (.I0(pend_data),
        .I1(mem_rvld),
        .I2(m_axis_tvalid),
        .I3(m_axis_tready),
        .I4(m_axis_tvalid_i_8_n_0),
        .I5(p_67_in),
        .O(m_axis_tvalid_i_6_n_0));
  LUT6 #(
    .INIT(64'h0002000200020000)) 
    m_axis_tvalid_i_7
       (.I0(p_1_in),
        .I1(p_0_in[2]),
        .I2(p_0_in[1]),
        .I3(p_0_in[3]),
        .I4(mem_rvld),
        .I5(pend_data),
        .O(m_axis_tvalid_i_7_n_0));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    m_axis_tvalid_i_8
       (.I0(p_0_in[2]),
        .I1(p_0_in[1]),
        .I2(p_0_in[0]),
        .I3(p_0_in[3]),
        .O(m_axis_tvalid_i_8_n_0));
  FDRE m_axis_tvalid_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(m_axis_tvalid_i_1_n_0),
        .Q(m_axis_tvalid),
        .R(1'b0));
  FDRE \mem_rdata_r_reg[0] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[0]),
        .Q(\mem_rdata_r_reg_n_0_[0] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[10] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[10]),
        .Q(mem_wc[2]),
        .R(srst));
  FDRE \mem_rdata_r_reg[11] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[11]),
        .Q(mem_wc[3]),
        .R(srst));
  FDRE \mem_rdata_r_reg[12] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[12]),
        .Q(mem_wc[4]),
        .R(srst));
  FDRE \mem_rdata_r_reg[13] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[13]),
        .Q(mem_wc[5]),
        .R(srst));
  FDRE \mem_rdata_r_reg[14] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[14]),
        .Q(mem_wc[6]),
        .R(srst));
  FDRE \mem_rdata_r_reg[15] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[15]),
        .Q(mem_wc[7]),
        .R(srst));
  FDRE \mem_rdata_r_reg[16] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[16]),
        .Q(mem_wc[8]),
        .R(srst));
  FDRE \mem_rdata_r_reg[17] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[17]),
        .Q(mem_wc[9]),
        .R(srst));
  FDRE \mem_rdata_r_reg[18] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[18]),
        .Q(mem_wc[10]),
        .R(srst));
  FDRE \mem_rdata_r_reg[19] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[19]),
        .Q(mem_wc[11]),
        .R(srst));
  FDRE \mem_rdata_r_reg[1] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[1]),
        .Q(\mem_rdata_r_reg_n_0_[1] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[20] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[20]),
        .Q(mem_wc[12]),
        .R(srst));
  FDRE \mem_rdata_r_reg[21] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[21]),
        .Q(mem_wc[13]),
        .R(srst));
  FDRE \mem_rdata_r_reg[22] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[22]),
        .Q(mem_wc[14]),
        .R(srst));
  FDRE \mem_rdata_r_reg[23] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[23]),
        .Q(mem_wc[15]),
        .R(srst));
  FDRE \mem_rdata_r_reg[24] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[24]),
        .Q(\mem_rdata_r_reg_n_0_[24] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[25] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[25]),
        .Q(\mem_rdata_r_reg_n_0_[25] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[26] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[26]),
        .Q(\mem_rdata_r_reg_n_0_[26] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[27] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[27]),
        .Q(\mem_rdata_r_reg_n_0_[27] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[28] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[28]),
        .Q(\mem_rdata_r_reg_n_0_[28] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[29] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[29]),
        .Q(\mem_rdata_r_reg_n_0_[29] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[2] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[2]),
        .Q(\mem_rdata_r_reg_n_0_[2] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[30] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[30]),
        .Q(\mem_rdata_r_reg_n_0_[30] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[31] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[31]),
        .Q(\mem_rdata_r_reg_n_0_[31] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[32] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[32]),
        .Q(\mem_rdata_r_reg_n_0_[32] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[33] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[33]),
        .Q(\mem_rdata_r_reg_n_0_[33] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[34] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[34]),
        .Q(\mem_rdata_r_reg_n_0_[34] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[35] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[35]),
        .Q(\mem_rdata_r_reg_n_0_[35] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[36] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[36]),
        .Q(\mem_rdata_r_reg_n_0_[36] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[37] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[37]),
        .Q(\mem_rdata_r_reg_n_0_[37] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[38] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[38]),
        .Q(\mem_rdata_r_reg_n_0_[38] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[39] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[39]),
        .Q(\mem_rdata_r_reg_n_0_[39] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[3] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[3]),
        .Q(\mem_rdata_r_reg_n_0_[3] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[40] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[40]),
        .Q(\mem_rdata_r_reg_n_0_[40] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[41] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[41]),
        .Q(\mem_rdata_r_reg_n_0_[41] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[42] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[42]),
        .Q(\mem_rdata_r_reg_n_0_[42] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[43] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[43]),
        .Q(\mem_rdata_r_reg_n_0_[43] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[44] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[44]),
        .Q(\mem_rdata_r_reg_n_0_[44] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[45] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[45]),
        .Q(\mem_rdata_r_reg_n_0_[45] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[46] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[46]),
        .Q(\mem_rdata_r_reg_n_0_[46] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[47] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[47]),
        .Q(\mem_rdata_r_reg_n_0_[47] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[48] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[48]),
        .Q(\mem_rdata_r_reg_n_0_[48] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[49] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[49]),
        .Q(\mem_rdata_r_reg_n_0_[49] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[4] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[4]),
        .Q(\mem_rdata_r_reg_n_0_[4] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[50] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[50]),
        .Q(\mem_rdata_r_reg_n_0_[50] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[51] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[51]),
        .Q(\mem_rdata_r_reg_n_0_[51] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[52] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[52]),
        .Q(\mem_rdata_r_reg_n_0_[52] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[53] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[53]),
        .Q(\mem_rdata_r_reg_n_0_[53] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[54] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[54]),
        .Q(\mem_rdata_r_reg_n_0_[54] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[55] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[55]),
        .Q(\mem_rdata_r_reg_n_0_[55] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[56] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[56]),
        .Q(\mem_rdata_r_reg_n_0_[56] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[57] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[57]),
        .Q(\mem_rdata_r_reg_n_0_[57] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[58] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[58]),
        .Q(\mem_rdata_r_reg_n_0_[58] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[59] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[59]),
        .Q(\mem_rdata_r_reg_n_0_[59] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[5] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[5]),
        .Q(\mem_rdata_r_reg_n_0_[5] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[60] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[60]),
        .Q(\mem_rdata_r_reg_n_0_[60] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[61] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[61]),
        .Q(\mem_rdata_r_reg_n_0_[61] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[62] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[62]),
        .Q(\mem_rdata_r_reg_n_0_[62] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[63] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[63]),
        .Q(\mem_rdata_r_reg_n_0_[63] ),
        .R(srst));
  FDRE \mem_rdata_r_reg[64] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[64]),
        .Q(p_0_in[0]),
        .R(srst));
  FDRE \mem_rdata_r_reg[65] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[65]),
        .Q(p_0_in[1]),
        .R(srst));
  FDRE \mem_rdata_r_reg[66] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[66]),
        .Q(p_0_in[2]),
        .R(srst));
  FDRE \mem_rdata_r_reg[67] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[67]),
        .Q(p_0_in[3]),
        .R(srst));
  FDRE \mem_rdata_r_reg[6] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[6]),
        .Q(mem_vc[0]),
        .R(srst));
  FDRE \mem_rdata_r_reg[7] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[7]),
        .Q(mem_vc[1]),
        .R(srst));
  FDRE \mem_rdata_r_reg[8] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[8]),
        .Q(mem_wc[0]),
        .R(srst));
  FDRE \mem_rdata_r_reg[9] 
       (.C(m_axis_aclk),
        .CE(p_1_in),
        .D(D[9]),
        .Q(mem_wc[1]),
        .R(srst));
  FDRE mem_rvld_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(rd_en),
        .Q(mem_rvld),
        .R(srst));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT4 #(
    .INIT(16'h3A2A)) 
    pend_data_i_1
       (.I0(pend_data),
        .I1(m_axis_tready),
        .I2(m_axis_tvalid),
        .I3(mem_rvld),
        .O(pend_data_i_1_n_0));
  FDRE pend_data_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(pend_data_i_1_n_0),
        .Q(pend_data),
        .R(srst));
  LUT4 #(
    .INIT(16'h0F02)) 
    strm_prgrs_reg_i_1
       (.I0(m_axis_tvalid),
        .I1(tvalid_d1),
        .I2(tlast_d1),
        .I3(strm_prgrs_reg),
        .O(p_67_in));
  FDRE strm_prgrs_reg_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(p_67_in),
        .Q(strm_prgrs_reg),
        .R(srst));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT3 #(
    .INIT(8'h80)) 
    tlast_d1_i_1
       (.I0(m_axis_tready),
        .I1(m_axis_tvalid),
        .I2(m_axis_tlast),
        .O(tlast_d1_i_1_n_0));
  FDRE tlast_d1_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(tlast_d1_i_1_n_0),
        .Q(tlast_d1),
        .R(srst));
  FDRE tvalid_d1_reg
       (.C(m_axis_aclk),
        .CE(1'b1),
        .D(m_axis_tvalid),
        .Q(tvalid_d1),
        .R(srst));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module bd_0ac3_rx_0_rd_bin_cntr
   (ram_full_comb,
    ram_empty_fb_i_reg,
    \gpr1.dout_i_reg[1] ,
    wr_en,
    E,
    FULL_FB,
    out,
    Q,
    \gcc0.gc0.count_reg[3] ,
    clk,
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] );
  output ram_full_comb;
  output ram_empty_fb_i_reg;
  output [3:0]\gpr1.dout_i_reg[1] ;
  input wr_en;
  input [0:0]E;
  input FULL_FB;
  input out;
  input [3:0]Q;
  input [3:0]\gcc0.gc0.count_reg[3] ;
  input clk;
  input \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ;

  wire [0:0]E;
  wire FULL_FB;
  wire [3:0]Q;
  wire clk;
  wire [3:0]\gcc0.gc0.count_reg[3] ;
  wire \gntv_or_sync_fifo.gl0.wr/gwss.wsts/comp0 ;
  wire \gntv_or_sync_fifo.gl0.wr/gwss.wsts/comp1 ;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire \grss.rsts/comp1 ;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ;
  wire out;
  wire [3:0]plusOp;
  wire ram_empty_fb_i_i_4_n_0;
  wire ram_empty_fb_i_i_5_n_0;
  wire ram_empty_fb_i_reg;
  wire ram_full_comb;
  wire ram_full_fb_i_i_3_n_0;
  wire [3:0]rd_pntr_plus1;
  wire wr_en;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[2]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(rd_pntr_plus1[0]),
        .Q(\gpr1.dout_i_reg[1] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(rd_pntr_plus1[1]),
        .Q(\gpr1.dout_i_reg[1] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(rd_pntr_plus1[2]),
        .Q(\gpr1.dout_i_reg[1] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(rd_pntr_plus1[3]),
        .Q(\gpr1.dout_i_reg[1] [3]));
  FDPE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .PRE(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .Q(rd_pntr_plus1[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(plusOp[1]),
        .Q(rd_pntr_plus1[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(plusOp[2]),
        .Q(rd_pntr_plus1[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(plusOp[3]),
        .Q(rd_pntr_plus1[3]));
  LUT6 #(
    .INIT(64'hFF0FFFFF88008888)) 
    ram_empty_fb_i_i_1
       (.I0(E),
        .I1(\grss.rsts/comp1 ),
        .I2(\gntv_or_sync_fifo.gl0.wr/gwss.wsts/comp0 ),
        .I3(FULL_FB),
        .I4(wr_en),
        .I5(out),
        .O(ram_empty_fb_i_reg));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT5 #(
    .INIT(32'h90090000)) 
    ram_empty_fb_i_i_2
       (.I0(Q[1]),
        .I1(rd_pntr_plus1[1]),
        .I2(Q[0]),
        .I3(rd_pntr_plus1[0]),
        .I4(ram_empty_fb_i_i_4_n_0),
        .O(\grss.rsts/comp1 ));
  LUT5 #(
    .INIT(32'h90090000)) 
    ram_empty_fb_i_i_3
       (.I0(Q[1]),
        .I1(\gpr1.dout_i_reg[1] [1]),
        .I2(Q[0]),
        .I3(\gpr1.dout_i_reg[1] [0]),
        .I4(ram_empty_fb_i_i_5_n_0),
        .O(\gntv_or_sync_fifo.gl0.wr/gwss.wsts/comp0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_fb_i_i_4
       (.I0(rd_pntr_plus1[2]),
        .I1(Q[2]),
        .I2(rd_pntr_plus1[3]),
        .I3(Q[3]),
        .O(ram_empty_fb_i_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_fb_i_i_5
       (.I0(\gpr1.dout_i_reg[1] [2]),
        .I1(Q[2]),
        .I2(\gpr1.dout_i_reg[1] [3]),
        .I3(Q[3]),
        .O(ram_empty_fb_i_i_5_n_0));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    ram_full_fb_i_i_1
       (.I0(wr_en),
        .I1(\gntv_or_sync_fifo.gl0.wr/gwss.wsts/comp1 ),
        .I2(\gntv_or_sync_fifo.gl0.wr/gwss.wsts/comp0 ),
        .I3(E),
        .I4(FULL_FB),
        .O(ram_full_comb));
  LUT5 #(
    .INIT(32'h90090000)) 
    ram_full_fb_i_i_2
       (.I0(\gcc0.gc0.count_reg[3] [1]),
        .I1(\gpr1.dout_i_reg[1] [1]),
        .I2(\gcc0.gc0.count_reg[3] [0]),
        .I3(\gpr1.dout_i_reg[1] [0]),
        .I4(ram_full_fb_i_i_3_n_0),
        .O(\gntv_or_sync_fifo.gl0.wr/gwss.wsts/comp1 ));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_fb_i_i_3
       (.I0(\gpr1.dout_i_reg[1] [2]),
        .I1(\gcc0.gc0.count_reg[3] [2]),
        .I2(\gpr1.dout_i_reg[1] [3]),
        .I3(\gcc0.gc0.count_reg[3] [3]),
        .O(ram_full_fb_i_i_3_n_0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module bd_0ac3_rx_0_rd_bin_cntr_19
   (ram_full_comb,
    ram_empty_fb_i_reg,
    \gpr1.dout_i_reg[1] ,
    wr_en,
    E,
    FULL_FB,
    out,
    Q,
    \gcc0.gc0.count_reg[3] ,
    clk,
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] );
  output ram_full_comb;
  output ram_empty_fb_i_reg;
  output [3:0]\gpr1.dout_i_reg[1] ;
  input wr_en;
  input [0:0]E;
  input FULL_FB;
  input out;
  input [3:0]Q;
  input [3:0]\gcc0.gc0.count_reg[3] ;
  input clk;
  input \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ;

  wire [0:0]E;
  wire FULL_FB;
  wire [3:0]Q;
  wire clk;
  wire [3:0]\gcc0.gc0.count_reg[3] ;
  wire \gntv_or_sync_fifo.gl0.wr/gwss.wsts/comp0 ;
  wire \gntv_or_sync_fifo.gl0.wr/gwss.wsts/comp1 ;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire \grss.rsts/comp1 ;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ;
  wire out;
  wire [3:0]plusOp;
  wire ram_empty_fb_i_i_4_n_0;
  wire ram_empty_fb_i_i_5_n_0;
  wire ram_empty_fb_i_reg;
  wire ram_full_comb;
  wire ram_full_fb_i_i_3_n_0;
  wire [3:0]rd_pntr_plus1;
  wire wr_en;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[2]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(rd_pntr_plus1[0]),
        .Q(\gpr1.dout_i_reg[1] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(rd_pntr_plus1[1]),
        .Q(\gpr1.dout_i_reg[1] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(rd_pntr_plus1[2]),
        .Q(\gpr1.dout_i_reg[1] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(rd_pntr_plus1[3]),
        .Q(\gpr1.dout_i_reg[1] [3]));
  FDPE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp[0]),
        .PRE(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .Q(rd_pntr_plus1[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(plusOp[1]),
        .Q(rd_pntr_plus1[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(plusOp[2]),
        .Q(rd_pntr_plus1[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(plusOp[3]),
        .Q(rd_pntr_plus1[3]));
  LUT6 #(
    .INIT(64'hFF0FFFFF88008888)) 
    ram_empty_fb_i_i_1
       (.I0(E),
        .I1(\grss.rsts/comp1 ),
        .I2(\gntv_or_sync_fifo.gl0.wr/gwss.wsts/comp0 ),
        .I3(FULL_FB),
        .I4(wr_en),
        .I5(out),
        .O(ram_empty_fb_i_reg));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h90090000)) 
    ram_empty_fb_i_i_2
       (.I0(Q[1]),
        .I1(rd_pntr_plus1[1]),
        .I2(Q[0]),
        .I3(rd_pntr_plus1[0]),
        .I4(ram_empty_fb_i_i_4_n_0),
        .O(\grss.rsts/comp1 ));
  LUT5 #(
    .INIT(32'h90090000)) 
    ram_empty_fb_i_i_3
       (.I0(Q[1]),
        .I1(\gpr1.dout_i_reg[1] [1]),
        .I2(Q[0]),
        .I3(\gpr1.dout_i_reg[1] [0]),
        .I4(ram_empty_fb_i_i_5_n_0),
        .O(\gntv_or_sync_fifo.gl0.wr/gwss.wsts/comp0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_fb_i_i_4
       (.I0(rd_pntr_plus1[2]),
        .I1(Q[2]),
        .I2(rd_pntr_plus1[3]),
        .I3(Q[3]),
        .O(ram_empty_fb_i_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_fb_i_i_5
       (.I0(\gpr1.dout_i_reg[1] [2]),
        .I1(Q[2]),
        .I2(\gpr1.dout_i_reg[1] [3]),
        .I3(Q[3]),
        .O(ram_empty_fb_i_i_5_n_0));
  LUT5 #(
    .INIT(32'h0FFF0088)) 
    ram_full_fb_i_i_1
       (.I0(wr_en),
        .I1(\gntv_or_sync_fifo.gl0.wr/gwss.wsts/comp1 ),
        .I2(\gntv_or_sync_fifo.gl0.wr/gwss.wsts/comp0 ),
        .I3(E),
        .I4(FULL_FB),
        .O(ram_full_comb));
  LUT5 #(
    .INIT(32'h90090000)) 
    ram_full_fb_i_i_2
       (.I0(\gcc0.gc0.count_reg[3] [1]),
        .I1(\gpr1.dout_i_reg[1] [1]),
        .I2(\gcc0.gc0.count_reg[3] [0]),
        .I3(\gpr1.dout_i_reg[1] [0]),
        .I4(ram_full_fb_i_i_3_n_0),
        .O(\gntv_or_sync_fifo.gl0.wr/gwss.wsts/comp1 ));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_fb_i_i_3
       (.I0(\gpr1.dout_i_reg[1] [2]),
        .I1(\gcc0.gc0.count_reg[3] [2]),
        .I2(\gpr1.dout_i_reg[1] [3]),
        .I3(\gcc0.gc0.count_reg[3] [3]),
        .O(ram_full_fb_i_i_3_n_0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module bd_0ac3_rx_0_rd_bin_cntr__parameterized0
   (ram_empty_i_reg,
    Q,
    \src_gray_ff_reg[4] ,
    \dest_out_bin_ff_reg[3] ,
    rd_en,
    out,
    \dest_out_bin_ff_reg[3]_0 ,
    WR_PNTR_RD,
    E,
    rd_clk,
    AR);
  output ram_empty_i_reg;
  output [2:0]Q;
  output [4:0]\src_gray_ff_reg[4] ;
  input \dest_out_bin_ff_reg[3] ;
  input rd_en;
  input out;
  input \dest_out_bin_ff_reg[3]_0 ;
  input [1:0]WR_PNTR_RD;
  input [0:0]E;
  input rd_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [2:0]Q;
  wire [1:0]WR_PNTR_RD;
  wire \dest_out_bin_ff_reg[3] ;
  wire \dest_out_bin_ff_reg[3]_0 ;
  wire out;
  wire [4:0]plusOp;
  wire ram_empty_i_i_3_n_0;
  wire ram_empty_i_i_4_n_0;
  wire ram_empty_i_reg;
  wire rd_clk;
  wire rd_en;
  wire [1:0]rd_pntr_plus1;
  wire [4:0]\src_gray_ff_reg[4] ;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .O(plusOp[1]));
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .I2(Q[0]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(Q[0]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[1]),
        .I3(Q[1]),
        .I4(Q[2]),
        .O(plusOp[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(rd_pntr_plus1[0]),
        .Q(\src_gray_ff_reg[4] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(rd_pntr_plus1[1]),
        .Q(\src_gray_ff_reg[4] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[0]),
        .Q(\src_gray_ff_reg[4] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[1]),
        .Q(\src_gray_ff_reg[4] [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[2]),
        .Q(\src_gray_ff_reg[4] [4]));
  FDPE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp[0]),
        .PRE(AR),
        .Q(rd_pntr_plus1[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[1]),
        .Q(rd_pntr_plus1[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[2]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[3]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[4]),
        .Q(Q[2]));
  LUT6 #(
    .INIT(64'h88F8888888888888)) 
    ram_empty_i_i_1
       (.I0(\dest_out_bin_ff_reg[3] ),
        .I1(ram_empty_i_i_3_n_0),
        .I2(rd_en),
        .I3(out),
        .I4(ram_empty_i_i_4_n_0),
        .I5(\dest_out_bin_ff_reg[3]_0 ),
        .O(ram_empty_i_reg));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_3
       (.I0(\src_gray_ff_reg[4] [0]),
        .I1(WR_PNTR_RD[0]),
        .I2(\src_gray_ff_reg[4] [1]),
        .I3(WR_PNTR_RD[1]),
        .O(ram_empty_i_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_4
       (.I0(rd_pntr_plus1[0]),
        .I1(WR_PNTR_RD[0]),
        .I2(rd_pntr_plus1[1]),
        .I3(WR_PNTR_RD[1]),
        .O(ram_empty_i_i_4_n_0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module bd_0ac3_rx_0_rd_bin_cntr__parameterized0_10
   (ram_empty_i_reg,
    Q,
    \src_gray_ff_reg[4] ,
    \dest_out_bin_ff_reg[3] ,
    rd_en,
    out,
    \dest_out_bin_ff_reg[3]_0 ,
    WR_PNTR_RD,
    E,
    rd_clk,
    AR);
  output ram_empty_i_reg;
  output [2:0]Q;
  output [4:0]\src_gray_ff_reg[4] ;
  input \dest_out_bin_ff_reg[3] ;
  input rd_en;
  input out;
  input \dest_out_bin_ff_reg[3]_0 ;
  input [1:0]WR_PNTR_RD;
  input [0:0]E;
  input rd_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [2:0]Q;
  wire [1:0]WR_PNTR_RD;
  wire \dest_out_bin_ff_reg[3] ;
  wire \dest_out_bin_ff_reg[3]_0 ;
  wire out;
  wire [4:0]plusOp;
  wire ram_empty_i_i_3_n_0;
  wire ram_empty_i_i_4_n_0;
  wire ram_empty_i_reg;
  wire rd_clk;
  wire rd_en;
  wire [1:0]rd_pntr_plus1;
  wire [4:0]\src_gray_ff_reg[4] ;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .O(plusOp[1]));
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .I2(Q[0]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(Q[0]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[1]),
        .I3(Q[1]),
        .I4(Q[2]),
        .O(plusOp[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(rd_pntr_plus1[0]),
        .Q(\src_gray_ff_reg[4] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(rd_pntr_plus1[1]),
        .Q(\src_gray_ff_reg[4] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[0]),
        .Q(\src_gray_ff_reg[4] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[1]),
        .Q(\src_gray_ff_reg[4] [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[2]),
        .Q(\src_gray_ff_reg[4] [4]));
  FDPE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp[0]),
        .PRE(AR),
        .Q(rd_pntr_plus1[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[1]),
        .Q(rd_pntr_plus1[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[2]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[3]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[4]),
        .Q(Q[2]));
  LUT6 #(
    .INIT(64'h88F8888888888888)) 
    ram_empty_i_i_1
       (.I0(\dest_out_bin_ff_reg[3] ),
        .I1(ram_empty_i_i_3_n_0),
        .I2(rd_en),
        .I3(out),
        .I4(ram_empty_i_i_4_n_0),
        .I5(\dest_out_bin_ff_reg[3]_0 ),
        .O(ram_empty_i_reg));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_3
       (.I0(\src_gray_ff_reg[4] [0]),
        .I1(WR_PNTR_RD[0]),
        .I2(\src_gray_ff_reg[4] [1]),
        .I3(WR_PNTR_RD[1]),
        .O(ram_empty_i_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_4
       (.I0(rd_pntr_plus1[0]),
        .I1(WR_PNTR_RD[0]),
        .I2(rd_pntr_plus1[1]),
        .I3(WR_PNTR_RD[1]),
        .O(ram_empty_i_i_4_n_0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module bd_0ac3_rx_0_rd_bin_cntr__parameterized1
   (S,
    Q,
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[8] ,
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[12] ,
    v1_reg,
    v1_reg_2,
    v1_reg_0,
    v1_reg_1,
    ram_empty_i_reg,
    ram_empty_i_reg_0,
    ram_empty_i_reg_1,
    ram_empty_i_reg_2,
    ram_empty_i_reg_3,
    ram_empty_i_reg_4,
    srst,
    E,
    clk,
    \gcc0.gc1.gsym.count_d1_reg[11] ,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    D);
  output [3:0]S;
  output [11:0]Q;
  output [3:0]\gdiff.gcry_1_sym.diff_pntr_pad_reg[8] ;
  output [3:0]\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] ;
  output [5:0]v1_reg;
  output [5:0]v1_reg_2;
  output [5:0]v1_reg_0;
  output [5:0]v1_reg_1;
  output ram_empty_i_reg;
  output ram_empty_i_reg_0;
  output ram_empty_i_reg_1;
  output ram_empty_i_reg_2;
  output ram_empty_i_reg_3;
  output ram_empty_i_reg_4;
  input srst;
  input [0:0]E;
  input clk;
  input [11:0]\gcc0.gc1.gsym.count_d1_reg[11] ;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]D;

  wire [11:0]D;
  wire [0:0]E;
  wire [11:0]Q;
  wire [3:0]S;
  wire clk;
  wire \gc0.count[0]_i_2_n_0 ;
  wire \gc0.count_reg[0]_i_1_n_0 ;
  wire \gc0.count_reg[0]_i_1_n_1 ;
  wire \gc0.count_reg[0]_i_1_n_2 ;
  wire \gc0.count_reg[0]_i_1_n_3 ;
  wire \gc0.count_reg[0]_i_1_n_4 ;
  wire \gc0.count_reg[0]_i_1_n_5 ;
  wire \gc0.count_reg[0]_i_1_n_6 ;
  wire \gc0.count_reg[0]_i_1_n_7 ;
  wire \gc0.count_reg[4]_i_1_n_0 ;
  wire \gc0.count_reg[4]_i_1_n_1 ;
  wire \gc0.count_reg[4]_i_1_n_2 ;
  wire \gc0.count_reg[4]_i_1_n_3 ;
  wire \gc0.count_reg[4]_i_1_n_4 ;
  wire \gc0.count_reg[4]_i_1_n_5 ;
  wire \gc0.count_reg[4]_i_1_n_6 ;
  wire \gc0.count_reg[4]_i_1_n_7 ;
  wire \gc0.count_reg[8]_i_1_n_1 ;
  wire \gc0.count_reg[8]_i_1_n_2 ;
  wire \gc0.count_reg[8]_i_1_n_3 ;
  wire \gc0.count_reg[8]_i_1_n_4 ;
  wire \gc0.count_reg[8]_i_1_n_5 ;
  wire \gc0.count_reg[8]_i_1_n_6 ;
  wire \gc0.count_reg[8]_i_1_n_7 ;
  wire [11:0]\gcc0.gc1.gsym.count_d1_reg[11] ;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [3:0]\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] ;
  wire [3:0]\gdiff.gcry_1_sym.diff_pntr_pad_reg[8] ;
  wire ram_empty_i_reg;
  wire ram_empty_i_reg_0;
  wire ram_empty_i_reg_1;
  wire ram_empty_i_reg_2;
  wire ram_empty_i_reg_3;
  wire ram_empty_i_reg_4;
  wire [11:0]rd_pntr_plus1;
  wire srst;
  wire [5:0]v1_reg;
  wire [5:0]v1_reg_0;
  wire [5:0]v1_reg_1;
  wire [5:0]v1_reg_2;
  wire [3:3]\NLW_gc0.count_reg[8]_i_1_CO_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_2 
       (.I0(rd_pntr_plus1[0]),
        .O(\gc0.count[0]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[0]),
        .Q(Q[0]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[10] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[10]),
        .Q(Q[10]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[11] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[11]),
        .Q(Q[11]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[1]),
        .Q(Q[1]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[2]),
        .Q(Q[2]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[3]),
        .Q(Q[3]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[4]),
        .Q(Q[4]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[5] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[5]),
        .Q(Q[5]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[6] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[6]),
        .Q(Q[6]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[7] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[7]),
        .Q(Q[7]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[8] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[8]),
        .Q(Q[8]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[9] 
       (.C(clk),
        .CE(E),
        .D(rd_pntr_plus1[9]),
        .Q(Q[9]),
        .R(srst));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(\gc0.count_reg[0]_i_1_n_7 ),
        .Q(rd_pntr_plus1[0]),
        .S(srst));
  CARRY4 \gc0.count_reg[0]_i_1 
       (.CI(1'b0),
        .CO({\gc0.count_reg[0]_i_1_n_0 ,\gc0.count_reg[0]_i_1_n_1 ,\gc0.count_reg[0]_i_1_n_2 ,\gc0.count_reg[0]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\gc0.count_reg[0]_i_1_n_4 ,\gc0.count_reg[0]_i_1_n_5 ,\gc0.count_reg[0]_i_1_n_6 ,\gc0.count_reg[0]_i_1_n_7 }),
        .S({rd_pntr_plus1[3:1],\gc0.count[0]_i_2_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[10] 
       (.C(clk),
        .CE(E),
        .D(\gc0.count_reg[8]_i_1_n_5 ),
        .Q(rd_pntr_plus1[10]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[11] 
       (.C(clk),
        .CE(E),
        .D(\gc0.count_reg[8]_i_1_n_4 ),
        .Q(rd_pntr_plus1[11]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .D(\gc0.count_reg[0]_i_1_n_6 ),
        .Q(rd_pntr_plus1[1]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .D(\gc0.count_reg[0]_i_1_n_5 ),
        .Q(rd_pntr_plus1[2]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .D(\gc0.count_reg[0]_i_1_n_4 ),
        .Q(rd_pntr_plus1[3]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(clk),
        .CE(E),
        .D(\gc0.count_reg[4]_i_1_n_7 ),
        .Q(rd_pntr_plus1[4]),
        .R(srst));
  CARRY4 \gc0.count_reg[4]_i_1 
       (.CI(\gc0.count_reg[0]_i_1_n_0 ),
        .CO({\gc0.count_reg[4]_i_1_n_0 ,\gc0.count_reg[4]_i_1_n_1 ,\gc0.count_reg[4]_i_1_n_2 ,\gc0.count_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\gc0.count_reg[4]_i_1_n_4 ,\gc0.count_reg[4]_i_1_n_5 ,\gc0.count_reg[4]_i_1_n_6 ,\gc0.count_reg[4]_i_1_n_7 }),
        .S(rd_pntr_plus1[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[5] 
       (.C(clk),
        .CE(E),
        .D(\gc0.count_reg[4]_i_1_n_6 ),
        .Q(rd_pntr_plus1[5]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[6] 
       (.C(clk),
        .CE(E),
        .D(\gc0.count_reg[4]_i_1_n_5 ),
        .Q(rd_pntr_plus1[6]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[7] 
       (.C(clk),
        .CE(E),
        .D(\gc0.count_reg[4]_i_1_n_4 ),
        .Q(rd_pntr_plus1[7]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[8] 
       (.C(clk),
        .CE(E),
        .D(\gc0.count_reg[8]_i_1_n_7 ),
        .Q(rd_pntr_plus1[8]),
        .R(srst));
  CARRY4 \gc0.count_reg[8]_i_1 
       (.CI(\gc0.count_reg[4]_i_1_n_0 ),
        .CO({\NLW_gc0.count_reg[8]_i_1_CO_UNCONNECTED [3],\gc0.count_reg[8]_i_1_n_1 ,\gc0.count_reg[8]_i_1_n_2 ,\gc0.count_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\gc0.count_reg[8]_i_1_n_4 ,\gc0.count_reg[8]_i_1_n_5 ,\gc0.count_reg[8]_i_1_n_6 ,\gc0.count_reg[8]_i_1_n_7 }),
        .S(rd_pntr_plus1[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[9] 
       (.C(clk),
        .CE(E),
        .D(\gc0.count_reg[8]_i_1_n_6 ),
        .Q(rd_pntr_plus1[9]),
        .R(srst));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1 
       (.I0(Q[0]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [0]),
        .I2(Q[1]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [1]),
        .O(v1_reg[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__0 
       (.I0(rd_pntr_plus1[0]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [0]),
        .I2(rd_pntr_plus1[1]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [1]),
        .O(v1_reg_2[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__1 
       (.I0(Q[0]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [0]),
        .I2(Q[1]),
        .I3(\gcc0.gc1.gsym.count_d1_reg[11] [1]),
        .O(v1_reg_0[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__2 
       (.I0(Q[0]),
        .I1(D[0]),
        .I2(Q[1]),
        .I3(D[1]),
        .O(v1_reg_1[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__3 
       (.I0(Q[0]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [0]),
        .I2(Q[1]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [1]),
        .O(ram_empty_i_reg));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1 
       (.I0(Q[2]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [2]),
        .I2(Q[3]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [3]),
        .O(v1_reg[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[2]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [2]),
        .I2(rd_pntr_plus1[3]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [3]),
        .O(v1_reg_2[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__1 
       (.I0(Q[2]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [2]),
        .I2(Q[3]),
        .I3(\gcc0.gc1.gsym.count_d1_reg[11] [3]),
        .O(v1_reg_0[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__2 
       (.I0(Q[2]),
        .I1(D[2]),
        .I2(Q[3]),
        .I3(D[3]),
        .O(v1_reg_1[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__3 
       (.I0(Q[2]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [2]),
        .I2(Q[3]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [3]),
        .O(ram_empty_i_reg_0));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1 
       (.I0(Q[4]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [4]),
        .I2(Q[5]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [5]),
        .O(v1_reg[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[4]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [4]),
        .I2(rd_pntr_plus1[5]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [5]),
        .O(v1_reg_2[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__1 
       (.I0(Q[4]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [4]),
        .I2(Q[5]),
        .I3(\gcc0.gc1.gsym.count_d1_reg[11] [5]),
        .O(v1_reg_0[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__2 
       (.I0(Q[4]),
        .I1(D[4]),
        .I2(Q[5]),
        .I3(D[5]),
        .O(v1_reg_1[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__3 
       (.I0(Q[4]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [4]),
        .I2(Q[5]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [5]),
        .O(ram_empty_i_reg_1));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1 
       (.I0(Q[6]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [6]),
        .I2(Q[7]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [7]),
        .O(v1_reg[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[6]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [6]),
        .I2(rd_pntr_plus1[7]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [7]),
        .O(v1_reg_2[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__1 
       (.I0(Q[6]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [6]),
        .I2(Q[7]),
        .I3(\gcc0.gc1.gsym.count_d1_reg[11] [7]),
        .O(v1_reg_0[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__2 
       (.I0(Q[6]),
        .I1(D[6]),
        .I2(Q[7]),
        .I3(D[7]),
        .O(v1_reg_1[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__3 
       (.I0(Q[6]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [6]),
        .I2(Q[7]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [7]),
        .O(ram_empty_i_reg_2));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1 
       (.I0(Q[8]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [8]),
        .I2(Q[9]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [9]),
        .O(v1_reg[4]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[8]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [8]),
        .I2(rd_pntr_plus1[9]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [9]),
        .O(v1_reg_2[4]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1__1 
       (.I0(Q[8]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [8]),
        .I2(Q[9]),
        .I3(\gcc0.gc1.gsym.count_d1_reg[11] [9]),
        .O(v1_reg_0[4]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1__2 
       (.I0(Q[8]),
        .I1(D[8]),
        .I2(Q[9]),
        .I3(D[9]),
        .O(v1_reg_1[4]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[4].gms.ms_i_1__3 
       (.I0(Q[8]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [8]),
        .I2(Q[9]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [9]),
        .O(ram_empty_i_reg_3));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[5].gms.ms_i_1 
       (.I0(Q[10]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [10]),
        .I2(Q[11]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [11]),
        .O(v1_reg[5]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[5].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1[10]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [10]),
        .I2(rd_pntr_plus1[11]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [11]),
        .O(v1_reg_2[5]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[5].gms.ms_i_1__1 
       (.I0(Q[10]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [10]),
        .I2(Q[11]),
        .I3(\gcc0.gc1.gsym.count_d1_reg[11] [11]),
        .O(v1_reg_0[5]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[5].gms.ms_i_1__2 
       (.I0(Q[10]),
        .I1(D[10]),
        .I2(Q[11]),
        .I3(D[11]),
        .O(v1_reg_1[5]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[5].gms.ms_i_1__3 
       (.I0(Q[10]),
        .I1(\gcc0.gc1.gsym.count_d2_reg[11] [10]),
        .I2(Q[11]),
        .I3(\gcc0.gc1.gsym.count_d2_reg[11] [11]),
        .O(ram_empty_i_reg_4));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_1
       (.I0(Q[7]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [7]),
        .O(\gdiff.gcry_1_sym.diff_pntr_pad_reg[8] [3]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_2
       (.I0(Q[6]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [6]),
        .O(\gdiff.gcry_1_sym.diff_pntr_pad_reg[8] [2]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_3
       (.I0(Q[5]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [5]),
        .O(\gdiff.gcry_1_sym.diff_pntr_pad_reg[8] [1]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_4
       (.I0(Q[4]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [4]),
        .O(\gdiff.gcry_1_sym.diff_pntr_pad_reg[8] [0]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__1_i_1
       (.I0(Q[11]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [11]),
        .O(\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] [3]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__1_i_2
       (.I0(Q[10]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [10]),
        .O(\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] [2]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__1_i_3
       (.I0(Q[9]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [9]),
        .O(\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] [1]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__1_i_4
       (.I0(Q[8]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [8]),
        .O(\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] [0]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_2
       (.I0(Q[3]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [3]),
        .O(S[3]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_3
       (.I0(Q[2]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [2]),
        .O(S[2]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_4
       (.I0(Q[1]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [1]),
        .O(S[1]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_5
       (.I0(Q[0]),
        .I1(\gcc0.gc1.gsym.count_d1_reg[11] [0]),
        .O(S[0]));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module bd_0ac3_rx_0_rd_fwft
   (empty,
    E,
    \goreg_dm.dout_i_reg[11] ,
    \gc0.count_d1_reg[3] ,
    clk,
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ,
    rd_en,
    out);
  output empty;
  output [0:0]E;
  output [0:0]\goreg_dm.dout_i_reg[11] ;
  output [0:0]\gc0.count_d1_reg[3] ;
  input clk;
  input \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ;
  input rd_en;
  input out;

  wire [0:0]E;
  (* DONT_TOUCH *) wire aempty_fwft_fb_i;
  (* DONT_TOUCH *) wire aempty_fwft_i;
  wire aempty_fwft_i0;
  wire clk;
  (* DONT_TOUCH *) wire [1:0]curr_fwft_state;
  (* DONT_TOUCH *) wire empty_fwft_fb_i;
  (* DONT_TOUCH *) wire empty_fwft_fb_o_i;
  wire empty_fwft_fb_o_i0;
  (* DONT_TOUCH *) wire empty_fwft_i;
  wire empty_fwft_i0;
  wire [0:0]\gc0.count_d1_reg[3] ;
  wire [0:0]\goreg_dm.dout_i_reg[11] ;
  wire [1:0]next_fwft_state;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ;
  wire out;
  wire rd_en;
  (* DONT_TOUCH *) wire user_valid;

  assign empty = empty_fwft_i;
  LUT5 #(
    .INIT(32'hFFCB8000)) 
    aempty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(out),
        .I4(aempty_fwft_fb_i),
        .O(aempty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(aempty_fwft_i0),
        .PRE(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .Q(aempty_fwft_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(aempty_fwft_i0),
        .PRE(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .Q(aempty_fwft_i));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_i),
        .O(empty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .Q(empty_fwft_fb_i));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_o_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_o_i),
        .O(empty_fwft_fb_o_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_o_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_fb_o_i0),
        .PRE(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .Q(empty_fwft_fb_o_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .Q(empty_fwft_i));
  LUT4 #(
    .INIT(16'h4555)) 
    \gc0.count_d1[3]_i_1 
       (.I0(out),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(curr_fwft_state[0]),
        .O(\gc0.count_d1_reg[3] ));
  LUT3 #(
    .INIT(8'hA2)) 
    \goreg_dm.dout_i[11]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(curr_fwft_state[0]),
        .I2(rd_en),
        .O(\goreg_dm.dout_i_reg[11] ));
  LUT4 #(
    .INIT(16'h00F7)) 
    \gpr1.dout_i[11]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .I3(out),
        .O(E));
  LUT3 #(
    .INIT(8'hBA)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state[0]));
  LUT4 #(
    .INIT(16'h20FF)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(out),
        .O(next_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state[0]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(next_fwft_state[1]),
        .Q(curr_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(next_fwft_state[0]),
        .Q(user_valid));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module bd_0ac3_rx_0_rd_fwft_17
   (empty,
    E,
    \goreg_dm.dout_i_reg[11] ,
    \gc0.count_d1_reg[3] ,
    clk,
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ,
    rd_en,
    out);
  output empty;
  output [0:0]E;
  output [0:0]\goreg_dm.dout_i_reg[11] ;
  output [0:0]\gc0.count_d1_reg[3] ;
  input clk;
  input \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ;
  input rd_en;
  input out;

  wire [0:0]E;
  (* DONT_TOUCH *) wire aempty_fwft_fb_i;
  (* DONT_TOUCH *) wire aempty_fwft_i;
  wire aempty_fwft_i0;
  wire clk;
  (* DONT_TOUCH *) wire [1:0]curr_fwft_state;
  (* DONT_TOUCH *) wire empty_fwft_fb_i;
  (* DONT_TOUCH *) wire empty_fwft_fb_o_i;
  wire empty_fwft_fb_o_i0;
  (* DONT_TOUCH *) wire empty_fwft_i;
  wire empty_fwft_i0;
  wire [0:0]\gc0.count_d1_reg[3] ;
  wire [0:0]\goreg_dm.dout_i_reg[11] ;
  wire [1:0]next_fwft_state;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ;
  wire out;
  wire rd_en;
  (* DONT_TOUCH *) wire user_valid;

  assign empty = empty_fwft_i;
  LUT5 #(
    .INIT(32'hFFCB8000)) 
    aempty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(out),
        .I4(aempty_fwft_fb_i),
        .O(aempty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(aempty_fwft_i0),
        .PRE(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .Q(aempty_fwft_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(aempty_fwft_i0),
        .PRE(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .Q(aempty_fwft_i));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_i),
        .O(empty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .Q(empty_fwft_fb_i));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_o_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_o_i),
        .O(empty_fwft_fb_o_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_o_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_fb_o_i0),
        .PRE(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .Q(empty_fwft_fb_o_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .Q(empty_fwft_i));
  LUT4 #(
    .INIT(16'h4555)) 
    \gc0.count_d1[3]_i_1 
       (.I0(out),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(curr_fwft_state[0]),
        .O(\gc0.count_d1_reg[3] ));
  LUT3 #(
    .INIT(8'hA2)) 
    \goreg_dm.dout_i[11]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(curr_fwft_state[0]),
        .I2(rd_en),
        .O(\goreg_dm.dout_i_reg[11] ));
  LUT4 #(
    .INIT(16'h00F7)) 
    \gpr1.dout_i[11]_i_1 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(rd_en),
        .I3(out),
        .O(E));
  LUT3 #(
    .INIT(8'hBA)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state[0]));
  LUT4 #(
    .INIT(16'h20FF)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(out),
        .O(next_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state[0]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(next_fwft_state[1]),
        .Q(curr_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .D(next_fwft_state[0]),
        .Q(user_valid));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module bd_0ac3_rx_0_rd_fwft__parameterized0
   (empty,
    out,
    tmp_ram_regout_en,
    p_1_out,
    tmp_ram_rd_en,
    E,
    O,
    \count_reg[7] ,
    \count_reg[11] ,
    \count_reg[12] ,
    srst,
    clk,
    rd_en,
    ram_empty_fb_i_reg,
    data_count,
    ram_full_fb_i_reg,
    wr_en,
    DI);
  output empty;
  output out;
  output tmp_ram_regout_en;
  output p_1_out;
  output tmp_ram_rd_en;
  output [0:0]E;
  output [3:0]O;
  output [3:0]\count_reg[7] ;
  output [3:0]\count_reg[11] ;
  output [0:0]\count_reg[12] ;
  input srst;
  input clk;
  input rd_en;
  input ram_empty_fb_i_reg;
  input [11:0]data_count;
  input ram_full_fb_i_reg;
  input wr_en;
  input [0:0]DI;

  wire [0:0]DI;
  wire [0:0]E;
  wire [3:0]O;
  (* DONT_TOUCH *) wire aempty_fwft_fb_i;
  (* DONT_TOUCH *) wire aempty_fwft_i;
  wire aempty_fwft_i0__1;
  wire clk;
  wire \count[11]_i_2_n_0 ;
  wire \count[11]_i_3_n_0 ;
  wire \count[11]_i_4_n_0 ;
  wire \count[11]_i_5_n_0 ;
  wire \count[12]_i_3_n_0 ;
  wire \count[3]_i_2_n_0 ;
  wire \count[3]_i_3_n_0 ;
  wire \count[3]_i_4_n_0 ;
  wire \count[3]_i_5_n_0 ;
  wire \count[3]_i_6_n_0 ;
  wire \count[7]_i_2_n_0 ;
  wire \count[7]_i_3_n_0 ;
  wire \count[7]_i_4_n_0 ;
  wire \count[7]_i_5_n_0 ;
  wire [3:0]\count_reg[11] ;
  wire \count_reg[11]_i_1_n_0 ;
  wire \count_reg[11]_i_1_n_1 ;
  wire \count_reg[11]_i_1_n_2 ;
  wire \count_reg[11]_i_1_n_3 ;
  wire [0:0]\count_reg[12] ;
  wire \count_reg[3]_i_1_n_0 ;
  wire \count_reg[3]_i_1_n_1 ;
  wire \count_reg[3]_i_1_n_2 ;
  wire \count_reg[3]_i_1_n_3 ;
  wire [3:0]\count_reg[7] ;
  wire \count_reg[7]_i_1_n_0 ;
  wire \count_reg[7]_i_1_n_1 ;
  wire \count_reg[7]_i_1_n_2 ;
  wire \count_reg[7]_i_1_n_3 ;
  (* DONT_TOUCH *) wire [1:0]curr_fwft_state;
  wire [11:0]data_count;
  (* DONT_TOUCH *) wire empty_fwft_fb_i;
  (* DONT_TOUCH *) wire empty_fwft_fb_o_i;
  wire empty_fwft_fb_o_i_reg0;
  (* DONT_TOUCH *) wire empty_fwft_i;
  wire empty_fwft_i0__1;
  wire [1:0]next_fwft_state;
  wire p_1_out;
  wire ram_empty_fb_i_reg;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  (* DONT_TOUCH *) wire user_valid;
  wire wr_en;
  wire [3:0]\NLW_count_reg[12]_i_2_CO_UNCONNECTED ;
  wire [3:1]\NLW_count_reg[12]_i_2_O_UNCONNECTED ;

  assign empty = empty_fwft_i;
  assign out = user_valid;
  LUT5 #(
    .INIT(32'hFFFF4555)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_2 
       (.I0(ram_empty_fb_i_reg),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(curr_fwft_state[0]),
        .I4(srst),
        .O(tmp_ram_rd_en));
  LUT4 #(
    .INIT(16'hFFB0)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_3 
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(srst),
        .O(tmp_ram_regout_en));
  LUT5 #(
    .INIT(32'hFFCB8000)) 
    aempty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(ram_empty_fb_i_reg),
        .I4(aempty_fwft_fb_i),
        .O(aempty_fwft_i0__1));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    aempty_fwft_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(aempty_fwft_i0__1),
        .Q(aempty_fwft_fb_i),
        .S(srst));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    aempty_fwft_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(aempty_fwft_i0__1),
        .Q(aempty_fwft_i),
        .S(srst));
  LUT3 #(
    .INIT(8'h78)) 
    \count[11]_i_2 
       (.I0(user_valid),
        .I1(rd_en),
        .I2(data_count[10]),
        .O(\count[11]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count[11]_i_3 
       (.I0(user_valid),
        .I1(rd_en),
        .I2(data_count[9]),
        .O(\count[11]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count[11]_i_4 
       (.I0(user_valid),
        .I1(rd_en),
        .I2(data_count[8]),
        .O(\count[11]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count[11]_i_5 
       (.I0(user_valid),
        .I1(rd_en),
        .I2(data_count[7]),
        .O(\count[11]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count[12]_i_3 
       (.I0(user_valid),
        .I1(rd_en),
        .I2(data_count[11]),
        .O(\count[12]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \count[3]_i_2 
       (.I0(user_valid),
        .I1(rd_en),
        .O(\count[3]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count[3]_i_3 
       (.I0(user_valid),
        .I1(rd_en),
        .I2(data_count[2]),
        .O(\count[3]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count[3]_i_4 
       (.I0(user_valid),
        .I1(rd_en),
        .I2(data_count[1]),
        .O(\count[3]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count[3]_i_5 
       (.I0(user_valid),
        .I1(rd_en),
        .I2(data_count[0]),
        .O(\count[3]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count[3]_i_6 
       (.I0(user_valid),
        .I1(rd_en),
        .I2(DI),
        .O(\count[3]_i_6_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count[7]_i_2 
       (.I0(user_valid),
        .I1(rd_en),
        .I2(data_count[6]),
        .O(\count[7]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count[7]_i_3 
       (.I0(user_valid),
        .I1(rd_en),
        .I2(data_count[5]),
        .O(\count[7]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count[7]_i_4 
       (.I0(user_valid),
        .I1(rd_en),
        .I2(data_count[4]),
        .O(\count[7]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \count[7]_i_5 
       (.I0(user_valid),
        .I1(rd_en),
        .I2(data_count[3]),
        .O(\count[7]_i_5_n_0 ));
  CARRY4 \count_reg[11]_i_1 
       (.CI(\count_reg[7]_i_1_n_0 ),
        .CO({\count_reg[11]_i_1_n_0 ,\count_reg[11]_i_1_n_1 ,\count_reg[11]_i_1_n_2 ,\count_reg[11]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI(data_count[10:7]),
        .O(\count_reg[11] ),
        .S({\count[11]_i_2_n_0 ,\count[11]_i_3_n_0 ,\count[11]_i_4_n_0 ,\count[11]_i_5_n_0 }));
  CARRY4 \count_reg[12]_i_2 
       (.CI(\count_reg[11]_i_1_n_0 ),
        .CO(\NLW_count_reg[12]_i_2_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_count_reg[12]_i_2_O_UNCONNECTED [3:1],\count_reg[12] }),
        .S({1'b0,1'b0,1'b0,\count[12]_i_3_n_0 }));
  CARRY4 \count_reg[3]_i_1 
       (.CI(1'b0),
        .CO({\count_reg[3]_i_1_n_0 ,\count_reg[3]_i_1_n_1 ,\count_reg[3]_i_1_n_2 ,\count_reg[3]_i_1_n_3 }),
        .CYINIT(\count[3]_i_2_n_0 ),
        .DI({data_count[2:0],DI}),
        .O(O),
        .S({\count[3]_i_3_n_0 ,\count[3]_i_4_n_0 ,\count[3]_i_5_n_0 ,\count[3]_i_6_n_0 }));
  CARRY4 \count_reg[7]_i_1 
       (.CI(\count_reg[3]_i_1_n_0 ),
        .CO({\count_reg[7]_i_1_n_0 ,\count_reg[7]_i_1_n_1 ,\count_reg[7]_i_1_n_2 ,\count_reg[7]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI(data_count[6:3]),
        .O(\count_reg[7] ),
        .S({\count[7]_i_2_n_0 ,\count[7]_i_3_n_0 ,\count[7]_i_4_n_0 ,\count[7]_i_5_n_0 }));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_i),
        .O(empty_fwft_i0__1));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    empty_fwft_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_i0__1),
        .Q(empty_fwft_fb_i),
        .S(srst));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_o_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_o_i),
        .O(empty_fwft_fb_o_i_reg0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    empty_fwft_fb_o_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_fb_o_i_reg0),
        .Q(empty_fwft_fb_o_i),
        .S(srst));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(empty_fwft_i0__1),
        .Q(empty_fwft_i),
        .S(srst));
  LUT3 #(
    .INIT(8'hBA)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state[0]));
  LUT4 #(
    .INIT(16'h20FF)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(ram_empty_fb_i_reg),
        .O(next_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state[0]),
        .R(srst));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(next_fwft_state[1]),
        .Q(curr_fwft_state[1]),
        .R(srst));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(clk),
        .CE(1'b1),
        .D(next_fwft_state[0]),
        .Q(user_valid),
        .R(srst));
  LUT4 #(
    .INIT(16'h4555)) 
    \greg.ram_rd_en_i_i_1 
       (.I0(ram_empty_fb_i_reg),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(curr_fwft_state[0]),
        .O(E));
  LUT6 #(
    .INIT(64'h4444444400004000)) 
    plusOp_carry_i_1
       (.I0(ram_full_fb_i_reg),
        .I1(wr_en),
        .I2(curr_fwft_state[0]),
        .I3(curr_fwft_state[1]),
        .I4(rd_en),
        .I5(ram_empty_fb_i_reg),
        .O(p_1_out));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module bd_0ac3_rx_0_rd_logic
   (empty,
    E,
    ram_full_comb,
    \gpr1.dout_i_reg[1] ,
    \goreg_dm.dout_i_reg[11] ,
    clk,
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ,
    rd_en,
    wr_en,
    FULL_FB,
    Q,
    \gcc0.gc0.count_reg[3] );
  output empty;
  output [0:0]E;
  output ram_full_comb;
  output [3:0]\gpr1.dout_i_reg[1] ;
  output [0:0]\goreg_dm.dout_i_reg[11] ;
  input clk;
  input \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ;
  input rd_en;
  input wr_en;
  input FULL_FB;
  input [3:0]Q;
  input [3:0]\gcc0.gc0.count_reg[3] ;

  wire [0:0]E;
  wire FULL_FB;
  wire [3:0]Q;
  wire clk;
  wire empty;
  wire [3:0]\gcc0.gc0.count_reg[3] ;
  wire [0:0]\goreg_dm.dout_i_reg[11] ;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ;
  wire p_2_out;
  wire p_8_out;
  wire ram_full_comb;
  wire rd_en;
  wire rpntr_n_1;
  wire wr_en;

  bd_0ac3_rx_0_rd_fwft \gr1.gr1_int.rfwft 
       (.E(E),
        .clk(clk),
        .empty(empty),
        .\gc0.count_d1_reg[3] (p_8_out),
        .\goreg_dm.dout_i_reg[11] (\goreg_dm.dout_i_reg[11] ),
        .\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] (\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .out(p_2_out),
        .rd_en(rd_en));
  bd_0ac3_rx_0_rd_status_flags_ss \grss.rsts 
       (.clk(clk),
        .\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] (\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .out(p_2_out),
        .ram_full_fb_i_reg(rpntr_n_1));
  bd_0ac3_rx_0_rd_bin_cntr rpntr
       (.E(p_8_out),
        .FULL_FB(FULL_FB),
        .Q(Q),
        .clk(clk),
        .\gcc0.gc0.count_reg[3] (\gcc0.gc0.count_reg[3] ),
        .\gpr1.dout_i_reg[1] (\gpr1.dout_i_reg[1] ),
        .\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] (\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .out(p_2_out),
        .ram_empty_fb_i_reg(rpntr_n_1),
        .ram_full_comb(ram_full_comb),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module bd_0ac3_rx_0_rd_logic_11
   (empty,
    E,
    ram_full_comb,
    \gpr1.dout_i_reg[1] ,
    \goreg_dm.dout_i_reg[11] ,
    clk,
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ,
    rd_en,
    wr_en,
    FULL_FB,
    Q,
    \gcc0.gc0.count_reg[3] );
  output empty;
  output [0:0]E;
  output ram_full_comb;
  output [3:0]\gpr1.dout_i_reg[1] ;
  output [0:0]\goreg_dm.dout_i_reg[11] ;
  input clk;
  input \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ;
  input rd_en;
  input wr_en;
  input FULL_FB;
  input [3:0]Q;
  input [3:0]\gcc0.gc0.count_reg[3] ;

  wire [0:0]E;
  wire FULL_FB;
  wire [3:0]Q;
  wire clk;
  wire empty;
  wire [3:0]\gcc0.gc0.count_reg[3] ;
  wire [0:0]\goreg_dm.dout_i_reg[11] ;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ;
  wire p_2_out;
  wire p_8_out;
  wire ram_full_comb;
  wire rd_en;
  wire rpntr_n_1;
  wire wr_en;

  bd_0ac3_rx_0_rd_fwft_17 \gr1.gr1_int.rfwft 
       (.E(E),
        .clk(clk),
        .empty(empty),
        .\gc0.count_d1_reg[3] (p_8_out),
        .\goreg_dm.dout_i_reg[11] (\goreg_dm.dout_i_reg[11] ),
        .\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] (\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .out(p_2_out),
        .rd_en(rd_en));
  bd_0ac3_rx_0_rd_status_flags_ss_18 \grss.rsts 
       (.clk(clk),
        .\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] (\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .out(p_2_out),
        .ram_full_fb_i_reg(rpntr_n_1));
  bd_0ac3_rx_0_rd_bin_cntr_19 rpntr
       (.E(p_8_out),
        .FULL_FB(FULL_FB),
        .Q(Q),
        .clk(clk),
        .\gcc0.gc0.count_reg[3] (\gcc0.gc0.count_reg[3] ),
        .\gpr1.dout_i_reg[1] (\gpr1.dout_i_reg[1] ),
        .\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] (\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .out(p_2_out),
        .ram_empty_fb_i_reg(rpntr_n_1),
        .ram_full_comb(ram_full_comb),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module bd_0ac3_rx_0_rd_logic__parameterized0
   (empty,
    E,
    Q,
    \src_gray_ff_reg[4] ,
    rd_clk,
    AR,
    rd_en,
    \dest_out_bin_ff_reg[3] ,
    \dest_out_bin_ff_reg[3]_0 ,
    WR_PNTR_RD);
  output empty;
  output [0:0]E;
  output [2:0]Q;
  output [4:0]\src_gray_ff_reg[4] ;
  input rd_clk;
  input [0:0]AR;
  input rd_en;
  input \dest_out_bin_ff_reg[3] ;
  input \dest_out_bin_ff_reg[3]_0 ;
  input [1:0]WR_PNTR_RD;

  wire [0:0]AR;
  wire [0:0]E;
  wire [2:0]Q;
  wire [1:0]WR_PNTR_RD;
  wire \dest_out_bin_ff_reg[3] ;
  wire \dest_out_bin_ff_reg[3]_0 ;
  wire empty;
  wire p_2_out;
  wire rd_clk;
  wire rd_en;
  wire rpntr_n_0;
  wire [4:0]\src_gray_ff_reg[4] ;

  bd_0ac3_rx_0_rd_status_flags_as \gras.rsts 
       (.AR(AR),
        .E(E),
        .empty(empty),
        .out(p_2_out),
        .ram_empty_fb_i_reg_0(rpntr_n_0),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
  bd_0ac3_rx_0_rd_bin_cntr__parameterized0 rpntr
       (.AR(AR),
        .E(E),
        .Q(Q),
        .WR_PNTR_RD(WR_PNTR_RD),
        .\dest_out_bin_ff_reg[3] (\dest_out_bin_ff_reg[3] ),
        .\dest_out_bin_ff_reg[3]_0 (\dest_out_bin_ff_reg[3]_0 ),
        .out(p_2_out),
        .ram_empty_i_reg(rpntr_n_0),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .\src_gray_ff_reg[4] (\src_gray_ff_reg[4] ));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module bd_0ac3_rx_0_rd_logic__parameterized0_5
   (empty,
    E,
    Q,
    \src_gray_ff_reg[4] ,
    rd_clk,
    AR,
    rd_en,
    \dest_out_bin_ff_reg[3] ,
    \dest_out_bin_ff_reg[3]_0 ,
    WR_PNTR_RD);
  output empty;
  output [0:0]E;
  output [2:0]Q;
  output [4:0]\src_gray_ff_reg[4] ;
  input rd_clk;
  input [0:0]AR;
  input rd_en;
  input \dest_out_bin_ff_reg[3] ;
  input \dest_out_bin_ff_reg[3]_0 ;
  input [1:0]WR_PNTR_RD;

  wire [0:0]AR;
  wire [0:0]E;
  wire [2:0]Q;
  wire [1:0]WR_PNTR_RD;
  wire \dest_out_bin_ff_reg[3] ;
  wire \dest_out_bin_ff_reg[3]_0 ;
  wire empty;
  wire p_2_out;
  wire rd_clk;
  wire rd_en;
  wire rpntr_n_0;
  wire [4:0]\src_gray_ff_reg[4] ;

  bd_0ac3_rx_0_rd_status_flags_as_9 \gras.rsts 
       (.AR(AR),
        .E(E),
        .empty(empty),
        .out(p_2_out),
        .ram_empty_fb_i_reg_0(rpntr_n_0),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
  bd_0ac3_rx_0_rd_bin_cntr__parameterized0_10 rpntr
       (.AR(AR),
        .E(E),
        .Q(Q),
        .WR_PNTR_RD(WR_PNTR_RD),
        .\dest_out_bin_ff_reg[3] (\dest_out_bin_ff_reg[3] ),
        .\dest_out_bin_ff_reg[3]_0 (\dest_out_bin_ff_reg[3]_0 ),
        .out(p_2_out),
        .ram_empty_i_reg(rpntr_n_0),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .\src_gray_ff_reg[4] (\src_gray_ff_reg[4] ));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module bd_0ac3_rx_0_rd_logic__parameterized1
   (empty,
    out,
    data_count,
    p_7_out,
    S,
    Q,
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[8] ,
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[12] ,
    tmp_ram_regout_en,
    p_1_out,
    v1_reg,
    tmp_ram_rd_en,
    v1_reg_0,
    v1_reg_1,
    srst,
    clk,
    cntr_en,
    \gcc0.gc1.gsym.count_d1_reg[11] ,
    rd_en,
    ram_full_fb_i_reg,
    wr_en,
    \gcc0.gc1.gsym.count_d2_reg[11] ,
    D);
  output empty;
  output out;
  output [11:0]data_count;
  output p_7_out;
  output [3:0]S;
  output [11:0]Q;
  output [3:0]\gdiff.gcry_1_sym.diff_pntr_pad_reg[8] ;
  output [3:0]\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] ;
  output tmp_ram_regout_en;
  output p_1_out;
  output [5:0]v1_reg;
  output tmp_ram_rd_en;
  output [5:0]v1_reg_0;
  output [5:0]v1_reg_1;
  input srst;
  input clk;
  input cntr_en;
  input [11:0]\gcc0.gc1.gsym.count_d1_reg[11] ;
  input rd_en;
  input ram_full_fb_i_reg;
  input wr_en;
  input [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  input [11:0]D;

  wire [11:0]D;
  wire [11:0]Q;
  wire [3:0]S;
  wire [5:0]\c2/v1_reg ;
  wire clk;
  wire cntr_en;
  wire [11:0]data_count;
  wire empty;
  wire [11:0]\gcc0.gc1.gsym.count_d1_reg[11] ;
  wire [11:0]\gcc0.gc1.gsym.count_d2_reg[11] ;
  wire [3:0]\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] ;
  wire [3:0]\gdiff.gcry_1_sym.diff_pntr_pad_reg[8] ;
  wire \gr1.gdcf.dc_n_3 ;
  wire \gr1.gr1_int.rfwft_n_10 ;
  wire \gr1.gr1_int.rfwft_n_11 ;
  wire \gr1.gr1_int.rfwft_n_12 ;
  wire \gr1.gr1_int.rfwft_n_13 ;
  wire \gr1.gr1_int.rfwft_n_14 ;
  wire \gr1.gr1_int.rfwft_n_15 ;
  wire \gr1.gr1_int.rfwft_n_16 ;
  wire \gr1.gr1_int.rfwft_n_17 ;
  wire \gr1.gr1_int.rfwft_n_18 ;
  wire \gr1.gr1_int.rfwft_n_6 ;
  wire \gr1.gr1_int.rfwft_n_7 ;
  wire \gr1.gr1_int.rfwft_n_8 ;
  wire \gr1.gr1_int.rfwft_n_9 ;
  wire out;
  wire p_1_out;
  wire p_2_out;
  wire p_7_out;
  wire ram_full_fb_i_reg;
  wire rd_en;
  wire rpntr_n_48;
  wire rpntr_n_49;
  wire rpntr_n_50;
  wire rpntr_n_51;
  wire rpntr_n_52;
  wire rpntr_n_53;
  wire srst;
  wire tmp_ram_rd_en;
  wire tmp_ram_regout_en;
  wire [5:0]v1_reg;
  wire [5:0]v1_reg_0;
  wire [5:0]v1_reg_1;
  wire wr_en;

  bd_0ac3_rx_0_dc_ss_fwft \gr1.gdcf.dc 
       (.DI({data_count[2:0],\gr1.gdcf.dc_n_3 }),
        .O({\gr1.gr1_int.rfwft_n_6 ,\gr1.gr1_int.rfwft_n_7 ,\gr1.gr1_int.rfwft_n_8 ,\gr1.gr1_int.rfwft_n_9 }),
        .clk(clk),
        .cntr_en(cntr_en),
        .\count_reg[11] ({\gr1.gr1_int.rfwft_n_14 ,\gr1.gr1_int.rfwft_n_15 ,\gr1.gr1_int.rfwft_n_16 ,\gr1.gr1_int.rfwft_n_17 }),
        .\count_reg[11]_0 (\gr1.gr1_int.rfwft_n_18 ),
        .\count_reg[7] ({\gr1.gr1_int.rfwft_n_10 ,\gr1.gr1_int.rfwft_n_11 ,\gr1.gr1_int.rfwft_n_12 ,\gr1.gr1_int.rfwft_n_13 }),
        .data_count(data_count[11:3]),
        .srst(srst));
  bd_0ac3_rx_0_rd_fwft__parameterized0 \gr1.gr1_int.rfwft 
       (.DI(\gr1.gdcf.dc_n_3 ),
        .E(p_7_out),
        .O({\gr1.gr1_int.rfwft_n_6 ,\gr1.gr1_int.rfwft_n_7 ,\gr1.gr1_int.rfwft_n_8 ,\gr1.gr1_int.rfwft_n_9 }),
        .clk(clk),
        .\count_reg[11] ({\gr1.gr1_int.rfwft_n_14 ,\gr1.gr1_int.rfwft_n_15 ,\gr1.gr1_int.rfwft_n_16 ,\gr1.gr1_int.rfwft_n_17 }),
        .\count_reg[12] (\gr1.gr1_int.rfwft_n_18 ),
        .\count_reg[7] ({\gr1.gr1_int.rfwft_n_10 ,\gr1.gr1_int.rfwft_n_11 ,\gr1.gr1_int.rfwft_n_12 ,\gr1.gr1_int.rfwft_n_13 }),
        .data_count(data_count),
        .empty(empty),
        .out(out),
        .p_1_out(p_1_out),
        .ram_empty_fb_i_reg(p_2_out),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .rd_en(rd_en),
        .srst(srst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .tmp_ram_regout_en(tmp_ram_regout_en),
        .wr_en(wr_en));
  bd_0ac3_rx_0_rd_status_flags_ss__parameterized0 \grss.rsts 
       (.E(p_7_out),
        .clk(clk),
        .\gc0.count_d1_reg[0] (rpntr_n_48),
        .\gc0.count_d1_reg[10] (rpntr_n_53),
        .\gc0.count_d1_reg[2] (rpntr_n_49),
        .\gc0.count_d1_reg[4] (rpntr_n_50),
        .\gc0.count_d1_reg[6] (rpntr_n_51),
        .\gc0.count_d1_reg[8] (rpntr_n_52),
        .out(p_2_out),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .srst(srst),
        .v1_reg(\c2/v1_reg ),
        .wr_en(wr_en));
  bd_0ac3_rx_0_rd_bin_cntr__parameterized1 rpntr
       (.D(D),
        .E(p_7_out),
        .Q(Q),
        .S(S),
        .clk(clk),
        .\gcc0.gc1.gsym.count_d1_reg[11] (\gcc0.gc1.gsym.count_d1_reg[11] ),
        .\gcc0.gc1.gsym.count_d2_reg[11] (\gcc0.gc1.gsym.count_d2_reg[11] ),
        .\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] (\gdiff.gcry_1_sym.diff_pntr_pad_reg[12] ),
        .\gdiff.gcry_1_sym.diff_pntr_pad_reg[8] (\gdiff.gcry_1_sym.diff_pntr_pad_reg[8] ),
        .ram_empty_i_reg(rpntr_n_48),
        .ram_empty_i_reg_0(rpntr_n_49),
        .ram_empty_i_reg_1(rpntr_n_50),
        .ram_empty_i_reg_2(rpntr_n_51),
        .ram_empty_i_reg_3(rpntr_n_52),
        .ram_empty_i_reg_4(rpntr_n_53),
        .srst(srst),
        .v1_reg(v1_reg),
        .v1_reg_0(v1_reg_0),
        .v1_reg_1(v1_reg_1),
        .v1_reg_2(\c2/v1_reg ));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module bd_0ac3_rx_0_rd_status_flags_as
   (empty,
    out,
    E,
    ram_empty_fb_i_reg_0,
    rd_clk,
    AR,
    rd_en);
  output empty;
  output out;
  output [0:0]E;
  input ram_empty_fb_i_reg_0;
  input rd_clk;
  input [0:0]AR;
  input rd_en;

  wire [0:0]AR;
  wire [0:0]E;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  wire ram_empty_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire rd_clk;
  wire rd_en;

  assign empty = ram_empty_i;
  assign out = ram_empty_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gpr1.dout_i[23]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .PRE(AR),
        .Q(ram_empty_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .PRE(AR),
        .Q(ram_empty_i));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module bd_0ac3_rx_0_rd_status_flags_as_9
   (empty,
    out,
    E,
    ram_empty_fb_i_reg_0,
    rd_clk,
    AR,
    rd_en);
  output empty;
  output out;
  output [0:0]E;
  input ram_empty_fb_i_reg_0;
  input rd_clk;
  input [0:0]AR;
  input rd_en;

  wire [0:0]AR;
  wire [0:0]E;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  wire ram_empty_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire rd_clk;
  wire rd_en;

  assign empty = ram_empty_i;
  assign out = ram_empty_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gpr1.dout_i[41]_i_1 
       (.I0(rd_en),
        .I1(ram_empty_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .PRE(AR),
        .Q(ram_empty_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .PRE(AR),
        .Q(ram_empty_i));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module bd_0ac3_rx_0_rd_status_flags_ss
   (out,
    ram_full_fb_i_reg,
    clk,
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] );
  output out;
  input ram_full_fb_i_reg;
  input clk;
  input \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ;

  wire clk;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_full_fb_i_reg;

  assign out = ram_empty_fb_i;
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_full_fb_i_reg),
        .PRE(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .Q(ram_empty_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_full_fb_i_reg),
        .PRE(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .Q(ram_empty_i));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module bd_0ac3_rx_0_rd_status_flags_ss_18
   (out,
    ram_full_fb_i_reg,
    clk,
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] );
  output out;
  input ram_full_fb_i_reg;
  input clk;
  input \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ;

  wire clk;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_full_fb_i_reg;

  assign out = ram_empty_fb_i;
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_full_fb_i_reg),
        .PRE(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .Q(ram_empty_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_full_fb_i_reg),
        .PRE(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] ),
        .Q(ram_empty_i));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_ss" *) 
module bd_0ac3_rx_0_rd_status_flags_ss__parameterized0
   (out,
    \gc0.count_d1_reg[0] ,
    \gc0.count_d1_reg[2] ,
    \gc0.count_d1_reg[4] ,
    \gc0.count_d1_reg[6] ,
    \gc0.count_d1_reg[8] ,
    \gc0.count_d1_reg[10] ,
    v1_reg,
    srst,
    clk,
    E,
    ram_full_fb_i_reg,
    wr_en);
  output out;
  input \gc0.count_d1_reg[0] ;
  input \gc0.count_d1_reg[2] ;
  input \gc0.count_d1_reg[4] ;
  input \gc0.count_d1_reg[6] ;
  input \gc0.count_d1_reg[8] ;
  input \gc0.count_d1_reg[10] ;
  input [5:0]v1_reg;
  input srst;
  input clk;
  input [0:0]E;
  input ram_full_fb_i_reg;
  input wr_en;

  wire [0:0]E;
  wire c2_n_0;
  wire clk;
  wire comp0;
  wire \gc0.count_d1_reg[0] ;
  wire \gc0.count_d1_reg[10] ;
  wire \gc0.count_d1_reg[2] ;
  wire \gc0.count_d1_reg[4] ;
  wire \gc0.count_d1_reg[6] ;
  wire \gc0.count_d1_reg[8] ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire ram_full_fb_i_reg;
  wire srst;
  wire [5:0]v1_reg;
  wire wr_en;

  assign out = ram_empty_fb_i;
  bd_0ac3_rx_0_compare__parameterized1_3 c1
       (.comp0(comp0),
        .\gc0.count_d1_reg[0] (\gc0.count_d1_reg[0] ),
        .\gc0.count_d1_reg[10] (\gc0.count_d1_reg[10] ),
        .\gc0.count_d1_reg[2] (\gc0.count_d1_reg[2] ),
        .\gc0.count_d1_reg[4] (\gc0.count_d1_reg[4] ),
        .\gc0.count_d1_reg[6] (\gc0.count_d1_reg[6] ),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ));
  bd_0ac3_rx_0_compare__parameterized1_4 c2
       (.E(E),
        .comp0(comp0),
        .out(ram_empty_fb_i),
        .ram_empty_i_reg(c2_n_0),
        .ram_full_fb_i_reg(ram_full_fb_i_reg),
        .v1_reg(v1_reg),
        .wr_en(wr_en));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c2_n_0),
        .Q(ram_empty_fb_i),
        .S(srst));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(c2_n_0),
        .Q(ram_empty_i),
        .S(srst));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module bd_0ac3_rx_0_reset_blk_ramfifo
   (AR,
    wr_rst_busy,
    rst,
    clk);
  output [0:0]AR;
  output wr_rst_busy;
  input rst;
  input clk;

  wire [0:0]AR;
  wire clk;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire [3:0]sckt_wr_rst_cc;
  wire wr_rst_busy;

  LUT3 #(
    .INIT(8'hFE)) 
    \goreg_dm.dout_i[11]_i_2 
       (.I0(sckt_wr_rst_cc[1]),
        .I1(sckt_wr_rst_cc[0]),
        .I2(rst_wr_reg2),
        .O(AR));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(rst_wr_reg2),
        .Q(sckt_wr_rst_cc[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[0]),
        .Q(sckt_wr_rst_cc[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[2] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[1]),
        .Q(sckt_wr_rst_cc[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[3] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[2]),
        .Q(sckt_wr_rst_cc[3]),
        .R(1'b0));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_async_rst__4 \ngwrdrst.grst.g7serrst.gnsckt_wrst.rst_wr_reg2_inst 
       (.dest_arst(rst_wr_reg2),
        .dest_clk(clk),
        .src_arst(rst));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    rd_rst_busy_INST_0
       (.I0(sckt_wr_rst_cc[2]),
        .I1(sckt_wr_rst_cc[3]),
        .I2(sckt_wr_rst_cc[0]),
        .I3(sckt_wr_rst_cc[1]),
        .I4(rst_wr_reg2),
        .O(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module bd_0ac3_rx_0_reset_blk_ramfifo__parameterized0
   (AR,
    \syncstages_ff_reg[0] ,
    wr_rst_busy,
    rst,
    wr_clk,
    rd_clk);
  output [0:0]AR;
  output [0:0]\syncstages_ff_reg[0] ;
  output wr_rst_busy;
  input rst;
  input wr_clk;
  input rd_clk;

  wire [0:0]AR;
  wire dest_out;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ;
  wire rd_clk;
  wire [3:0]rd_rst_wr_ext;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_rd_reg2;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire sckt_rd_rst_wr;
  wire [0:0]\syncstages_ff_reg[0] ;
  wire wr_clk;
  wire wr_rst_busy;
  wire [1:0]wr_rst_rd_ext;

  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(sckt_rd_rst_wr),
        .Q(rd_rst_wr_ext[0]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(rd_rst_wr_ext[0]),
        .Q(rd_rst_wr_ext[1]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(rd_rst_wr_ext[1]),
        .Q(rd_rst_wr_ext[2]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(rd_rst_wr_ext[2]),
        .Q(rd_rst_wr_ext[3]));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_async_rst \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rst_rd_reg2_inst 
       (.dest_arst(rst_rd_reg2),
        .dest_clk(rd_clk),
        .src_arst(rst));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1 
       (.I0(\syncstages_ff_reg[0] ),
        .I1(wr_rst_rd_ext[1]),
        .O(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ));
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ),
        .PRE(rst_rd_reg2),
        .Q(\syncstages_ff_reg[0] ));
  LUT3 #(
    .INIT(8'h8A)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1 
       (.I0(AR),
        .I1(rd_rst_wr_ext[0]),
        .I2(rd_rst_wr_ext[1]),
        .O(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ));
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ),
        .PRE(rst_wr_reg2),
        .Q(AR));
  LUT5 #(
    .INIT(32'hAAAA08AA)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1 
       (.I0(wr_rst_busy),
        .I1(rd_rst_wr_ext[1]),
        .I2(rd_rst_wr_ext[0]),
        .I3(rd_rst_wr_ext[3]),
        .I4(rd_rst_wr_ext[2]),
        .O(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ));
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ),
        .PRE(rst_wr_reg2),
        .Q(wr_rst_busy));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_rd_ext_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(rst_rd_reg2),
        .D(dest_out),
        .Q(wr_rst_rd_ext[0]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_rd_ext_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(rst_rd_reg2),
        .D(wr_rst_rd_ext[0]),
        .Q(wr_rst_rd_ext[1]));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__parameterized0 \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.xpm_cdc_single_inst_rrst_wr 
       (.dest_clk(wr_clk),
        .dest_out(sckt_rd_rst_wr),
        .src_clk(rd_clk),
        .src_in(\syncstages_ff_reg[0] ));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__parameterized0__4 \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.xpm_cdc_single_inst_wrst_rd 
       (.dest_clk(rd_clk),
        .dest_out(dest_out),
        .src_clk(wr_clk),
        .src_in(AR));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_async_rst__7 \ngwrdrst.grst.g7serrst.gnsckt_wrst.rst_wr_reg2_inst 
       (.dest_arst(rst_wr_reg2),
        .dest_clk(wr_clk),
        .src_arst(rst));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module bd_0ac3_rx_0_reset_blk_ramfifo__parameterized0__xdcDup__1
   (AR,
    \syncstages_ff_reg[0] ,
    wr_rst_busy,
    rst,
    wr_clk,
    rd_clk);
  output [0:0]AR;
  output [0:0]\syncstages_ff_reg[0] ;
  output wr_rst_busy;
  input rst;
  input wr_clk;
  input rd_clk;

  wire [0:0]AR;
  wire dest_out;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ;
  wire rd_clk;
  wire [3:0]rd_rst_wr_ext;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_rd_reg2;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire sckt_rd_rst_wr;
  wire [0:0]\syncstages_ff_reg[0] ;
  wire wr_clk;
  wire wr_rst_busy;
  wire [1:0]wr_rst_rd_ext;

  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(sckt_rd_rst_wr),
        .Q(rd_rst_wr_ext[0]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(rd_rst_wr_ext[0]),
        .Q(rd_rst_wr_ext[1]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(rd_rst_wr_ext[1]),
        .Q(rd_rst_wr_ext[2]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(rd_rst_wr_ext[2]),
        .Q(rd_rst_wr_ext[3]));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_async_rst__6 \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rst_rd_reg2_inst 
       (.dest_arst(rst_rd_reg2),
        .dest_clk(rd_clk),
        .src_arst(rst));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1 
       (.I0(\syncstages_ff_reg[0] ),
        .I1(wr_rst_rd_ext[1]),
        .O(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ));
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ),
        .PRE(rst_rd_reg2),
        .Q(\syncstages_ff_reg[0] ));
  LUT3 #(
    .INIT(8'h8A)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1 
       (.I0(AR),
        .I1(rd_rst_wr_ext[0]),
        .I2(rd_rst_wr_ext[1]),
        .O(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ));
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ),
        .PRE(rst_wr_reg2),
        .Q(AR));
  LUT5 #(
    .INIT(32'hAAAA08AA)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1 
       (.I0(wr_rst_busy),
        .I1(rd_rst_wr_ext[1]),
        .I2(rd_rst_wr_ext[0]),
        .I3(rd_rst_wr_ext[3]),
        .I4(rd_rst_wr_ext[2]),
        .O(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ));
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ),
        .PRE(rst_wr_reg2),
        .Q(wr_rst_busy));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_rd_ext_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(rst_rd_reg2),
        .D(dest_out),
        .Q(wr_rst_rd_ext[0]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_rd_ext_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(rst_rd_reg2),
        .D(wr_rst_rd_ext[0]),
        .Q(wr_rst_rd_ext[1]));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__parameterized0__3 \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.xpm_cdc_single_inst_rrst_wr 
       (.dest_clk(wr_clk),
        .dest_out(sckt_rd_rst_wr),
        .src_clk(rd_clk),
        .src_in(\syncstages_ff_reg[0] ));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_single__parameterized0__2 \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.xpm_cdc_single_inst_wrst_rd 
       (.dest_clk(rd_clk),
        .dest_out(dest_out),
        .src_clk(wr_clk),
        .src_in(AR));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_async_rst__5 \ngwrdrst.grst.g7serrst.gnsckt_wrst.rst_wr_reg2_inst 
       (.dest_arst(rst_wr_reg2),
        .dest_clk(wr_clk),
        .src_arst(rst));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module bd_0ac3_rx_0_reset_blk_ramfifo__xdcDup__1
   (AR,
    wr_rst_busy,
    rst,
    clk);
  output [0:0]AR;
  output wr_rst_busy;
  input rst;
  input clk;

  wire [0:0]AR;
  wire clk;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire [3:0]sckt_wr_rst_cc;
  wire wr_rst_busy;

  LUT3 #(
    .INIT(8'hFE)) 
    \goreg_dm.dout_i[11]_i_2 
       (.I0(sckt_wr_rst_cc[1]),
        .I1(sckt_wr_rst_cc[0]),
        .I2(rst_wr_reg2),
        .O(AR));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .D(rst_wr_reg2),
        .Q(sckt_wr_rst_cc[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[0]),
        .Q(sckt_wr_rst_cc[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[2] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[1]),
        .Q(sckt_wr_rst_cc[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gcc_rst.sckt_wr_rst_cc_reg[3] 
       (.C(clk),
        .CE(1'b1),
        .D(sckt_wr_rst_cc[2]),
        .Q(sckt_wr_rst_cc[3]),
        .R(1'b0));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  bd_0ac3_rx_0_xpm_cdc_async_rst__3 \ngwrdrst.grst.g7serrst.gnsckt_wrst.rst_wr_reg2_inst 
       (.dest_arst(rst_wr_reg2),
        .dest_clk(clk),
        .src_arst(rst));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    rd_rst_busy_INST_0
       (.I0(sckt_wr_rst_cc[2]),
        .I1(sckt_wr_rst_cc[3]),
        .I2(sckt_wr_rst_cc[0]),
        .I3(sckt_wr_rst_cc[1]),
        .I4(rst_wr_reg2),
        .O(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "updn_cntr" *) 
module bd_0ac3_rx_0_updn_cntr
   (DI,
    data_count,
    srst,
    cntr_en,
    O,
    clk,
    \count_reg[7]_0 ,
    \count_reg[11]_0 ,
    \count_reg[11]_1 );
  output [3:0]DI;
  output [8:0]data_count;
  input srst;
  input cntr_en;
  input [3:0]O;
  input clk;
  input [3:0]\count_reg[7]_0 ;
  input [3:0]\count_reg[11]_0 ;
  input [0:0]\count_reg[11]_1 ;

  wire [3:0]DI;
  wire [3:0]O;
  wire clk;
  wire cntr_en;
  wire [3:0]\count_reg[11]_0 ;
  wire [0:0]\count_reg[11]_1 ;
  wire [3:0]\count_reg[7]_0 ;
  wire [8:0]data_count;
  wire srst;

  FDRE #(
    .INIT(1'b0)) 
    \count_reg[0] 
       (.C(clk),
        .CE(cntr_en),
        .D(O[0]),
        .Q(DI[0]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[10] 
       (.C(clk),
        .CE(cntr_en),
        .D(\count_reg[11]_0 [2]),
        .Q(data_count[6]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[11] 
       (.C(clk),
        .CE(cntr_en),
        .D(\count_reg[11]_0 [3]),
        .Q(data_count[7]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[12] 
       (.C(clk),
        .CE(cntr_en),
        .D(\count_reg[11]_1 ),
        .Q(data_count[8]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[1] 
       (.C(clk),
        .CE(cntr_en),
        .D(O[1]),
        .Q(DI[1]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[2] 
       (.C(clk),
        .CE(cntr_en),
        .D(O[2]),
        .Q(DI[2]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[3] 
       (.C(clk),
        .CE(cntr_en),
        .D(O[3]),
        .Q(DI[3]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[4] 
       (.C(clk),
        .CE(cntr_en),
        .D(\count_reg[7]_0 [0]),
        .Q(data_count[0]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[5] 
       (.C(clk),
        .CE(cntr_en),
        .D(\count_reg[7]_0 [1]),
        .Q(data_count[1]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[6] 
       (.C(clk),
        .CE(cntr_en),
        .D(\count_reg[7]_0 [2]),
        .Q(data_count[2]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[7] 
       (.C(clk),
        .CE(cntr_en),
        .D(\count_reg[7]_0 [3]),
        .Q(data_count[3]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[8] 
       (.C(clk),
        .CE(cntr_en),
        .D(\count_reg[11]_0 [0]),
        .Q(data_count[4]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \count_reg[9] 
       (.C(clk),
        .CE(cntr_en),
        .D(\count_reg[11]_0 [1]),
        .Q(data_count[5]),
        .R(srst));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module bd_0ac3_rx_0_wr_bin_cntr
   (Q,
    \gpr1.dout_i_reg[1] ,
    E,
    clk,
    AR);
  output [3:0]Q;
  output [3:0]\gpr1.dout_i_reg[1] ;
  input [0:0]E;
  input clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire [3:0]plusOp__0;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc0.count[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(plusOp__0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[0]),
        .Q(\gpr1.dout_i_reg[1] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[1]),
        .Q(\gpr1.dout_i_reg[1] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[2]),
        .Q(\gpr1.dout_i_reg[1] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[3]),
        .Q(\gpr1.dout_i_reg[1] [3]));
  FDPE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .PRE(AR),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[3]),
        .Q(Q[3]));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module bd_0ac3_rx_0_wr_bin_cntr_16
   (Q,
    \gpr1.dout_i_reg[1] ,
    E,
    clk,
    AR);
  output [3:0]Q;
  output [3:0]\gpr1.dout_i_reg[1] ;
  input [0:0]E;
  input clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [3:0]Q;
  wire clk;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire [3:0]plusOp__0;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gcc0.gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gcc0.gc0.count[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gcc0.gc0.count[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(plusOp__0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[0] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[0]),
        .Q(\gpr1.dout_i_reg[1] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[1]),
        .Q(\gpr1.dout_i_reg[1] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[2]),
        .Q(\gpr1.dout_i_reg[1] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_d1_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(Q[3]),
        .Q(\gpr1.dout_i_reg[1] [3]));
  FDPE #(
    .INIT(1'b1)) 
    \gcc0.gc0.count_reg[0] 
       (.C(clk),
        .CE(E),
        .D(plusOp__0[0]),
        .PRE(AR),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[1] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[2] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gcc0.gc0.count_reg[3] 
       (.C(clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[3]),
        .Q(Q[3]));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module bd_0ac3_rx_0_wr_bin_cntr__parameterized0
   (ram_full_i_reg,
    Q,
    \gic0.gc0.count_d2_reg[1]_0 ,
    \src_gray_ff_reg[4] ,
    \dest_out_bin_ff_reg[0] ,
    wr_en,
    out,
    \dest_out_bin_ff_reg[0]_0 ,
    RD_PNTR_WR,
    E,
    wr_clk,
    AR);
  output ram_full_i_reg;
  output [1:0]Q;
  output [1:0]\gic0.gc0.count_d2_reg[1]_0 ;
  output [4:0]\src_gray_ff_reg[4] ;
  input \dest_out_bin_ff_reg[0] ;
  input wr_en;
  input out;
  input \dest_out_bin_ff_reg[0]_0 ;
  input [2:0]RD_PNTR_WR;
  input [0:0]E;
  input wr_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [1:0]Q;
  wire [2:0]RD_PNTR_WR;
  wire \dest_out_bin_ff_reg[0] ;
  wire \dest_out_bin_ff_reg[0]_0 ;
  wire [1:0]\gic0.gc0.count_d2_reg[1]_0 ;
  wire out;
  wire [4:2]p_14_out;
  wire [4:0]plusOp__0;
  wire ram_full_i_i_2_n_0;
  wire ram_full_i_i_5_n_0;
  wire ram_full_i_reg;
  wire [4:0]\src_gray_ff_reg[4] ;
  wire wr_clk;
  wire wr_en;
  wire [4:2]wr_pntr_plus2;

  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \gic0.gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(wr_pntr_plus2[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(wr_pntr_plus2[2]),
        .I3(wr_pntr_plus2[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gic0.gc0.count[4]_i_1 
       (.I0(wr_pntr_plus2[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(wr_pntr_plus2[3]),
        .I4(wr_pntr_plus2[4]),
        .O(plusOp__0[4]));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_d1_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(Q[0]),
        .PRE(AR),
        .Q(\gic0.gc0.count_d2_reg[1]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[1]),
        .Q(\gic0.gc0.count_d2_reg[1]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(wr_pntr_plus2[2]),
        .Q(p_14_out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(wr_pntr_plus2[3]),
        .Q(p_14_out[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(wr_pntr_plus2[4]),
        .Q(p_14_out[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc0.count_d2_reg[1]_0 [0]),
        .Q(\src_gray_ff_reg[4] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc0.count_d2_reg[1]_0 [1]),
        .Q(\src_gray_ff_reg[4] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(p_14_out[2]),
        .Q(\src_gray_ff_reg[4] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(p_14_out[3]),
        .Q(\src_gray_ff_reg[4] [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(p_14_out[4]),
        .Q(\src_gray_ff_reg[4] [4]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[0]),
        .Q(Q[0]));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp__0[1]),
        .PRE(AR),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[2]),
        .Q(wr_pntr_plus2[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[3]),
        .Q(wr_pntr_plus2[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[4]),
        .Q(wr_pntr_plus2[4]));
  LUT6 #(
    .INIT(64'h88F8888888888888)) 
    ram_full_i_i_1
       (.I0(ram_full_i_i_2_n_0),
        .I1(\dest_out_bin_ff_reg[0] ),
        .I2(wr_en),
        .I3(out),
        .I4(\dest_out_bin_ff_reg[0]_0 ),
        .I5(ram_full_i_i_5_n_0),
        .O(ram_full_i_reg));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_full_i_i_2
       (.I0(p_14_out[3]),
        .I1(RD_PNTR_WR[1]),
        .I2(p_14_out[2]),
        .I3(RD_PNTR_WR[0]),
        .I4(RD_PNTR_WR[2]),
        .I5(p_14_out[4]),
        .O(ram_full_i_i_2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_full_i_i_5
       (.I0(wr_pntr_plus2[3]),
        .I1(RD_PNTR_WR[1]),
        .I2(wr_pntr_plus2[2]),
        .I3(RD_PNTR_WR[0]),
        .I4(RD_PNTR_WR[2]),
        .I5(wr_pntr_plus2[4]),
        .O(ram_full_i_i_5_n_0));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module bd_0ac3_rx_0_wr_bin_cntr__parameterized0_8
   (ram_full_i_reg,
    Q,
    \gic0.gc0.count_d2_reg[1]_0 ,
    \src_gray_ff_reg[4] ,
    \dest_out_bin_ff_reg[0] ,
    wr_en,
    out,
    \dest_out_bin_ff_reg[0]_0 ,
    RD_PNTR_WR,
    E,
    wr_clk,
    AR);
  output ram_full_i_reg;
  output [1:0]Q;
  output [1:0]\gic0.gc0.count_d2_reg[1]_0 ;
  output [4:0]\src_gray_ff_reg[4] ;
  input \dest_out_bin_ff_reg[0] ;
  input wr_en;
  input out;
  input \dest_out_bin_ff_reg[0]_0 ;
  input [2:0]RD_PNTR_WR;
  input [0:0]E;
  input wr_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [1:0]Q;
  wire [2:0]RD_PNTR_WR;
  wire \dest_out_bin_ff_reg[0] ;
  wire \dest_out_bin_ff_reg[0]_0 ;
  wire [1:0]\gic0.gc0.count_d2_reg[1]_0 ;
  wire out;
  wire [4:2]p_14_out;
  wire [4:0]plusOp__0;
  wire ram_full_i_i_2_n_0;
  wire ram_full_i_i_5_n_0;
  wire ram_full_i_reg;
  wire [4:0]\src_gray_ff_reg[4] ;
  wire wr_clk;
  wire wr_en;
  wire [4:2]wr_pntr_plus2;

  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \gic0.gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(wr_pntr_plus2[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(wr_pntr_plus2[2]),
        .I3(wr_pntr_plus2[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gic0.gc0.count[4]_i_1 
       (.I0(wr_pntr_plus2[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(wr_pntr_plus2[3]),
        .I4(wr_pntr_plus2[4]),
        .O(plusOp__0[4]));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_d1_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(Q[0]),
        .PRE(AR),
        .Q(\gic0.gc0.count_d2_reg[1]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(Q[1]),
        .Q(\gic0.gc0.count_d2_reg[1]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(wr_pntr_plus2[2]),
        .Q(p_14_out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(wr_pntr_plus2[3]),
        .Q(p_14_out[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(wr_pntr_plus2[4]),
        .Q(p_14_out[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc0.count_d2_reg[1]_0 [0]),
        .Q(\src_gray_ff_reg[4] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc0.count_d2_reg[1]_0 [1]),
        .Q(\src_gray_ff_reg[4] [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(p_14_out[2]),
        .Q(\src_gray_ff_reg[4] [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(p_14_out[3]),
        .Q(\src_gray_ff_reg[4] [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(p_14_out[4]),
        .Q(\src_gray_ff_reg[4] [4]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[0]),
        .Q(Q[0]));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp__0[1]),
        .PRE(AR),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[2]),
        .Q(wr_pntr_plus2[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[3]),
        .Q(wr_pntr_plus2[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp__0[4]),
        .Q(wr_pntr_plus2[4]));
  LUT6 #(
    .INIT(64'h88F8888888888888)) 
    ram_full_i_i_1
       (.I0(ram_full_i_i_2_n_0),
        .I1(\dest_out_bin_ff_reg[0] ),
        .I2(wr_en),
        .I3(out),
        .I4(\dest_out_bin_ff_reg[0]_0 ),
        .I5(ram_full_i_i_5_n_0),
        .O(ram_full_i_reg));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_full_i_i_2
       (.I0(p_14_out[3]),
        .I1(RD_PNTR_WR[1]),
        .I2(p_14_out[2]),
        .I3(RD_PNTR_WR[0]),
        .I4(RD_PNTR_WR[2]),
        .I5(p_14_out[4]),
        .O(ram_full_i_i_2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    ram_full_i_i_5
       (.I0(wr_pntr_plus2[3]),
        .I1(RD_PNTR_WR[1]),
        .I2(wr_pntr_plus2[2]),
        .I3(RD_PNTR_WR[0]),
        .I4(RD_PNTR_WR[2]),
        .I5(wr_pntr_plus2[4]),
        .O(ram_full_i_i_5_n_0));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module bd_0ac3_rx_0_wr_bin_cntr__parameterized1
   (D,
    Q,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    srst,
    p_17_out,
    clk);
  output [11:0]D;
  output [11:0]Q;
  output [11:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input srst;
  input p_17_out;
  input clk;

  wire [11:0]D;
  wire [11:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [11:0]Q;
  wire clk;
  wire \gcc0.gc1.gsym.count[0]_i_2_n_0 ;
  wire \gcc0.gc1.gsym.count_reg[0]_i_1_n_0 ;
  wire \gcc0.gc1.gsym.count_reg[0]_i_1_n_1 ;
  wire \gcc0.gc1.gsym.count_reg[0]_i_1_n_2 ;
  wire \gcc0.gc1.gsym.count_reg[0]_i_1_n_3 ;
  wire \gcc0.gc1.gsym.count_reg[0]_i_1_n_4 ;
  wire \gcc0.gc1.gsym.count_reg[0]_i_1_n_5 ;
  wire \gcc0.gc1.gsym.count_reg[0]_i_1_n_6 ;
  wire \gcc0.gc1.gsym.count_reg[0]_i_1_n_7 ;
  wire \gcc0.gc1.gsym.count_reg[4]_i_1_n_0 ;
  wire \gcc0.gc1.gsym.count_reg[4]_i_1_n_1 ;
  wire \gcc0.gc1.gsym.count_reg[4]_i_1_n_2 ;
  wire \gcc0.gc1.gsym.count_reg[4]_i_1_n_3 ;
  wire \gcc0.gc1.gsym.count_reg[4]_i_1_n_4 ;
  wire \gcc0.gc1.gsym.count_reg[4]_i_1_n_5 ;
  wire \gcc0.gc1.gsym.count_reg[4]_i_1_n_6 ;
  wire \gcc0.gc1.gsym.count_reg[4]_i_1_n_7 ;
  wire \gcc0.gc1.gsym.count_reg[8]_i_1_n_1 ;
  wire \gcc0.gc1.gsym.count_reg[8]_i_1_n_2 ;
  wire \gcc0.gc1.gsym.count_reg[8]_i_1_n_3 ;
  wire \gcc0.gc1.gsym.count_reg[8]_i_1_n_4 ;
  wire \gcc0.gc1.gsym.count_reg[8]_i_1_n_5 ;
  wire \gcc0.gc1.gsym.count_reg[8]_i_1_n_6 ;
  wire \gcc0.gc1.gsym.count_reg[8]_i_1_n_7 ;
  wire p_17_out;
  wire srst;
  wire [3:3]\NLW_gcc0.gc1.gsym.count_reg[8]_i_1_CO_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \gcc0.gc1.gsym.count[0]_i_2 
       (.I0(D[0]),
        .O(\gcc0.gc1.gsym.count[0]_i_2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gcc0.gc1.gsym.count_d1_reg[0] 
       (.C(clk),
        .CE(p_17_out),
        .D(D[0]),
        .Q(Q[0]),
        .S(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[10] 
       (.C(clk),
        .CE(p_17_out),
        .D(D[10]),
        .Q(Q[10]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[11] 
       (.C(clk),
        .CE(p_17_out),
        .D(D[11]),
        .Q(Q[11]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[1] 
       (.C(clk),
        .CE(p_17_out),
        .D(D[1]),
        .Q(Q[1]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[2] 
       (.C(clk),
        .CE(p_17_out),
        .D(D[2]),
        .Q(Q[2]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[3] 
       (.C(clk),
        .CE(p_17_out),
        .D(D[3]),
        .Q(Q[3]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[4] 
       (.C(clk),
        .CE(p_17_out),
        .D(D[4]),
        .Q(Q[4]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[5] 
       (.C(clk),
        .CE(p_17_out),
        .D(D[5]),
        .Q(Q[5]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[6] 
       (.C(clk),
        .CE(p_17_out),
        .D(D[6]),
        .Q(Q[6]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[7] 
       (.C(clk),
        .CE(p_17_out),
        .D(D[7]),
        .Q(Q[7]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[8] 
       (.C(clk),
        .CE(p_17_out),
        .D(D[8]),
        .Q(Q[8]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d1_reg[9] 
       (.C(clk),
        .CE(p_17_out),
        .D(D[9]),
        .Q(Q[9]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[0] 
       (.C(clk),
        .CE(p_17_out),
        .D(Q[0]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [0]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[10] 
       (.C(clk),
        .CE(p_17_out),
        .D(Q[10]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [10]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[11] 
       (.C(clk),
        .CE(p_17_out),
        .D(Q[11]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [11]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[1] 
       (.C(clk),
        .CE(p_17_out),
        .D(Q[1]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [1]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[2] 
       (.C(clk),
        .CE(p_17_out),
        .D(Q[2]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [2]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[3] 
       (.C(clk),
        .CE(p_17_out),
        .D(Q[3]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [3]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[4] 
       (.C(clk),
        .CE(p_17_out),
        .D(Q[4]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [4]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[5] 
       (.C(clk),
        .CE(p_17_out),
        .D(Q[5]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [5]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[6] 
       (.C(clk),
        .CE(p_17_out),
        .D(Q[6]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [6]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[7] 
       (.C(clk),
        .CE(p_17_out),
        .D(Q[7]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [7]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[8] 
       (.C(clk),
        .CE(p_17_out),
        .D(Q[8]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [8]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_d2_reg[9] 
       (.C(clk),
        .CE(p_17_out),
        .D(Q[9]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [9]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[0] 
       (.C(clk),
        .CE(p_17_out),
        .D(\gcc0.gc1.gsym.count_reg[0]_i_1_n_7 ),
        .Q(D[0]),
        .R(srst));
  CARRY4 \gcc0.gc1.gsym.count_reg[0]_i_1 
       (.CI(1'b0),
        .CO({\gcc0.gc1.gsym.count_reg[0]_i_1_n_0 ,\gcc0.gc1.gsym.count_reg[0]_i_1_n_1 ,\gcc0.gc1.gsym.count_reg[0]_i_1_n_2 ,\gcc0.gc1.gsym.count_reg[0]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\gcc0.gc1.gsym.count_reg[0]_i_1_n_4 ,\gcc0.gc1.gsym.count_reg[0]_i_1_n_5 ,\gcc0.gc1.gsym.count_reg[0]_i_1_n_6 ,\gcc0.gc1.gsym.count_reg[0]_i_1_n_7 }),
        .S({D[3:1],\gcc0.gc1.gsym.count[0]_i_2_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[10] 
       (.C(clk),
        .CE(p_17_out),
        .D(\gcc0.gc1.gsym.count_reg[8]_i_1_n_5 ),
        .Q(D[10]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[11] 
       (.C(clk),
        .CE(p_17_out),
        .D(\gcc0.gc1.gsym.count_reg[8]_i_1_n_4 ),
        .Q(D[11]),
        .R(srst));
  FDSE #(
    .INIT(1'b1)) 
    \gcc0.gc1.gsym.count_reg[1] 
       (.C(clk),
        .CE(p_17_out),
        .D(\gcc0.gc1.gsym.count_reg[0]_i_1_n_6 ),
        .Q(D[1]),
        .S(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[2] 
       (.C(clk),
        .CE(p_17_out),
        .D(\gcc0.gc1.gsym.count_reg[0]_i_1_n_5 ),
        .Q(D[2]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[3] 
       (.C(clk),
        .CE(p_17_out),
        .D(\gcc0.gc1.gsym.count_reg[0]_i_1_n_4 ),
        .Q(D[3]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[4] 
       (.C(clk),
        .CE(p_17_out),
        .D(\gcc0.gc1.gsym.count_reg[4]_i_1_n_7 ),
        .Q(D[4]),
        .R(srst));
  CARRY4 \gcc0.gc1.gsym.count_reg[4]_i_1 
       (.CI(\gcc0.gc1.gsym.count_reg[0]_i_1_n_0 ),
        .CO({\gcc0.gc1.gsym.count_reg[4]_i_1_n_0 ,\gcc0.gc1.gsym.count_reg[4]_i_1_n_1 ,\gcc0.gc1.gsym.count_reg[4]_i_1_n_2 ,\gcc0.gc1.gsym.count_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\gcc0.gc1.gsym.count_reg[4]_i_1_n_4 ,\gcc0.gc1.gsym.count_reg[4]_i_1_n_5 ,\gcc0.gc1.gsym.count_reg[4]_i_1_n_6 ,\gcc0.gc1.gsym.count_reg[4]_i_1_n_7 }),
        .S(D[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[5] 
       (.C(clk),
        .CE(p_17_out),
        .D(\gcc0.gc1.gsym.count_reg[4]_i_1_n_6 ),
        .Q(D[5]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[6] 
       (.C(clk),
        .CE(p_17_out),
        .D(\gcc0.gc1.gsym.count_reg[4]_i_1_n_5 ),
        .Q(D[6]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[7] 
       (.C(clk),
        .CE(p_17_out),
        .D(\gcc0.gc1.gsym.count_reg[4]_i_1_n_4 ),
        .Q(D[7]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[8] 
       (.C(clk),
        .CE(p_17_out),
        .D(\gcc0.gc1.gsym.count_reg[8]_i_1_n_7 ),
        .Q(D[8]),
        .R(srst));
  CARRY4 \gcc0.gc1.gsym.count_reg[8]_i_1 
       (.CI(\gcc0.gc1.gsym.count_reg[4]_i_1_n_0 ),
        .CO({\NLW_gcc0.gc1.gsym.count_reg[8]_i_1_CO_UNCONNECTED [3],\gcc0.gc1.gsym.count_reg[8]_i_1_n_1 ,\gcc0.gc1.gsym.count_reg[8]_i_1_n_2 ,\gcc0.gc1.gsym.count_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\gcc0.gc1.gsym.count_reg[8]_i_1_n_4 ,\gcc0.gc1.gsym.count_reg[8]_i_1_n_5 ,\gcc0.gc1.gsym.count_reg[8]_i_1_n_6 ,\gcc0.gc1.gsym.count_reg[8]_i_1_n_7 }),
        .S(D[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \gcc0.gc1.gsym.count_reg[9] 
       (.C(clk),
        .CE(p_17_out),
        .D(\gcc0.gc1.gsym.count_reg[8]_i_1_n_6 ),
        .Q(D[9]),
        .R(srst));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module bd_0ac3_rx_0_wr_logic
   (FULL_FB,
    full,
    E,
    Q,
    \gpr1.dout_i_reg[1] ,
    ram_full_comb,
    clk,
    AR,
    wr_en);
  output FULL_FB;
  output full;
  output [0:0]E;
  output [3:0]Q;
  output [3:0]\gpr1.dout_i_reg[1] ;
  input ram_full_comb;
  input clk;
  input [0:0]AR;
  input wr_en;

  wire [0:0]AR;
  wire [0:0]E;
  wire FULL_FB;
  wire [3:0]Q;
  wire clk;
  wire full;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire ram_full_comb;
  wire wr_en;

  bd_0ac3_rx_0_wr_status_flags_ss \gwss.wsts 
       (.AR(AR),
        .E(E),
        .FULL_FB(FULL_FB),
        .clk(clk),
        .full(full),
        .ram_full_comb(ram_full_comb),
        .wr_en(wr_en));
  bd_0ac3_rx_0_wr_bin_cntr wpntr
       (.AR(AR),
        .E(E),
        .Q(Q),
        .clk(clk),
        .\gpr1.dout_i_reg[1] (\gpr1.dout_i_reg[1] ));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module bd_0ac3_rx_0_wr_logic_12
   (FULL_FB,
    full,
    E,
    Q,
    \gpr1.dout_i_reg[1] ,
    ram_full_comb,
    clk,
    AR,
    wr_en);
  output FULL_FB;
  output full;
  output [0:0]E;
  output [3:0]Q;
  output [3:0]\gpr1.dout_i_reg[1] ;
  input ram_full_comb;
  input clk;
  input [0:0]AR;
  input wr_en;

  wire [0:0]AR;
  wire [0:0]E;
  wire FULL_FB;
  wire [3:0]Q;
  wire clk;
  wire full;
  wire [3:0]\gpr1.dout_i_reg[1] ;
  wire ram_full_comb;
  wire wr_en;

  bd_0ac3_rx_0_wr_status_flags_ss_15 \gwss.wsts 
       (.AR(AR),
        .E(E),
        .FULL_FB(FULL_FB),
        .clk(clk),
        .full(full),
        .ram_full_comb(ram_full_comb),
        .wr_en(wr_en));
  bd_0ac3_rx_0_wr_bin_cntr_16 wpntr
       (.AR(AR),
        .E(E),
        .Q(Q),
        .clk(clk),
        .\gpr1.dout_i_reg[1] (\gpr1.dout_i_reg[1] ));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module bd_0ac3_rx_0_wr_logic__parameterized0
   (full,
    E,
    Q,
    \gic0.gc0.count_d2_reg[1] ,
    \src_gray_ff_reg[4] ,
    wr_clk,
    AR,
    \dest_out_bin_ff_reg[0] ,
    wr_en,
    \dest_out_bin_ff_reg[0]_0 ,
    RD_PNTR_WR);
  output full;
  output [0:0]E;
  output [1:0]Q;
  output [1:0]\gic0.gc0.count_d2_reg[1] ;
  output [4:0]\src_gray_ff_reg[4] ;
  input wr_clk;
  input [0:0]AR;
  input \dest_out_bin_ff_reg[0] ;
  input wr_en;
  input \dest_out_bin_ff_reg[0]_0 ;
  input [2:0]RD_PNTR_WR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [1:0]Q;
  wire [2:0]RD_PNTR_WR;
  wire \dest_out_bin_ff_reg[0] ;
  wire \dest_out_bin_ff_reg[0]_0 ;
  wire full;
  wire [1:0]\gic0.gc0.count_d2_reg[1] ;
  wire \gwas.wsts_n_1 ;
  wire [4:0]\src_gray_ff_reg[4] ;
  wire wpntr_n_0;
  wire wr_clk;
  wire wr_en;

  bd_0ac3_rx_0_wr_status_flags_as \gwas.wsts 
       (.AR(AR),
        .E(E),
        .full(full),
        .out(\gwas.wsts_n_1 ),
        .ram_full_fb_i_reg_0(wpntr_n_0),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  bd_0ac3_rx_0_wr_bin_cntr__parameterized0 wpntr
       (.AR(AR),
        .E(E),
        .Q(Q),
        .RD_PNTR_WR(RD_PNTR_WR),
        .\dest_out_bin_ff_reg[0] (\dest_out_bin_ff_reg[0] ),
        .\dest_out_bin_ff_reg[0]_0 (\dest_out_bin_ff_reg[0]_0 ),
        .\gic0.gc0.count_d2_reg[1]_0 (\gic0.gc0.count_d2_reg[1] ),
        .out(\gwas.wsts_n_1 ),
        .ram_full_i_reg(wpntr_n_0),
        .\src_gray_ff_reg[4] (\src_gray_ff_reg[4] ),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module bd_0ac3_rx_0_wr_logic__parameterized0_6
   (full,
    E,
    Q,
    \gic0.gc0.count_d2_reg[1] ,
    \src_gray_ff_reg[4] ,
    wr_clk,
    AR,
    \dest_out_bin_ff_reg[0] ,
    wr_en,
    \dest_out_bin_ff_reg[0]_0 ,
    RD_PNTR_WR);
  output full;
  output [0:0]E;
  output [1:0]Q;
  output [1:0]\gic0.gc0.count_d2_reg[1] ;
  output [4:0]\src_gray_ff_reg[4] ;
  input wr_clk;
  input [0:0]AR;
  input \dest_out_bin_ff_reg[0] ;
  input wr_en;
  input \dest_out_bin_ff_reg[0]_0 ;
  input [2:0]RD_PNTR_WR;

  wire [0:0]AR;
  wire [0:0]E;
  wire [1:0]Q;
  wire [2:0]RD_PNTR_WR;
  wire \dest_out_bin_ff_reg[0] ;
  wire \dest_out_bin_ff_reg[0]_0 ;
  wire full;
  wire [1:0]\gic0.gc0.count_d2_reg[1] ;
  wire \gwas.wsts_n_1 ;
  wire [4:0]\src_gray_ff_reg[4] ;
  wire wpntr_n_0;
  wire wr_clk;
  wire wr_en;

  bd_0ac3_rx_0_wr_status_flags_as_7 \gwas.wsts 
       (.AR(AR),
        .E(E),
        .full(full),
        .out(\gwas.wsts_n_1 ),
        .pkt_fifo_wen_reg(wpntr_n_0),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  bd_0ac3_rx_0_wr_bin_cntr__parameterized0_8 wpntr
       (.AR(AR),
        .E(E),
        .Q(Q),
        .RD_PNTR_WR(RD_PNTR_WR),
        .\dest_out_bin_ff_reg[0] (\dest_out_bin_ff_reg[0] ),
        .\dest_out_bin_ff_reg[0]_0 (\dest_out_bin_ff_reg[0]_0 ),
        .\gic0.gc0.count_d2_reg[1]_0 (\gic0.gc0.count_d2_reg[1] ),
        .out(\gwas.wsts_n_1 ),
        .ram_full_i_reg(wpntr_n_0),
        .\src_gray_ff_reg[4] (\src_gray_ff_reg[4] ),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module bd_0ac3_rx_0_wr_logic__parameterized1
   (out,
    full,
    almost_full,
    D,
    Q,
    prog_full,
    cntr_en,
    WEA,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ,
    v1_reg,
    v1_reg_0,
    v1_reg_1,
    srst,
    clk,
    p_7_out,
    p_1_out,
    S,
    \gc0.count_d1_reg[7] ,
    \gc0.count_d1_reg[11] ,
    wr_en,
    \gpregsm1.user_valid_reg ,
    rd_en);
  output out;
  output full;
  output almost_full;
  output [11:0]D;
  output [11:0]Q;
  output prog_full;
  output cntr_en;
  output [1:0]WEA;
  output [1:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  output [11:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  input [5:0]v1_reg;
  input [5:0]v1_reg_0;
  input [5:0]v1_reg_1;
  input srst;
  input clk;
  input p_7_out;
  input p_1_out;
  input [3:0]S;
  input [3:0]\gc0.count_d1_reg[7] ;
  input [3:0]\gc0.count_d1_reg[11] ;
  input wr_en;
  input \gpregsm1.user_valid_reg ;
  input rd_en;

  wire [11:0]D;
  wire [1:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [11:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ;
  wire [11:0]Q;
  wire [3:0]S;
  wire [1:0]WEA;
  wire almost_full;
  wire clk;
  wire cntr_en;
  wire full;
  wire [3:0]\gc0.count_d1_reg[11] ;
  wire [3:0]\gc0.count_d1_reg[7] ;
  wire \gpregsm1.user_valid_reg ;
  wire \gwss.wsts_n_5 ;
  wire out;
  wire p_17_out;
  wire p_1_out;
  wire p_7_out;
  wire prog_full;
  wire rd_en;
  wire srst;
  wire [5:0]v1_reg;
  wire [5:0]v1_reg_0;
  wire [5:0]v1_reg_1;
  wire wr_en;

  bd_0ac3_rx_0_wr_pf_ss \gwss.gpf.wrpf 
       (.Q(Q[10:0]),
        .S(S),
        .clk(clk),
        .\gc0.count_d1_reg[11] (\gc0.count_d1_reg[11] ),
        .\gc0.count_d1_reg[7] (\gc0.count_d1_reg[7] ),
        .mem_wen_reg(\gwss.wsts_n_5 ),
        .p_1_out(p_1_out),
        .p_7_out(p_7_out),
        .prog_full(prog_full),
        .srst(srst));
  bd_0ac3_rx_0_wr_status_flags_ss__parameterized0 \gwss.wsts 
       (.\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ),
        .WEA(WEA),
        .almost_full(almost_full),
        .clk(clk),
        .cntr_en(cntr_en),
        .full(full),
        .\gpregsm1.user_valid_reg (\gpregsm1.user_valid_reg ),
        .\greg.ram_wr_en_i_reg (\gwss.wsts_n_5 ),
        .out(out),
        .p_17_out(p_17_out),
        .p_7_out(p_7_out),
        .rd_en(rd_en),
        .srst(srst),
        .v1_reg(v1_reg),
        .v1_reg_0(v1_reg_0),
        .v1_reg_1(v1_reg_1),
        .wr_en(wr_en));
  bd_0ac3_rx_0_wr_bin_cntr__parameterized1 wpntr
       (.D(D),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_0 ),
        .Q(Q),
        .clk(clk),
        .p_17_out(p_17_out),
        .srst(srst));
endmodule

(* ORIG_REF_NAME = "wr_pf_ss" *) 
module bd_0ac3_rx_0_wr_pf_ss
   (prog_full,
    srst,
    p_7_out,
    clk,
    mem_wen_reg,
    p_1_out,
    Q,
    S,
    \gc0.count_d1_reg[7] ,
    \gc0.count_d1_reg[11] );
  output prog_full;
  input srst;
  input p_7_out;
  input clk;
  input mem_wen_reg;
  input p_1_out;
  input [10:0]Q;
  input [3:0]S;
  input [3:0]\gc0.count_d1_reg[7] ;
  input [3:0]\gc0.count_d1_reg[11] ;

  wire [10:0]Q;
  wire [3:0]S;
  wire clk;
  wire [12:1]diff_pntr_pad;
  wire [3:0]\gc0.count_d1_reg[11] ;
  wire [3:0]\gc0.count_d1_reg[7] ;
  wire \gpfs.prog_full_i_i_1_n_0 ;
  wire \gpfs.prog_full_i_i_2_n_0 ;
  wire \gpfs.prog_full_i_i_3_n_0 ;
  wire \gpfs.prog_full_i_i_4_n_0 ;
  wire mem_wen_reg;
  wire p_1_out;
  wire p_7_out;
  wire [12:1]plusOp;
  wire plusOp_carry__0_n_0;
  wire plusOp_carry__0_n_1;
  wire plusOp_carry__0_n_2;
  wire plusOp_carry__0_n_3;
  wire plusOp_carry__1_n_1;
  wire plusOp_carry__1_n_2;
  wire plusOp_carry__1_n_3;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire prog_full;
  wire ram_rd_en_i;
  wire ram_wr_en_i;
  wire srst;
  wire [3:3]NLW_plusOp_carry__1_CO_UNCONNECTED;

  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[10] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[10]),
        .Q(diff_pntr_pad[10]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[11] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[11]),
        .Q(diff_pntr_pad[11]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[12] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[12]),
        .Q(diff_pntr_pad[12]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[1]),
        .Q(diff_pntr_pad[1]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[2] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[2]),
        .Q(diff_pntr_pad[2]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[3] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[3]),
        .Q(diff_pntr_pad[3]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[4] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[4]),
        .Q(diff_pntr_pad[4]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[5] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[5]),
        .Q(diff_pntr_pad[5]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[6] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[6]),
        .Q(diff_pntr_pad[6]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[7] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[7]),
        .Q(diff_pntr_pad[7]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[8] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[8]),
        .Q(diff_pntr_pad[8]),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.gcry_1_sym.diff_pntr_pad_reg[9] 
       (.C(clk),
        .CE(1'b1),
        .D(plusOp[9]),
        .Q(diff_pntr_pad[9]),
        .R(srst));
  LUT6 #(
    .INIT(64'hFFFFFFFD00000004)) 
    \gpfs.prog_full_i_i_1 
       (.I0(ram_rd_en_i),
        .I1(ram_wr_en_i),
        .I2(\gpfs.prog_full_i_i_2_n_0 ),
        .I3(\gpfs.prog_full_i_i_3_n_0 ),
        .I4(\gpfs.prog_full_i_i_4_n_0 ),
        .I5(prog_full),
        .O(\gpfs.prog_full_i_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \gpfs.prog_full_i_i_2 
       (.I0(diff_pntr_pad[11]),
        .I1(diff_pntr_pad[1]),
        .I2(diff_pntr_pad[9]),
        .I3(diff_pntr_pad[10]),
        .O(\gpfs.prog_full_i_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFF7F)) 
    \gpfs.prog_full_i_i_3 
       (.I0(diff_pntr_pad[12]),
        .I1(diff_pntr_pad[4]),
        .I2(diff_pntr_pad[2]),
        .I3(diff_pntr_pad[3]),
        .O(\gpfs.prog_full_i_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \gpfs.prog_full_i_i_4 
       (.I0(diff_pntr_pad[7]),
        .I1(diff_pntr_pad[8]),
        .I2(diff_pntr_pad[5]),
        .I3(diff_pntr_pad[6]),
        .O(\gpfs.prog_full_i_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gpfs.prog_full_i_reg 
       (.C(clk),
        .CE(1'b1),
        .D(\gpfs.prog_full_i_i_1_n_0 ),
        .Q(prog_full),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \greg.ram_rd_en_i_reg 
       (.C(clk),
        .CE(1'b1),
        .D(p_7_out),
        .Q(ram_rd_en_i),
        .R(srst));
  FDRE #(
    .INIT(1'b0)) 
    \greg.ram_wr_en_i_reg 
       (.C(clk),
        .CE(1'b1),
        .D(mem_wen_reg),
        .Q(ram_wr_en_i),
        .R(srst));
  CARRY4 plusOp_carry
       (.CI(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3}),
        .CYINIT(p_1_out),
        .DI(Q[3:0]),
        .O(plusOp[4:1]),
        .S(S));
  CARRY4 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CO({plusOp_carry__0_n_0,plusOp_carry__0_n_1,plusOp_carry__0_n_2,plusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI(Q[7:4]),
        .O(plusOp[8:5]),
        .S(\gc0.count_d1_reg[7] ));
  CARRY4 plusOp_carry__1
       (.CI(plusOp_carry__0_n_0),
        .CO({NLW_plusOp_carry__1_CO_UNCONNECTED[3],plusOp_carry__1_n_1,plusOp_carry__1_n_2,plusOp_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,Q[10:8]}),
        .O(plusOp[12:9]),
        .S(\gc0.count_d1_reg[11] ));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module bd_0ac3_rx_0_wr_status_flags_as
   (full,
    out,
    E,
    ram_full_fb_i_reg_0,
    wr_clk,
    AR,
    wr_en);
  output full;
  output out;
  output [0:0]E;
  input ram_full_fb_i_reg_0;
  input wr_clk;
  input [0:0]AR;
  input wr_en;

  wire [0:0]AR;
  wire [0:0]E;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  wire ram_full_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_clk;
  wire wr_en;

  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gic0.gc0.count_d1[4]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(ram_full_fb_i_reg_0),
        .Q(ram_full_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(ram_full_fb_i_reg_0),
        .Q(ram_full_i));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module bd_0ac3_rx_0_wr_status_flags_as_7
   (full,
    out,
    E,
    pkt_fifo_wen_reg,
    wr_clk,
    AR,
    wr_en);
  output full;
  output out;
  output [0:0]E;
  input pkt_fifo_wen_reg;
  input wr_clk;
  input [0:0]AR;
  input wr_en;

  wire [0:0]AR;
  wire [0:0]E;
  wire pkt_fifo_wen_reg;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_clk;
  wire wr_en;

  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gic0.gc0.count_d1[4]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(pkt_fifo_wen_reg),
        .Q(ram_full_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(pkt_fifo_wen_reg),
        .Q(ram_full_i));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module bd_0ac3_rx_0_wr_status_flags_ss
   (FULL_FB,
    full,
    E,
    ram_full_comb,
    clk,
    AR,
    wr_en);
  output FULL_FB;
  output full;
  output [0:0]E;
  input ram_full_comb;
  input clk;
  input [0:0]AR;
  input wr_en;

  wire [0:0]AR;
  wire [0:0]E;
  wire clk;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  wire ram_full_comb;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_en;

  assign FULL_FB = ram_full_fb_i;
  assign full = ram_full_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gcc0.gc0.count_d1[3]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(ram_afull_fb));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(AR),
        .D(ram_full_comb),
        .Q(ram_full_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(AR),
        .D(ram_full_comb),
        .Q(ram_full_i));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module bd_0ac3_rx_0_wr_status_flags_ss_15
   (FULL_FB,
    full,
    E,
    ram_full_comb,
    clk,
    AR,
    wr_en);
  output FULL_FB;
  output full;
  output [0:0]E;
  input ram_full_comb;
  input clk;
  input [0:0]AR;
  input wr_en;

  wire [0:0]AR;
  wire [0:0]E;
  wire clk;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  wire ram_full_comb;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire wr_en;

  assign FULL_FB = ram_full_fb_i;
  assign full = ram_full_i;
  LUT2 #(
    .INIT(4'h2)) 
    \gcc0.gc0.count_d1[3]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_i));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b0),
        .O(ram_afull_fb));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(AR),
        .D(ram_full_comb),
        .Q(ram_full_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(1'b1),
        .CLR(AR),
        .D(ram_full_comb),
        .Q(ram_full_i));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_ss" *) 
module bd_0ac3_rx_0_wr_status_flags_ss__parameterized0
   (out,
    full,
    almost_full,
    cntr_en,
    p_17_out,
    \greg.ram_wr_en_i_reg ,
    WEA,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ,
    v1_reg,
    v1_reg_0,
    v1_reg_1,
    srst,
    clk,
    wr_en,
    \gpregsm1.user_valid_reg ,
    rd_en,
    p_7_out);
  output out;
  output full;
  output almost_full;
  output cntr_en;
  output p_17_out;
  output \greg.ram_wr_en_i_reg ;
  output [1:0]WEA;
  output [1:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  input [5:0]v1_reg;
  input [5:0]v1_reg_0;
  input [5:0]v1_reg_1;
  input srst;
  input clk;
  input wr_en;
  input \gpregsm1.user_valid_reg ;
  input rd_en;
  input p_7_out;

  wire [1:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram ;
  wire [1:0]WEA;
  wire clk;
  wire cntr_en;
  wire comp0;
  wire comp1;
  wire \gpregsm1.user_valid_reg ;
  wire \greg.ram_wr_en_i_reg ;
  wire p_17_out;
  wire p_2_out;
  wire p_7_out;
  (* DONT_TOUCH *) wire ram_afull_fb;
  (* DONT_TOUCH *) wire ram_afull_i;
  wire ram_full_comb;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire rd_en;
  wire srst;
  wire [5:0]v1_reg;
  wire [5:0]v1_reg_0;
  wire [5:0]v1_reg_1;
  wire wr_en;

  assign almost_full = ram_afull_i;
  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(WEA[1]));
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_1__0 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [1]));
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_1__1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(\DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram [0]));
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.SIMPLE_PRIM36.ram_i_4 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(WEA[0]));
  bd_0ac3_rx_0_compare__parameterized1 c0
       (.comp0(comp0),
        .v1_reg(v1_reg));
  bd_0ac3_rx_0_compare__parameterized1_1 c1
       (.comp0(comp0),
        .comp1(comp1),
        .out(ram_full_fb_i),
        .p_7_out(p_7_out),
        .ram_full_comb(ram_full_comb),
        .v1_reg_0(v1_reg_0),
        .wr_en(wr_en));
  LUT4 #(
    .INIT(16'hB444)) 
    \count[12]_i_1 
       (.I0(ram_full_fb_i),
        .I1(wr_en),
        .I2(\gpregsm1.user_valid_reg ),
        .I3(rd_en),
        .O(cntr_en));
  bd_0ac3_rx_0_compare__parameterized1_2 \gaf.c2 
       (.almost_full(ram_afull_i),
        .comp1(comp1),
        .out(ram_full_fb_i),
        .p_2_out(p_2_out),
        .p_7_out(p_7_out),
        .v1_reg_1(v1_reg_1),
        .wr_en(wr_en));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gaf.gaf0.ram_afull_i_reg 
       (.C(clk),
        .CE(1'b1),
        .D(p_2_out),
        .Q(ram_afull_i),
        .R(srst));
  LUT2 #(
    .INIT(4'h2)) 
    \gcc0.gc1.gsym.count_d1[11]_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(p_17_out));
  LUT2 #(
    .INIT(4'h2)) 
    \greg.ram_wr_en_i_i_1 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(\greg.ram_wr_en_i_reg ));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(ram_afull_fb));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_full_comb),
        .Q(ram_full_fb_i),
        .R(srst));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(clk),
        .CE(1'b1),
        .D(ram_full_comb),
        .Q(ram_full_i),
        .R(srst));
endmodule
`pragma protect begin_protected
`pragma protect version = 1
`pragma protect encrypt_agent = "XILINX"
`pragma protect encrypt_agent_info = "Xilinx Encryption Tool 2014"
`pragma protect key_keyowner="Cadence Design Systems.", key_keyname="cds_rsa_key", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=64)
`pragma protect key_block
lRnk0E8hbXDcuevR1rzXi1jimMZzrKGKXpl0vqDPFknytxSOOjjm3pFbNH5J+eGWn08YkB5TrO0Q
TpdmWmA9Lg==

`pragma protect key_keyowner="Synopsys", key_keyname="SNPS-VCS-RSA-2", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=128)
`pragma protect key_block
uid484ztZzZfHP6THRgiAKyoD7dahjkwaYCYRpWVOB62ZKdkHqOAzDX/QqwaAhQpcRfn1t2tNtDR
PC47m4N4HuKrhtMCD7s2hloFV6Ni0+FiC+OSZSP9NA0VEfBGzLMtl4ZTV+6XjDRlMTFlYfcC4Ube
eQJ8he9dnw3ibVH7AQM=

`pragma protect key_keyowner="Aldec", key_keyname="ALDEC15_001", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
qWD5OFMWK2AxdPMrV8t4hsz2mpBXVTkv1t1QeayN9CAm+eZWjZS8CW4QolIi8j1VMvUSQYk/ojvx
gwux6DkKCzgCjcqudhVLdGj3BBVZ6eRbTP1qVlrI9QAb0T3PLOuA5weXA+HAhbkrA1WUzyBNLIyI
5JKT4lu0r3YwgqPrJj2VRPT5AJqicyhp5HET6JDDxyra98pfcgdkc8dsztMi/3APaqW0KpbLoz3E
NJFBVkwwUkir0UCze8yx7mJ7JDxhFWoao4zwIYpfU9bPWOK9cGtwqooULAO0BwTu9DfJxVb0H4jg
xs9bk6nkFlM8XHbmWZBRDMkRVn4v+8AWVBgf4Q==

`pragma protect key_keyowner="ATRENTA", key_keyname="ATR-SG-2015-RSA-3", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
YvEXqVGqAH+e/5q+a5hd3PwRKlXaSG+uQ85Pxbvp8sNHpbjdnd/6wKErY03lIUnQ/ZykqVF3NPHI
Al/1hmOPQJJ5ppBcAJeFBug8JBeckiOTDxXc/FKl11BXgP9J/B6CU8ECMlhNu/LRuqmOvx6wch+Z
4CQaiG0vcgvroGyJLLc1x8ubRJV2Pj57m2c2nxFooEGHPXjdRUczY2duJiEuzr9/2qXy0bqvxngH
TxH/kF1dQyw8rnHMqZbDdZaRglmJlila5SY7/TIlC0jB3BCAlS1/k8W4AjLN3sXnjwWkWrP31GdY
i41yi5dq0qqXpeCcJxUmHtwpRmDSEA9DbCKHhw==

`pragma protect key_keyowner="Xilinx", key_keyname="xilinxt_2017_05", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
FHxf+aRwRyYt/rqjI3XcemlYuwzmE4oebpcJK6hUymIfbYecrXWVH+YN4rKo5ZuwKM9JCDYMASat
pxSoIY3ctVD9F0aOCsIkFE4/zJUQS2bp+jF4YtFc1+hxFG1leOkXlHFdpeLiKd8uhoQ76FN/xKZ/
x0pOsiZXqUTdP+CG9Mu5o1o9IRgGZ048bXYTgTTTEZyykpR4iNeTV1EH6OHksRzxdRphY4pAH6jV
4rvM2u6Fsz42cuKUbeOiZxrAvFtV3HaKa79+lQEVstbzj+bj+WBdvydQwkbKexkAtbr7m4fu2iU2
0gO0Cos9fUhfasuwmmSbuObBoOe4S7bWkN/26g==

`pragma protect key_keyowner="Mentor Graphics Corporation", key_keyname="MGC-VELOCE-RSA", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=128)
`pragma protect key_block
MCvqgjF4U81eyuPObqq0M90Hh0jfz8eR1r5urwVnzAeqPSFrvJ28zZtNNvK+1+3VdUgrp4apYRRk
T6vS/YiPN/aE17yt37nODxxRxCEcK1zJ3byJzukTAIj2TuFcF/+bQZWq8mddDIo82E/zNJYZcArJ
5yn5ZV4+qx0/v2+wvnU=

`pragma protect key_keyowner="Mentor Graphics Corporation", key_keyname="MGC-VERIF-SIM-RSA-2", key_method="rsa"
`pragma protect encoding = (enctype="BASE64", line_length=76, bytes=256)
`pragma protect key_block
f8T3gpqTbDNFwgTO0R6PZ617z6+PoejdMyc6ommxBJ2M3wcO2s5bnteKAXwB++G6PDVQwBZs0JdX
WxOloDPddNdZvxZuzn0hkuEikRGQdp2uSktG6yPd2I8V6p3mu4aoWluL12CwVCXYSjLcZAw2Kw8C
74YxanREIcn5cbgn/yZMCH/f40Nu6X6afzVGE4asblwlS9QkAryvc2bm+N+qZLLGs0y1dHiQCYrO
O1a4UZhK9ss3nT8MasKMe4BxDXR3Ry9OW8UHw6wKnFCZ+oEwwTB68oIXY61q1Ykb4jG7lazJ2HpL
CF6V+Nc3zQqZ2SMYWeLNAiUqy2b6vKfc3VnBAw==

`pragma protect data_method = "AES128-CBC"
`pragma protect encoding = (enctype = "BASE64", line_length = 76, bytes = 48704)
`pragma protect data_block
t1y/myK5zRdOHKpx+uDniVHKOXI4/bbe5zZJJAuIN7r+HmwQX7J4M25XMrduRrVb4X5pY7gnpGYz
J/Ll4KEL+KWdnZrwS/OKMrEOCc1+iKae1IDCmMKBP2MS+4HTyjK4Lv3s1zfKkAqPb2JGR6iry1Gm
UgAhNMhFTW4Rb4t56lisoVOG91q8at9fho4OHlqrGc6uHMTdJ9GSIpc82EjeOSN9G/xi6aYxcclA
fhOmdhaOTLkTwwAzIcbghaYi+84pJ4UO6nUZ0H99a8u1+p5CcBq5nkBl+6xmTH+hbfGeFBoqr1pZ
uHmtnaL+zAhAXxuDRT+U4TWVhU2rlLk1WE0I+vYluuKUcOP4vxPux9aLrSOr16MVigObAx4A9FCj
fmQzgZiw9C97EhZcXY/4Wf6DhvDpIEhExVkmSJzegZQVlTa+EZroNcD8rssf9EP1Q9rMv3ribe9j
xL7J3pXG4hoWiBZiSWlA/xR4hCzuRXzLCmfmUKGMkJyVWYu7xDyivnR3hkkszvj9/zwKYvrpIxgH
9Kxo4hI/oxBX0lw8ypNsoGkRvbVvbdm+1DMkP3yQfd2jr9nAXT/9zeV0v8zdrp2/PdcysVAQ/g3T
XBtX9OzKsMSfQ0xdYtyPHKjwja/1+q9jAYvrmMKu1BYoG+dewuqT2GrhTbvkVdOf3Q4RdYo0+IPz
QjqHn2QL4snUse4plxdnXQzVEivGAJvLyK2HX0+iXgHrF9KfKC1+mYja9xht9EspClZHZGvldSWn
YP/1UCNqGEJlKRR3jzDuU+QUcEwxR4mblom0HYJLOIkfGuA82KWXghnhPxCPZgdCWuZc7cJK/k18
6o3FEA4UjP2xzEBT/PgbknTWnaBRkgNpjZYUlZcFy/Kc3IkXNrsSTOXtIv0/eW2uSUGvdGtDSTy1
vuyTovWo0flqwvS3zp/5p6CmMJF+QT+mRTFO0hzt5TEBEkxwSlaHs5fH1+QVhHY9Q9SrEEJDPAOg
ezOwomAyW8PspdW23QGtXDk/ozz5QlUKgC+exMBysfCdCN7KrHV0t8cMA45viWBkNaBhwDaBy4+P
BIXT6N7qr4ACmxzZllnuU/R5dzM65tQmTy7mb97zNbgHV1ehY8MUTSYLJ++a2tsGiJOrfe3rM8GP
5nQw/cZum/pabjbu3saRhSSqvC/VVvBuULWZ16Pyxq4NbhftRk7ZESAVFyZLrAZ+cJ8vWxxlP0Cb
woE8dhMF5wP/aIskP+ASo1rGznILrF3qg16DuY0/it+RF+NK1CPjTxp0ShpHCrp7+ij8Vco1UmZZ
A2fYHxFN8FjUVIPH/1GNLlP3yBsbMOuBtb03PGd6j/qXxXxxNGbhJspyYdKEwMLzmhNPAt1uBW89
kKilBNqhkE6VYPU3Dx1Gt0H+7elp2JoQ9DZR5gVtuhV0sZ6A2hxJ74BZ1DjU+3pwC5bYnMAR/Dwe
O/Om3Za+cQzRuTy4KsqgUgWCYUYxZYZLzCDWAbI6uXR46ATnAHYDvbpljqxWVHdVvbRAfus+0Ghp
5rmvicqEdWEAHU9ScBZUW/ML6vKWQwRyYz8nHrlH6zmcEULzCA+UR6Z0Ov350ZYHkI4TJledWsA7
tINebe6oKrINIg5pUUxjqfFjUxdsfIHsSsl3RPMrpCDLZ2Mtkt+en9GFImRkcZWpMwFhZoTvF7Zl
RSyqVhjPE42xIE/wcdTb2Dq0rrprG6zY0aHuaR7ospSkkNowGzltbd4jnUWktI22VOLdOfXOdyEu
ZQHmuqRhYzbM3g76JPR0jor3R4AMqZPZN7+cE3ws7pnA0tantdvjk2BINPFJSE75mWzrgz3P6bXL
fcV2sgKZzuyjVT6lZHMQVaeHgD9BbrHjqSlHG+yFoheQc7/duw86Bs1Rdjj/I2gmH8UrwyQiol4l
1iYmHX/stFSAYxCRgIhKmNB8qwYOdE7ZY7X/q7gptmniRSYecKQSQbBcPwfWT9ri2ynaHdZr23z6
vDRoEzKE6kaHCOZPiq6YxDcsnzks04zZYJ9dU0XS4pbr3eDhj10RM6nrdNVGxUxxOzb0fN9YDreN
Nb8WqSd1TKqPQS+gmm5R6FdmHd1Xv2LacTGZ0BVGA+kEXiQGb77wgYyb9pWctcaxDmWI6jMcrD5q
5fHeiAYIb6aCRqxMtQ6qsKYTegY3YtZs4ezP/7qNlKOynFKRSoONJGerlfkFQzxeWaNrd+uSRokT
+tUmnrqF2Czx7HTp9jFNqlGHq/4A/CZXRFZcHgTeCqcQlSJERgiUKV1nbWyzOXE+yfX37+ykGgnu
RDrdr1F5Pds044674quhc4B3crGApBrtqgjbl8Ng3Fd6bbRqrWjFpYPZM2Mga2nW8GTRiYYViAQu
GbcS5/mwJyzjtOCYBhq1SfVznCzHNT8rNG2YfzYGDewQHoTs7g060Tf6gSjVVs87gBJChyWQ7R/n
crah4bl7LDK3kXwUEctFjRaJrbA6f/cYh93Rd6Qt7ki2DZqu112gjzY2mfgZ5/cPxorJdJg/QpBf
Ix3yZlFtyRofWUk7J7oTuvfLPWhPHTo6FpQX3QkcGPTFupehG882X/0MPb503CQuFLHX4tTDweHx
QXKiIVX0DQNWIGhbUe4iq/2nN3mAjsj973WxTsR36ZfSRIpMaxmjSmtYhEtfkTfgM8nzB++iCnA9
8QVJFzIglLDnDhMiFWesAFObdowcNml6rceb4oDKWDzUaphFLz/XEzIhClR0vnZ+QL0F/2VmlNAa
AmcWuCWpszFcUOpXETN0aEalsBYMEBsefl7YDdpJurZa/R7Ano6DFPxw7pVgAdBFg0VsWYCSozvS
UnifeMhEcU7hEDLF0y5652BbCKN37hioK/c3ot61kfIDDdGtsvxFZ8brIjr5hiO2V7OV5j8QUMNz
LotMIDvgJMziCYWA9jB/RCLdu4gXtuic+FjwoQDkPnggLlbkoYjVY5FeHiKTtQcNYATm1atw4BH9
UgS3MpHefLBM9iIsJUVW5URfKzxxptZSpxT8vLkWQxHABXwdJ+z75fuLCvTSZ/boPoq4HEVmzORD
jmvyp7RweOj+6ofSPwiHNmMFQFYGde8XHEpzpoDzBPB/5GMewU7N9Yl9oHLZv0Tdd+IzWEfl9PJb
0X5RRdzEgLXJrlF5QsUp58dwyTNK6XxiNhp6N6XXeLk0tOw31z9UXKU94wlUG9/j9fQgSqEHIsgq
Ht75KyrGr6Spst1f4p2nOBxuUQyGUoOJMWjd1DVnCTYQc2aJG0e+GgQPe45+hAtifbPv/UM6PBAh
KifruSO7exxyvyzzV3XSnnAmfSQIOvUM9aoCL7j+mN2ePVXVkuWcOiqY4U/IvfX13cukDfrNvQMk
0zLo/IKjzFfsMyW1RcgPabqqMbMjyAXpxdRRAauhq52AdrLGzln3nS2NWYxAeCyZE64CkB7UEExd
InUZ0spkZK4CIzAB0kkZ6Pt4scYOcHo9tm1XoZdx3zTzWwj853TFQkdblFApJzlGtAM+du9dtXdk
Iw8Z9yzhgPSJ+xiulNULFqS/BUjFP7vT9lt4Bg67jnqrTmaV9hJ88DBUy+6MIsHEbEtJieSigJMc
xt6C/yVMVtu9W10nSNHMuI+QPq6GBBCI6s1JuRocXksbL7ArqlqNfPesom3NVmvzec+G8pp7tPjB
lWdBjaHKIuWg+ublXs9E0/4HQJ5WDS9v8Th3JHFAi/JUFkN6GP56d3ukvfEG4Eu3xwsB3igYFNjB
81n2jbMICe6hADEj5XIn6u+oHhVTpbAxC5f9kK9UIxoQFz2S1uN2FkZ2/cGrWiPudjimrZbEkZHq
TsCGVKv8vh1eKk60elIdRuIdXQ6Aj4oMYJ3Vojjk/WnVwY1VvJfVqAYjly9ATIbkkW+DzSI9XK/k
RkPmcTEqhCHvz1hnERFy7yaLB1E6EZAOWspeyR3sZ1CCScpIlYZ0WY61gaQkRc5e5MnfWpOGnGE5
cnew8Jd0qlWANjiL3A9K8Zy0wK409aiDnDK4Ee4cDIulg59im4GDyK+ydmSgIdSETJLguJNVcZ2g
CbVdW2oNQwxKy4KRqsYAmtMdr8TJztNrbVTIH2kmrlJaqFbnvlooKcesCeCp5uA7JjQJFQMJzhHN
do9KuGZc69rEL7icKBTNbY97rdZ2ayCOMYARcac3DWNUC0ODe1ZDzpZIBcPoEKDWrKXZ/WzbMuI0
pd53nw1fEivPeoyCMy0I06umew+EITDbKJBqov/JbI908dRcMJHijfjdOuXdY8Y5uuYvJZzkOu3e
/0swxju3UwzmNUtxxuCTPIKpLvQAS3fddcE3xAzbp9V1RKby4/eFnNyp4XSPyO6880UHbzbIBvHy
jvoDW5d5tCBa7fe5+u/t5U7Zqk/tCQOh9vSKSWXyk77vxZKpOSh2mAuYfGgBht/9kZdBGhCoUrBh
dx0MFQ7mwZKCPgFti60MElFd4dlz+sdH7+8ma8ugZH0Y41ozmC3a+r/p/2UYs93lAcmyWxpx6Lzr
vZGw78LpCxEqfe/n4Ok1XmJOrZ5ZkxN7ljOc8zVV9xKQlJQr69NaAxZVb22bJUlcyuQDOx8FxsWR
STMkLdV9OQxGXnZp+YXB3UMgA0R2FNcq+G+euU2tQpgmMs29A2vY2qfSt60diIF+iEYGHFXiAdoU
ruLsQp8vkgU8i7Uis6AqjQDGj2ntWGGV+fTtT0FZS+CK8W+yx0fRyQv7xuJxeU/jhY9oX9rsg0PP
tvDeacN9A4vY7ciD5nsY+jc9K0M10rK6ZADswCz7a3/Y3JGyrprzvlECZO9Tkr8xFhF/SVQyyE9e
YDiZtLNxx9iR0lJpeVkPyDWWc6Xb7OepyUc53Gef/s3gVkM7RT0Pk+9VX7ALfI7Ww5Dz6fHeV+ZZ
hn1erlXdUspWbf2tvHdaDe/38VPH7a2Z5J1GPo8KvfoEnm0MahUKhsMefw6UjjvK43Lt0hkK4saX
/IK6+v0qZ3ETQqPd8RVp4ezR0ViOLlNcKGS39DvFjDChZfY6aeYcV4XVFp9Vkosm54v/4s4NpVvN
FrJ3lu/pXIBzjqC46fylOnsyVpSkWz9EKaiyhCwC0bRFr4HMR8+8ixL9hj+51H7WSFIiyY2+p3g2
c9DesyCEYkBpXoxXl2R+OGFp8wTB3E/yop1vAEbzAXROZCIgsluctdPW7Fos1LqnBi5aLqlw/guB
45zB+czt+NShboeEq/g1fQ/fGeoznRhikC6Ag/YpDIKYNALqylQNawwig2wtyMFY4p99GSquxTSC
i/7KWiGGEkPbuuyC6QIefMrunQqIYGeMSJtA0+aymAQ9Hi/RCOA90srtbPJvdkP3IxfzmUoqu/nz
g2Lz80T7b4+x/JpYcsAySfAztMc0fgrkm++1mN1QMaOHyag7Edb0/BgoxPrQLMrU5oUjXTLZQzn2
vP3irIqCP1NGbyff6U9rPBi29R0EkMDW4L23JRRKySKn2CxLsXf89gTobWal8IMlDdO1Mnhwg4Q1
IEOI+RbUvN8ZErIqJW3ye1ZYP39rhmAaSW035PXA6AMBgRhC+nwyi/HB3aahhyu4KdtUj3o8RpEI
gVs/J8B56qckldOeXc7QTv/LcD7vgizA5+A+chl+T4ycCbTsTtkR/otjZ/5B49cU2WYosITfXLMh
JXRX+qNPeNE/ny9k6Qp79UDjQB5dNVJRb8geGtkdDbfMcBr/xDLt1XdZedEQ3aauzXCA8N64jmYG
u5VZmTpvoy03ALCRNHmHnFX3IXTtHV5mr9PX1Z/SK3/RKGBh39YLX9Qj3PzdTWEtTfiY1WmdyG7c
6wim2L7Oqu2BTw1b9EVMPwR8BBlTzrtUbhEo18buiUeHxXYuQbBcYBTyN0aeZTuqVGH8bh70uggW
PAM2BHs972VgWgLJomTZlQ5Z1BKdR8z/Rjv94QvDh4CDP7DqaYcB+//ZMyFD8RUTgRJsBvsCg4av
FMng2UYf37jnVvsAHN57ZrKFNhHtIdCB5wJ+yCfOXFWXMEvDuG4Kr9rs0jw10d/XOvgs4rM/+wFK
/lpVYIfA/tHbhy47FkTNXSXp+ynuu9qGXcaytOA8I64xVlTLM8UItEBqT1mhxkp2JhA1BzPf+cYT
uUcno55EZAL6p7iFnIeMCYlbQRfItjB+2avBNvUuiDxeijh9Ngk0ySBa3T0wK7j/nUmiwj5H89yH
cNwv4RybhUuQyUFPPXUFrB1SaR80HMH0h7NZmxnoZNh6l19wwQ2oJaf7f1l7+bf7GyOw5r1HnFdX
Behxj4LgdW2scIIaP6O4L+1vpM4RN5KmfPh1U6Mq/xpKsVAyUMXNFY6rbAI5ZtpcyytVyisPLYK9
jTx39YneY6Zpd/zZFdq6aHA18SI5zkF1djztAjwQO8ktloc2/YX8lSpcP8UIdI8LpqcYhs6Ne8s1
Y3yO43CpOKArQE/p4mERIBMwQeXMc94Jfzlzyc/JA0IGfSX30D0Wkev3hLy9SCCaFk8zCPf7XPYI
vHYZhJsO2llFW9eSXidG2ptWwUZpznZ2m6p4humqmb7Q8U2UmsNTVTA69b/H1bQalCVB/m1zhjJg
FQHGaQUkkLIMg9HOXTHY11AFdBl0oe6H5Rn4VXXsXomJhyEekIo1PakhpUom2kSRu7LB4KX7u4Fc
xBgC9B4QICZeT7udof3A6nuU+A4Agj4S0XF12mU1qFkJr/dYrTM51qP89OOCCwFc0YmE0VvlKb6+
lPZG76uU24ZJhD5UO80L045a2rdl9vqqCedU+8BiOAnsavfp+44iBz912JG73yLRTZUebOmGjpII
9YWopxYedLzgKhD69VodztF2vXcgL1f1RlBao+UlZqrFy/oda6gpvBdekqUPOJolqEc6XP4ZcQwh
Tf04GXrWRy3ltD8E6MgnbgRqz4nczKyCwZpsnuowHEzTIWtvgPeNVVPOl5UnAhia/dQJ1nxpB66m
KNghaoGh+lL0MQ3almn9ZTm+MT18qYomQCdR553K+rbRVIEvs0+6h0jCDFcXatrQog7g7hRX1dcO
Y4TmWV0PnXhUvm5bKbPWJJgUBIdidchVQaUTnW6VWtOa96Vvjm+xMGrGTbi/aNBEWDLeHhlZi0AO
hoAvIGlkPCSgt0JELuIsXStgPzrZ8YHKCDVhg0XYqOEXx2/qv3b5FglshaCIu4epjHohmL8GSUjw
NoN4ScHWi/vWjUy8CbMFQzGUduLSfmSFzl7H9peLDBYe9t+vI052Jqf7R3/m51jcwSctlhQsz4it
iZPammlanB67Bl8Nu6VAKB0pUAkgpNo3w/6938jIPdUZLKNFkyBgUZssb9kMtg9ChIjdD5ZOQyuA
mn5php+2zfnuZ8utW6C69c7CiAvKPK2Ibe7rq4exJtlJX88PN9U5SyJ4ab5elixJIYinezY5QCKK
xT509Fpy6EvH/WYQptnBKksB5UGgDcpmMoMCwhiPUF6ifzcK3fhIsE/2YynvDYbJ5GKJwsHBqThV
jtnrqpdDWLPapXJ9n3Sjj5DaPqHcNkMBmmwFo3HZtzLGqzKSedxu2awYhNPOdpUp7gNZvmIN34TT
LaUV+lez7s/Dbc44tgciuznxOQY9woHtMmd5ZCcTTkFExMNsMFAlY3ZHDPNIXiyxDW4xuLoJDFub
116AyMQrM0FnHJMHbhQm0Xd8Z/ksflIfTIJrUhbkA1+aKz5Y7ADfxMv/fPkiOUldlEvITkLfNH+W
bKlTaJHW7dtKTAlZF0cfMeq/pIFzaIMrCSIz1FDsTf7wlUwscsMiHuIDKh0blgR7LrjNv/TJxJD8
eM6xs2OgMkjyh0Tg7ACs+M3HcdmYh12MjjoFxfLx+XquoEp/r7ZNZkyXEEti6apvlcsR6q/9oNo+
vVfvpuiHZz/VMbe/gaPAMULRQYKrskBdNx/4xG6CypE/6dgOSl1GPKDv5I+UQnSmH04SRbbRrpwk
iB1AJk/AlEXzuHqysFdBZD2pHFgF+O82BHRmL9CLI7uVQdmsKXVBwxcER1k/VGUzZmYgRvjQlhDi
WYLXztIVZfW579Qo7eXhXfBg6wbD3IeTkP74y4gTg0ZW6nE5a4eYvv9TqBcBoIgeucqX15Av4Yok
Liw/qXH7pHy2vuatPl33ATYgf2BTU5EgpZSuva5A1MJTBlEO5MAaamfzLrfr8L200yCVRhrG/7vK
oq/KhQb4rTuCUSbZ8/Gxk4PTUYx8Wu1ubjh1bXwueACqoN9KDs6hvMQrwUautH1pjvAo1YNqyY5C
QXrljMfLM+xJ3/jn7xdef+X4OUU+Dnn+BMuvae3c2fynujO1lzQ3chauJzj4xx2xsKwg2SbWKaVn
8r/W1RZwQEU7eK9Vp9TSwQTfiXyCql8nrNGIP6yAwCeBA1U6HaK732+jyBkYBd8cAfr7egCSs2uT
XlAQXyf38CuNtkSiNhUlHFhobkRvoibTWaRf8fwVppvrCK8qvBfwya45s89qWQW09vhTOWHnsIKA
7ZfXsMxulcawuQJVqVD2+OKF9DRptsawcgf02xpkFgxj37KsjPBuyFsvJXEs+SSPfcvr73d+8FtG
gwhx+u/m/CnFBruXLB9bT5f9yOVSCatKZGfUKv4UcEZ/h2W8jCNYngoydtHt6aWtCXyJGW9fTF0I
SoJRzsMtHpEk96MFj5LXU88l1qFzjRzFjdhaUwKb/0o6sbnK1by5jpbgd2547Vylf58uBqsflVeA
j7PTFRlxWYTlXqr802N9gGUl4RLlptJyocrc66PzrS36bCPFME3NwsPXvSGK+4QnPiKafRR80ddX
bPkrXvCFyICbA5EbeCX4K/Dp95HGc0aR6590yP5QTbjKxQNSh9xIlOxA3CBGrOmgW9osSav8TVJJ
2ds3O3hkCC2Ef1djICj2x4qubzeSdeHBBfViF0nWBk70IPY8pLxDEURkPfZpgnlPFCqqWOV/cSJ7
IAqUK8hia1FW9zMZH1VXGl62AuawpDCvh0UTrZqxgW9lBW57vm5Rq2KtZcAcEPoOURdxYyNieLsE
1E6W72NgmXSKmHBiIhs9C7ASg0GARdYZw0uBgbmAxCNDHBDoLkj0+RsKflum+FrubsSthtYkCKNU
Z3qNwPjWH5oVtwiHooGol/a0zckVNrPOdqvRdbRgnd8gxP4JHGFYxt0YGKR80GlPAs36EPhxrpq8
gL6YpPR662vxK9lIp4OWtwAO7AMf2eggT6E5fvF7+wuH5W2CiSeDGsfAlxuLDjhuAHHdXyzj0DI9
/nrszaFJ2JGkYQUXFcMlVNwiCs6jict7KvqEZxi4K0ppINOkFG898DZ19t09Zsrn/0cNIK3uwYoF
QoRL//rs8RQIPkapQUnwhVSKilE5EY2ijJyDyWB6SPUHSYmjw0oE51fuFM1NYDINVwF2yWwTDjSY
StkInHS4+BOgfmAw3AgtBYD30yt60Rx+SGNnZ8/IRwG9HS6ldWjcFRu1J7RskDMjtlrKTC632dFS
/Rcz+rLkoyr9vSiAEHlG5vFadGQMiYFabeC+9oOwdpsZ3N1MlpvqyxT8qCd/usV0PtcqmOWfcw2H
3lnUjxKaFmlgo8Ytbei1J7v8d6Qc2V9ySanybNTSgfPbj8q/5PuWsCZwKsylpDTZMxhPy5fQaGVW
TY7OG3DX0rF+X9SIjvGkNkxkHzXB+g72ycfxX5e/fU+DHxP63E28wFR9a9u+SDb0q67dAKnSiszE
yy884m/uio7cQpU5mvBAo3laBMNABngZk2pgLiLSSuJxej90zBkRzHIhu9PN6OQyIlr8wHpiBmop
oEYHXEoKQxWokH7fRKVasTzgKqJupC5sMRjewy0q5FW4306n7UGTy/hq2WenCwVq7unOq3+VP/6D
5t9+Ons3O/hdthyYCC3ik68detK/UP/uzmzFY69xE6SCfFdny0D798YSziXPh/zpESXBpL7x+VIv
Vk1ndrM24RD/strJIKuAZNnAAa4xmlcJNVo3CGlWPST5d0nV6YgnYhfPtHu+v1wB0qAWoQe2Hkr9
i/YHXeAeLoznDlLgcBi4Wyh/UsrlU0vL/7gbHzYOQgPCwO3SUGHFue6jENjPzMoNJyNCb/GmJUus
reIizQKj0Ah9M2NJPvMXCsGeLaS7cJkNLsLCnl89BTuDC0k3hlziKmWmgTzwjlFT2iQZ0MXX8YBQ
/1sD1HlvWlnD6Vj1t9EHCFBzRVbYficExuCIPDSRxaAZE83CWjbEvfq5S+VTXQ7qwjSBVYTYJ+9p
cPx+/y/aN0vxkFEqhNpXRKOn2l6hA1e5GmGwJh2SsPAbcwq5z0Qb/XgLKtKQAe1BOG1xNQQ7vYmu
iNGMrs4uENALTE1ZK0NmafQ95Ak/qsv4xv6mNSVshkoJPsGUccg/tFg5O8PPldBfLYIBk9d+oA7t
YvRoQt/WktkZHPpWRsOt8CNdKsmVxyNmljxOC7kPnYykGJoGxc/BtuIyRMiWGTbCn2McupUmcHlf
81e0dxJGnd0O9EtafuByrr077gbhJ8fK8DnbSfmbLpBJ9CCq+jITHxeaAk2Ml/VgTfdSxVHlNEK8
IvxmU8LmBr52CUX0Iw2OSrcNazikWDYAX+bx7C72933kxsrr4C/TAd8jmfOsvydk37tKJXJy+e8G
iyxRluR51ITRQHyLjyPt6GGGjKWC606bumzJLIT7E3rnGQMUgf10wLzIL3rgOXKGzU7RfG4xLV2a
kaegZChIwAb5PsU+fTUJ28cDRpPcQkAvZ3jh1e+qI7xKqKm03SWCtCIHKhEXDDtH6kG98zcrvp9f
F/PayYNsFXLV62nMBi7u9CIsaju5I35HELjt0enrvwGr7Uz/c0Oo1joREn4A09KPk/ylGflj6j5e
4EGJF00ci/7AvrQktB8gdV/QjPqI17oYlpxDCgheievHnom/cVKGJ17TNdvIvCOojoHVsO8S0adj
cEXYsaPt5IKXYyTMKhuOFze5zA66DzZW7y7FIqNWTnquVYIjhDlkQu0gGg1B9Qx3i743GCFDszDR
EtjOnGcshcPtkIVdgrGm+31NdPEG4vPSioBCYkAefL4Tlkdhn5/gkx30kB/5o6een8QLVlkrrJH3
4cM8UHsnWlVgJaRrwfm3+ripKJRP6m+S2YSACsa7M+roRYW0qecx/6u3e+VAeWOmW80GbERCXVfX
3hHYzr+fVzo5TCOIIhTI6eJM+YFb7nkeC9vH2eM5XiTLccXBLmXK3zCMcDuOCznxV6BO9odlagPw
uGG92VbNkP3CVSZaVV+ntPsVP04OG9hxsNdka8yVWwrCoh8pAYFev+eoOHHjmtfxOoRf47jo+z0A
T21eLC1WRYKLVS2kcw//fqOZmN8jOwu3DQlSqcJzELfUPp9veKeewRquDvnMI2a8zUbymPGJNXZZ
uLI4JODRULRfuozmAakDH8kmD2wuS1l962MHmVdHucFAgl6RPFiMNii8kIc+wlof+hee5QaNVuQV
yZSFGMlzo5mhkmyxWVrCpdmR7Lo8X01RXkWBaB51fFZV5blVKrm7fl+ODIzCC4T8VzyZryQyCWxw
xGczNgbtw5J5KmvOvoiLCm4J9zRgFFT1kS1ELprf37kkeznv4f3vd6sQdNDqK5MVlFAQiqeBTH/3
lyZJFDoGoffs2NALIABJXoYIPw5rMJ+5PSfL+dhXFdRCTW+FpfaK7Xka3yB+u2RllW5upApJZPXg
zRkBDJop34xyUHuSHIh5AM2HXUHtVkNxm+C3iouGdU8s30glPjrCAhurCxptV00mjzN89LaDHS1y
xU4F6xkHbqiuyBuw75t1IVBSj1iAOnjNF78RbrsG735sEy4TPmwevgl6rY4uzxzH3v73qzX9iZca
KUif7ft0CRJRZ+MU0dPUlfOJm+QilXdKJicoVLN15SH1leoD9UfUzUWSROjCWyvC5LrmrtKhNU61
cS14QnCPpMyh2dG80iYXRcK00eNAqPfLh7GXyVyGoY4PrHPz0hTPJuK61CjaFmXie5XamBAKXsyN
fid7UVPZQesVJk5jxDMl/TtCIjApnE7AXv+ePe68En7MOBJzdEZJgb9EXZViA587zCJ6sPdSsstz
qzMna+rINm5aCfPjmql/PJgs8sCdC/5OgqQieXQPiwHEUkSVxgpl5F+fPvt2E6JjDu66LrxDcw9W
KA7NNLGOkOIE5FfJngKD0qAfgY7poKDttrbM7bLBzdpbisrlw2HtqbjCIkKx/M2Q1gcvUFK4uqPx
aWA7EtQTrMMybAz/ss4UHa7o8HbPnfqzJFzRwVWWgaDFBGCx6+NfqwcNi8t/C6Z0L+v45zu0hu8Q
yvA8fqgP52DUqddxVMiPOgBL1SdyPTMrD0/+WOzYann3Id/pPPHaUwQkfP/760WBe8XtRHP34Og8
0t5d6JJjkO3VGsqlb7/RIxqZlqgwncuw1hctD3mNLy0tc3RgjsZ/iS0POjlGOVVCw5lQH7KJJPhQ
PF/vLEqk19IxbfJAhHrOvYdjFFnjc9gIo/Muu6bkiY447LeImZ12r5Xq7w9J0ec4boTQN/VkYImY
iWqfyOAVUHVI08GqlvigYDOtTHUGw22BBxUI5aeDr/e16jDUrmLLp/MGxB4hARvq9jMsyYKVJVv0
Jz+tEUUDTzEtbkxs0K/7bHMUzAeCB91f+fZqlpRQkaw1K1WBC6rZNLfYFs4mwQluca4Cnxl4GkdI
VXUEU7eUElmBdQsKRg1KKKYzRwvOPH8M4etuT2ZADFmZNT+QL8pW+865gYAXdB2SSI2ny7mTk5R3
9xY5OOnzBvVYIDe1gEXkJ4wGqm2Ai4CIsq20WHg2sMbmvHXnbUzYzI0S0JwQ5y51sCTIa1fYTtnb
5fK6I7FcRH8oiugSzjMRHzfNbhQLAkNnDLg25c3cVnJUibZosCoM9wyz7Iryu+Z5cTplmIQGtuIB
FKtF6xqBq3oWILxDCaqQ52kH+67Bln5HB0G6sF7GbZWuB+JahP+Gr8V498zSQ10xgfMefREzAwO2
DyHIb4cFL5TzWuvGkoMfG8y5ZcS33+XTp8Waa2x9/4BI6b/iTl9jovaei6htDnp0EOaAr/mT+1E7
i4oZGeBNyZFLL4eoyXsSUGvMtB/9PUR4WVFdv0DNOdNm22IkvSqD+BBU0RKbuMzAaJ8lTmcuhFL4
XVKNysYK9IMAYEMBk6WJupnq55NwMTgdRQ+b1i4BSxY/cHFr30CQQfsnA34IPHJwmSdIK8yl2hh4
pEKzunOAumbQDQMqrv+yCoB0jjG5eFKYaDdLlmrhobAS3Xzv+77/qZEd0FWHgK1PoBByqPPrxmjS
BAbPHC9zK0+lDq/+Zcrw/Y5KCoLQpcC844ScHdGbH23Sb+d/E8w0veFw7qeb0GW8+bW8TOOmCKNr
W5az9vw0wFDAGal5nLnDOGkWUuVGRTGqzzamtLxL2fRMHMKTTmFQnwQAjLV5g6hRfqqOA3NUMy9D
mEakBsY8M0tW3HY4xnS/W485MwkGvZmzzlk+CTEjcUE4KzG8MHIrm6eXyxQFLmPo9bPcURCcyLuB
kMCyj7eL1uWRI2grElFUotFhgOfeLvMzeH/l0ubiWSjgihivx5po4jxRNVqV6yrGTXLYjlQIUTHD
ljDIgZRFVHqDc2iNEO8UIXZ5RWP8ffM3NltL4s5JBIA+jJvJ9JmECrxEPbXqWXe5PUbnlu9cpZWS
QDgg76FWdzB1klRnwvoQmY2oq6iiEhurw1/QATk4xb6Pz19b8qErRoaDznJt8L+xT7Nnzomz2PFO
XQwttnVPLyzWM7oLj4gEgUkV9y5ygV5X/RnnWycYvLi9GcyyjyHdrHkoH/fDb/fksGhK8IcF2Obs
MtsjATBBe/uHf8Q6ebKFNuXwthSEAaI6XQ2Vz0Q76wUMMQ0yWu2MLyavXblTs8raMlFurJqdFfbB
AMai7PtR4k3SUQmEC518CeePebe78rwS+aS35iAN6zpdJOxqv3ztu3wtbovMJlvXrYdnySruRlI9
2E8CT1AYndfgFTSVzO5a3hVDBSzYo9SBYwwiRGR+RPCV/PWU5tCNgEaYTY23ap1heVOgoWwZIbl9
3bTmZMveeo4sy3oNh+FuZI0VaXV0gK/dj5hM+BBffwD4hKY4sKFST5K6OIkE0b43Osry+NTJYGdw
86gw/hX6I5FDvmKttTCBMZQCWGUrYnh5oPmWFY37H4CeYMXicMoBhCepdnnrhIq3os7lwv0U5aDZ
B8Qw+EDnSiYNhVx4dYE0Z+HuTIEvEvT8yccMiTpK5U5QGeL6gfHPP+aFwOJa4qzQD4ooPx1QNiRd
jWET/ComrMVEyqxV7fK6YmgNElpYsOKsXMHu54ofmMptLbGD1W36ek8dRk/AYFY45aiiwMD69y05
KlXzpPgE43owuGVgYkn26yiO3/y5QiuDHHDz/lXP61KjDLWGH6WU/8kW8yy2x8TDqZXds15h5qxz
Q4a1ofGTL6acG/3iKJayj34MNF5ErAN2odwa/7AUFnyk3UkGu+eMXAuXRMrQkAn3s8YOS4r3Bxya
ZTqZysZ0l9h7mmclAbG9XSCASjvC7uK1L6A0Gq7WM2mZDjywjnGQvX49V8+RKUlHy/sfrnnk7u2j
x4EaPaYomGv3LxLaMBb/GSK092C3899a/0XQ4LzA9m4L5Lw1bm4Hdi+T6BaCjEw2RP3q4QwJNtdX
+2ajwNWhdtP/eKVRnXudiJvEc0RUBVxLx5oM0oOcNvi0JcMkZJiIGGYI3z2998B0RhlEj1I58bz4
vJ2QK2PBWS9bCSNVYOJSnAZuvQDddZPEdA0wwqD826Qkx+3wXRgByhig6hVUZq9H5Ur5t/TqDoMF
5+EIDLDfD5oxsqlOPTh1y90QXvsjZ4T+zswpblsdrc9wLVClsX976AVPW3pISxC5dOrQlKeDAXop
CnIyBX6VoUiRX6iLhxKeGb9houcJagO+BqClw/8DmYg4j4Bfu3CDL/LwCo1IKPNkXIcM7IGK01Xk
hkaHxiQ9/3PcVl0IK8Lvse7vGwYXtenF95FKiQVNg2LT8qN8uEY9varsP+wmmkq2ZH7ay+aOJQRg
6Vlqp+cGbbl8ZKqtq2z97fVb6CtAXNZ2tlRwowpWgOjE4EK7OHlZdDl7P1uviAOIyZLVidbROV0h
dzgxoPVk0oKJvzt6HVd7YhcqJjaNMrWD+z89GhWX4g0ka55/1sdKowYyj9lu0Smn7FORLK6yhquu
6j7cyfhLlRZqmLWqk6H8Mw3+aZe/qSVc/CsD/KnmNaE7mOIyaZJyNu+IhQrSYoV0fcFpMQL4J3jQ
9dlMnZBUpfMV6iCNYgksLU1aRpXshS0acPKz9U/ND+mXhVATIKZLgB2sbb555SPvksqS0+YmJ4hL
WUjirMKfH/j/CfR0+HI2jaCPhpFa3MfoowATadX3NAEyw3v3tRQs8/G3eMFxeB2c/lGveBsyuis7
h1D5T0biZR6fhNBJFFNW6jeL9OCpWPFdfgHM9ruzxr+jrZXoQlG0VTVhfvMSak9Ex1uD3nXAbhQ/
HURSgnSX2lz57KxOCZA3KcLapqx9e6K/UeQUPC1bYoeP0rE2nTSQrLnpz+wQcbhFsTwqzXYHEUX9
/hkz9mxGqOLPEN59m4+Q2UZypflp7Day14pc1jGRBjIEpz2inRCrY1VULc+faQYQgqyivN90iPnf
EmXW5i4KPy9jsQsiEG8YVOsafcy2b802Z4ETB2Vnk6dNgrpO1L7iQLN2wibF2rOzAi9nzH6EjaS+
vLkenV6ZWfj2FoZu3mJ3aqkwIdf0BQtKX/FCNOiOD1QjSEea7GyBj4J/5/OPxh0X4mgbS0jS64nY
4b9lsZU+DnYUq9hPsa3OmdB5vgX1YEMeZS1JnGzYbHU5qM1nWTMAicJIbvwn1bUS9dmGUyA5FwKW
7zWTe5uNfxCrJMnlYxKNHT61UOkpoV/J//qDQj1C69ru5ZxvOSVMzT+Jx8bl09HzbynQ9VgRR0pC
haiyH3XCdYn8G6VUikT1Q++OIFT2yVzgCjykXTJ4ClFTq32gvEL8h4BZ6FwLO3QgVgkoj8xA1lr1
YD7DSSlXmFCwxsllqOFd6jvgR+QfMwSjSxWpP8TTMKICCTe79ahXYIpAayqGPDAO00iqt3X2p42I
v5uLhwRIQz2u6mwsPplRWP6ppKZmIaPCIvtRE8I1z6VA9xo2YhsWgz0Bc4ftmcyC1IJ8A8cIqrb5
xmmXLJmXGcihnjE9uDXbnr3qFaJ+GvNcmnWSA8r6C3w2paGzt2YJTFfvisvxkUOGcJjBZUQkGrnI
bElRQ+8wHhIdapZZMSqDpCoXihfdyOTlbZO5+EPLcsscgL4nrQeucS9QWOo0KCdqSxbud/19tzYA
voME1uXpixvA0gPZowp9x98lQvFtgyABVpKvl4yJrKqiGCJezVNhBvaCeWxo05lZFJNjvdQ/fbMB
ZhkwV5WmlzH1PBpL/NggSM5+pbD7ah74qlpvMs/ZMZN8zqD0pgXjYJIwt0iDqFN2ZPVqQybIwCkM
/fw6PORpwcaPwXlhrSeZy3jEeWm3pVwbGq9XSCq8BymlqzpZg2Xu44oGtBsB3/ZVWSkSnFrcbt+v
Gzg7qghPQGirU//zwD4TgHn+puhSYuBEuXPowbxiDURo/Y2dfBFoqHQCSlcl6FoS2SIU79mfF4oB
ZpEJTRwxXCnPYVPxkk/abz2uQzEVBkBlkwz3+a/06TRB1smrHrfnh2SpIrsfO6mHC420oUmYeJp8
WcrmD5O2gIPr+Nt8ame3Xg/TXzZJnrl8CEXbkeyQrx5Uq1ZG+7pQHIhy8nYtL9ikPb6Mk0tgzMh8
FYbVBet41WwOCBa6NwL9MPwWTPH6zulNHNiWmb+wtVfWT9FHl0Hr1LI3ZMAFEoWmIUpDxAwOWyiJ
SwhQ9eqCkAFUL/Y8bx/A30xK6d6VsY3eM+EJfYt09Q0zQcSiKCTrD6L/QHRHKdkzJn4LV/pbTKwY
6pSIH2mvy6e7JKztZj55/pJs0x8b0TOMcqjhurcjRmCqpHCyzolk4e8tq44xCF/O0X+udCPZPySN
LAcE3IiTKkaHUQ6ftHxkRHrjrjeCAvP94ZOuqIxOGefwkPfaXoeoKeAUHfMVm93RGwdEOXWuJQA7
z2N+FlbfQ2iS04ZrOGnCh/YgU51wu6t/j1LGJOcxXj86MxAeA90xpz8CrQAEs9DCU5UIkty8CghX
PL7grT1Kj+1fwGUldgRsc09HJi5XszYuB6ciaRd6VxbYWI81OhtS9mDC2yLwWLWZV5rxqdvOB0tt
1/aPds/8QucuM6kQ0I5Su9CPMXouENYD4n/ahyf6ojB+MLxe6u/YlUEMGSUeUZNvlNAz3u464LbN
Ggf7rlP6SA8cPif8RoOqeKnUH0yxh7LO/YVUuxlQdzi53JkOISrtrNHLrICooX9FGMhn3wWfVoLQ
kcOOh5/P9PVqCLWg1HjeI+HUxvV373RqDpPQ4mFj3Mzdx8qll7cBM8ViJyruK+8BOY5oHDV8GbeM
3+C8f7DNth5BrG4njee48arxzRiHYaoI4NEnsXHWTgkrfAIHa7mUc/zGly5biiVn8/9o5i/vlFqD
wd9Oj4ImwCfhxos13uwWyJ6tspSYh7xhR7DCP5sI8VfCTc66pmYHGTOXcLqfDT395tq57oZ8wfIc
6pu11S7ZkmKfTNYar+Dl11NwYM190JQsEg7jcwXblEqTRQocguURof1diGsQjc7c63BHdAzTYpIJ
ZA3PkjMx0g3JsDuS5JxpZIPkyF4mSTVNP2mvI3IFlUlVi3oYEIYBxEZ1Y5RsxnzEoYl7AyWLpHyP
m7hY2dbj46/6dLIpXNrvAtSX9eqTw7xB+h0geQmRpfz+podsMOZyHj3ZtewkYgexeAHWfo3OHwiS
gsMhP6AMjrcytwEEkqVDcf8RifkXDlu7/9D3ybK9Yjt+dgWTOaV5waUy4LpDNWxlkJFe2yhQANSP
byvJlwyQNuAefCwXbUJ7Se1s0HX5aa4Kl5tek+xC9LuiHdTYYrwtAWVyyUXPCRG7EKxq/8n4DVBo
ETBXxGeOUFhmrENM9hKOYa89ACX8ge2id+2VEFqhWwojEmX5HC0KQiYdS95PAm/8a/IJYhAyP3tK
v9KQnjqSzkgt/StePgZKS01qSA/a7iZVON1XpbeLVZAjC9RNDqeb5TjMp4m4kLaBcoU2ySzatbyQ
EnLCET16K5knzRkjPia6e/PSGM5WUD2PR8XPkD/lxFLjHmpsNnnJhQLH8BddkKp9kkYxuDNcyfJv
oTfjheAPevxF2QUKicM/lntGiJl3HK8VHckvjP3fEecKGxGhSpcVB/smfl0zfkbNMlR9f7VwhKlO
zr+qCZj5CBp+9+W957b/j4xWRcsfp4JaEoGWXxI1YJXwdKM4AEirvPkHbvujIoN9dSmf0xf7x8OV
+ixDSVOUxp7Y/sFf673HQVv0B147puT5tQ8TZWJf2AOg7Y9Jjkhlvf6q7Bi8698bmkTiHmXV7z/g
lbFRZokI6kTPQkAVTVJ6WvdYsA4M4RRE98/+5+dAsLpW/UNAE0Qi7xi91/gZXcScvFnKrcg48Z83
IX7hbq18dEVWQhKTZShWuk/6kBOqwl/v27dYWKNBY0+OcLDJPQgeX+QqoOZMjKoA1/kpTjK24uFd
uRZwAtts5zIOc6w+2GMsQMSuXrh4Y47/BYWuurQyX8bVNBs4FxHkaX+AoEoC3peHwaNJoptZNmsF
1D9znidUcN/cEqEZ6pgcnP/zCWetquE45d+koc2c9cZk/qRwk/mNtGBjzElaPCqf7WMj9E5FcYTs
85DSm1Ff+83KUrM/KxafeBfhJlr5bXvzIwGS9T7iR/PfVzI4c9nyW32rC1EuuhhrNqwOwekf8NxR
zPHqhGMxH+lc/GC2Cz4ZiwiB/SIxljXyCDNGv5ZypD9eZP0tEOu/hSB5Khg10C+hW1/yaTTKWUIf
M59kDcPb2T2GSnfMD0fuSaX9/aGi1iST7uEOjv9Pput1GrN4cajrzVInAhvCCul3Zh7hp4velNfC
KGh3T7KR4MOhxxAeMb8JLrU5L8eFmEX7/HIj6vE/iK4MEv7cculYwPUY5yetlbdihME5pwbl5Vpg
nehUg/JzfhQndvEr474hay041A7ejDlFY1QXAm5GbTUUOOyMpiJtQrbWeFuvf2RWS75iwWZBct0J
xwPjXFQEuxEWi9lQjM+b21mGGlIHUxVE5+sb6CbyxFr6E/gK7HhLWbMJOnbLzX8AWH4hpki3AGJx
K7jhWSaPi7UbATRH4TyI3N9Ry+hwqgeMHhZW8dA9G7P//0/ypx0Z0VDbu5Xh6MOp/ILWm7/9KHAA
q9CTPpayX9W/UJ/ofBts2t836aC4wscloidE47D3Vci7DMj98JRUTMo7xVPRSXletyhpEdsbETAu
rrD7HWa44QtmRkOwBVTBcDbR0WinDnCFjqw8Dm8b3nwcOY93/0uHiObXb+wPfB/Rloas63yqPsGs
KvQxN/t9MF7irBNgv99FeOT5BXrIiroGxKhkdHmyhp/kYSRxpm02zw3HBYRo4svipS6QUYnw+b5R
EJuKcDXVcHtqVmArubtka+13nSRcrpqZWzThCsB/UOkGugbgqPXL4Y8Lt6CVqQYJSnYA8nchs4DH
mJ5TT4J3tCPmW9C57RZgWLOP5MO7XAMCDFvbLNIX2Oe6uRTglm60mKCxrYgE3mkAp5q9BEfwCx0c
UjTmWarzZdDZFmklHvlYLMxsMPLa9iSDG6zCHDXRUL/gr+HosyiPL7VEOY3k4sm33ST9dwpKP4EN
3+k4domC6s7RRS4Q5CfU22178kqVzGSJ/q18zjlSWXcREX1O/MwO+FEE6VeRMFSlwWCl+MT7avsF
K6gkPhq4UXHkXndbuGML3yDWGzWtW+w2GwEMmPgRZ9Umy8VYq/Sxy/o1Tp5jsO/TggY+rQ6Ao6qr
dBQAs5qWdaG+jet3h9Isyems52kN2Ua3MROIuNutPQUpLsVZjLPdnyzEv6O0mMq5doXMTX2bcWwE
IfgfnA03/ZAFB9oitULH1G0cBS+eJo5t5bi6yV3kL9dXHXcEwt2wIH84ZzaSPRLk+VKUYNIlh/Ql
iZKXQmsx90jb+cGABZRw6UsBtlXadf9bEG+ZgnMFMmOCGzLMq8H1/Td/qcquSPeIdnGQL0LpDsv3
eK+RFOAvo1rWvh+roA4PKzAwhNs+o/zkU/NRj0OZj8fKRyuQPYMIQtlsLozZJxbcVzCZQxPkXEtk
3or2t3g8+/Qln4w1+hjRZDUZUEdubfDv+Kasc/lj9C0q15xx0qk8KTkAZf5dXZWm1cmiUe48afGO
5M8LdwLFpZY3KZPBaChzIHEebnpKrZbjb616OxT+96DUN/nD127dLAL2aletHRZpjPEDC6QJXlN8
+nmfKSu8F3TdnTWCsad3q7/9SwxvxtPm8dn06PKHQLAjCyb2Rke95ovZhNilko2QOLSn8Ci4RGcf
9hOpFsdnam3dW0GV408cajbGH+yUjPD9omYtZgLKpOcgrVp9vUHf5DzY2xZjd1JCYKyDKOWm/lMp
sQdzehwL/0JiiVBXmYTYX1MUtro0iPI+7vGcfNE/70tHIBthEYTQADB43bPOfejXykYyDHBX79d8
n6JMP5YOixB2o/oSelQpOUjsi/FZvOVodu8cmggiUEuiG7WhdtPllBJxDOJRUeyTEjfJi5dJwNPo
1suna9FSV6A/bOuMkUsbUNycnRCgGd8z52GWMclHMY8wBWQoa3JJIjoePg8gZHegmfiUjq2XYZZ4
Xuyuk7o/QHObA8efxR4O0CQVVrooDh2YC2YCIT1zgEXCQS6vALj02qfjViWhnn/wmgMBSaUuEPyK
IrNSfZCeDF/BzLRhwGcUbgqshIupPNjJ4MulEqjIgG3dudJ8zb934erK6RLHJBwAPknhjUa38v9Q
rtdIeykJKstyD7yrekvoWua/K/0rlyYXeAEwGrsfH/RRze9hHqJAnUb5wMsA0BFWyG07QHCeVGPS
Hn434x6JY/0nzU446rLYnG7cCzxRARH6XOTfLGwdw8BVPLHqCN3NxzgOQaskjmO5jVs8bv9nj+3d
l4IHTciVllXRiB3Z3ePN5RUrXlGmKWgbKDrF7LyPAg+T1g+kwdm7BeBaUOAW0cdSIpF6AMpHHATI
DRVC3canCx/CElve/5yHap82oGh1pIJtxwNG5pNtSd4iexVO/AJDzNam4ZA4dQRM+A/oMletYLVh
CnsGoiFuSAasvbA1wF3tckzSpfuigHWxH2dB2MTau5yl8RaEUy9ccnNUavshhsZc5QKlPCE9/BzQ
bVaIZbihzGw7ClqCGwLBu9267l7i4ohdY9lKtCTl+AlJSOevklGmG1HvZPEBLgC1r44Pw/XKUi8S
JHUazD8SK72EkoIy7MWTbqYzhNPdQ3msk3AsLBw5pCzxssYd3s8JQ3fGxDcAuWRtaxC2ehfNLhbz
nFx3Cqq7Rbd1eFzh/OA7dpojPTL0FepGlqUHxVKSz0NdI1MR9xngX82fznJ4XZvr6o5Hr8dLXqF6
rPJyt9FV+gCqPB477+ags1DHAUMVGz4qnYw2HCvr1FnLQumI+qlluKHsSYt3vbss/paZlf+IJhci
oU0r3cQ3cBNkM7e1gNIDuuonSCwF7b5FBZcxd4RTlvn8OED5xvkTEVjm3d5xABBnZ2lqPbCqyvR3
XSvCyYMudIXCPfDwkrhoafdrvXx5U8OjTuF8sejpYTEhe7pyiJaPSruq9sZZeNBgEXOU0tJzn/A3
6xDJx6x1Evq0Xj2eOupl3215lF85L8DYYw9S2bxDWQ2/9qrRqEDmd6pcvLTnZf1+9vDj6vaa0pvn
X5HPO/49Hoa8vFXD8U/uiNJQp03IsN+H+/6VA6aifc7yizShEAND7V2ONLLY5Nz+tJ/DDY0LzXw6
oeCJnONUp4rn4zd115XvpJoZEZJJy0FpAgqiyealvmR2jSe9oc/3EQTITzwscoPwecRKbOznTG3f
k9vRHRSCpWncDiwa1gM4g6ZK3ascYylaF7uDtBUiBGJ9QUAPsR1keeUypXpf74gVeuG8lIs9sZe/
6iJgpw32M5/Svm3kFSNH7BbqsbJULguuE2Hy4X3p33TJVsdUOofXJjtEOcpIhGqj20S7TOUGaVdm
j9l7F86WX1FaB+yfbWLAg4i2oAvIOBL4DgNU4BIKHjzLTjI4rB4utTWMwF1+AbWNassBjNXrKDnA
IrmUaLmmFFR/2RGQ8fdMhuT8i6bEiuZz268EFa8F0b2S9rroNEc498P2BuSUh4wXhEw8JSCwl8Iu
Y8XSP+VYsyxpUvZyYFh2dZsEWEPDgxjcbemlvRzrUCRmRmZFxLrE/vkyBlRJV3ACNgyRDPEMGZtH
m9LqgHAqzMbeZWSqGbXbgFSoSlx+zZE9hf8/PeJalMMYRbyJLCSngSPqLazXesIfXsb5sr2lUegt
62PSQEqAnoii28NzoE4yrFB4s160vf8RpePQ3kfjQ99EzZN/3qLi/lDeMxebN+y8olcbxU7Wwn+W
eYT3z7b7x1eYNJ+b7O51OPkS2f8o09HkBimY71MvEJ2RAZfgWyWuQ601jgEuivmc26tDT+5eEUhX
lYsNKZVeUQdzcxbLLPlUT2uAnFuejbkB6JMl2MkEiYKMx5rCrx5US9xGdU3UYRMKFgfYWkDUOXWH
BLYH58G/Lx7/2OsfUSKe6LrYhOKQxzM4fCSNUEixNAnrhaBtNfD9hQtD0+qBqEvGPJVFWnJf2zpv
FUfZ9HCTFZIlc/foietcLXWxshpIhpVs6PPZN95mASrLuyqdm2Siy4roTk/WWrwnk3bosfZwYzDs
lMWLczIwmRB1f29eTTQ44jbJ48UnniNl7PpDY5T3BRsIwDbkJv0AfmutG5D4cjwYhj9xSPvzpfen
HZTSHeHcs8kaBMVvti6V72UB5aqIVb1X6nFm2UxBT3DjekLnO2voKlJHWYYHYBrBf+xFZ+O9pYWO
Y5/ST4U5FeYWh3cOK2rLHgW00oYN32unvAPdjG5jZyiDg8ingocalnpTHSbIXZr0tWkattYgTq6s
Z0kSI+Dou0sao/I0r/hzv6OpTMObDZaH0ZdyEwLnq0oAkR4ZsCIicaNB8XG+NhLh0e6cFgFLCTxa
Gj5j6l2tRz+I29kvZ1XGew7Gpw18pPxepoJKhD1rF+Quxz8Qx4dGZ6GXoUSjwe4sGwZqz1yBZt2m
PlR5fTjtAlo/gnQW9fAr1QRLsBYMfEmzox5kM3MKuo8IuKyLCfEJUnI+0yh2DVljiMv/og59PBv0
Tgl0oE6G5amlMSOgIaIf8T7w0XZXd0ItSuN0XBDritHcTfnhFFTm8bUZtymkuHRlUQ/4jH1NqKLT
rrbGrdGu3fmir7Zedk9HVg31jXwLtoltd4IMYGaylOGHuGMZJOfbqcJ9PhKtDfSGU659Ym2FM1fD
aXx0ngZqafDoXGbo4aONlE148JNqQAqoKU6WATuZx4MMIq2jsOI6OcZQwq73KbNMauUoZG5h3G4g
Hdld8fPkvbX+3AKFxcYDrHXMLFg7DO12r7wuqZPlSw8k6CjJy3jI+P7C/v+Ct2OhADrFV7tMPOof
GJmBP543DEgWOFbtXCF1bEXjSzTsKl3DsscBz17GRg312c+9Bgj+vrOzOOwRHu+IBv+6fkRa2s4G
YK6kRzqUqPVZQ3aFtQklBwXIJAlsJJQXMU0wqjKBHlezAh42ewbyDAPcooykCvShYY0iYWClzmNc
QpISxe426v8DgEdD8OuxbG0Ym58NIFTB5c9P2EsV16OJ9VHlzpLZruFURrOV1R/nKOsDk49CSea3
zs01rdHFkAhAceAUigmNsq4/wP18ThPt/i6Wd6kF8S5Vbx4+JPoGMqo7rLnPZ77eHEU1Gjmrx09b
u9myDfb77Ky0kOBZgtRRrwlXFcjODtINsH6+RQTSUh82ILZ85l7ZBf95m9ab3TMWvzn5nPttEFUu
9ewi+OqT0++KesPP5ZUl+5ABH5EfAP/aFTE+bkbbmco+1MlA+aBHZFayr2GOkm4ujW5jNG7pnaf+
Viz9Ap8bRSljgA/WOA4F+tul8W29V+ROLw+sBr3q1pV61RDmdoMEkl36q4cZKFzCSHiQfQilU8LB
Dv+A7+RrvA1piJRzjqroySePUErxdjE+af35D794/qBuz08VIrbJTE2kU35gOw2onGxGHfec9uL4
TaI6E1NmG6FGVCfEJkDrd8x02/O8ihiQ6qt8ESzMqDvbfzZE6R2AXaiv1qtjMRJCO+5amlc1lZls
7H7DLCC7BqCn7s2lU4MrV6q/G3jSqDVmoeqNu5fqnh+Zzoy3stdf4lvtzKWcenVYXSOm+mPWLYm1
xAH6/yINt6lfqTLMfHNimraw2SWsSyfpFVrSzF1VLPOTnHXslrnwy5+ZDzVMWHUCWzj+jRCQNfLQ
uMQ+k8ireEgmSrzqjeAnevSTwhzvDG9eX/xHOi/EfjjCAjhvZAdJuUpn3yccvz1MceyA8ua4wg85
QU7xD0Za9wjfpYFtLN1QvqSzacSXIBIg60Ezgal7iRlSCydz+1ndKF4Hk8vZFQKGxmC62YR4KVxw
8TME+rWsyY+bKafCNv3YOGcYIvkEKNY0WOBbeZnQX1BbqH26Gid9prf8XKvRLT79DWTdo+3Tjq5w
9By3Wa15kQZyBwnaGysbO7gNAnjueLq81xO2iKbOrQRICeguXBMniufjs5tDA4GoD5yQvdXAKyud
NOY9JKNoEzkKhJAb0c1qw0mXm08PXvxsY+HuDycsGptwcmrJkOlEUK+H2Zfb0r2cn1zu/ewJ6+O/
2KK9jthrsED3Ai2gUM1cMlYsOt7A30fpZx4ohnJ1Yu6eLm5ZTbVSjWzmguA7+a9FgyjYFY3wfI2t
FvjDzFLLSN316FrZFEpxsmvrmaa1LWuSvxZOkxSHa+eubWlbZPNXTFTd2QUqeiBzv85ylTsnuIXY
2W70gjVeUgbNslRPO18w/GqAj2alizi7n85w2qtF9HxaHltRtpYOa7Hp1iEKcp5iRM87m91O7WnR
rDseGQiY0rXiIs2Li00QDjEqJUDV5hO9nC8DJ6djqLrcYmMZzm0AErtIzqZfiEUXx78We/WJjBCV
INjoHUhHq43LCP06yu7pHsGHA0/8ViNJSet/4VATxmn8tTaixigBh1EbC6juA5L9WgMyqnpTJXi2
pCEW+lN4awqChcaBnLJ1Hobr05Q8XDZvWdn4gR3/xmYflpOC7DF5xVYSSBCIHuT3TDZJYwnKcygt
8b67CquKbxM4/0k5+Tce7zZk99hTtOhq9PC0RkjkJifoBDgm/JTcsKye2CoWFcKIYyPzaFZZYqZ4
34gUfehHMPMgSvFZl6dMt1W8PEAclz4hhiCg5Zf2REKLgATq1g6rGBQvFCeH7QN8lGVlAyxRmRYD
lxSdWfYAyTWxrGhWHpNoktXlntFInec1VweqPpPFL+6uKrqkPALnj70Oxm8JB07nBrCkNy2T21YM
pNJbtyv0vVnr9cku9Ij2BXLzGHEzmh84D3Jh9QXfsjYjtkB28tf2acV1ksPtdbviIC2FZCY5gOs/
K9Awz1nh6Ek1DrJ9kOCOzG6YYZrtkOS3Wh5X5OOjhFy1qcRqYUegxPxeHy0Iwe5gXON6SEcXpKT2
0UPKzfPeLfk1/DiRJyPtXl7RBQQxC4olhHP7gaNYvsBlFDOkSVPV1FbnB2/uWJz7NI2bM6hLPv0I
osVoCboCJQsidt9tGUghNoG2y65gaMKoP776DvC3QwZkV+bkfS9rSWh8fYuLGNnpClDzLVg2Gpdv
EyhWF+CUNsInuj36GVcsuUB4ajP211J47L5xovIkJ6daI1vceMVI1Wbx5OlEA0kHIaCyCSEuAqDI
hbseYqxfe6v3FQLH8oFCeSDYTPokT92yWYrUbY1AI8j31K3pvstVi1ls0/rxo69Bx3dXz8e1pzSz
A/3/crmuzJGxjSVWbNK4KiBYwX226otyIsVwtA8ndduGWwHGX+Cpzu6+s3yZvateUpyQ7DRflZBj
Bs1Jl1Xl/JV7f02boaqSCgbOaHgTvgerF5IvLQhmSH9i6mS9EWqybd4oTTlzZ9Y6aOaEjj2hzZhr
V4yCIXtQ3znuKiFgdcHbRzFUhU6SBfKGAerSpu8R5cJqYFGydfIyYA0p8EjZCQgJzxnDqlt+tCXD
oZz9g1kSeE5P2S0qirg6rA/xoUzWlvPtC6AmdaSjaQ4hwECFKLAQae88tlAytLeD1o6SLLxqXEu4
j1XdKoxv2/XM9mFEV9UGLgKICMrRbAQuDVTC0IOSabIpdxNnvKJe/U7o89PNbZUPfL55VT/4jCTI
DnRMWa0GLdopNvk8p1xu5P19RDISvFxNcf+yd097N2bnKT1ECvK0Yr4WgdLK/z3t3tdtz96yGK8P
DfkPc7ztHQG/cqKWwTh9jMdMsz7tbiw9oUoZ4yYyphtITPYx5aS6vu646FYpgFPgpH3IF8Qyp0po
dqGvTk5zN5FHcafciBL6kedlEx2IjMMcceYDDC118NOnHUHn2ND13yHl578iGrqTGFLY08fOuCz7
bHeoTjQf8+9ZlFjJ7EqLWXjijUSK84pz2WMDOYrRB+XNUowTdxlJ7XoE8h/zozDZncmiIlUyAj09
WDZWT+k1tLmup+itW3/wo9g0CVfLE8Wc0HtlXQuOYY/PUanAoWQBkhVGl11RaDGKHuwGRc2J8t8m
a+GfWixGqRFrArOz/r6c7LAg6FJkiZuJXHCAI9ACi3SqzdGK7ynWy5KzMSHRJUSNrKtjCkXphy1E
abmcoK4Fm7rMnXnwymWpuR8IBm2+N1TULWiZhGfSsDTO4fIQHpHXcYg1WhftTQh8aOMbVjQrjcic
WMzkaYFg0pkAe8XrDs9AjLuPPKk8iU0tRvyEyuHtwAcEMNe5Lb84Clo68jIJ/sDM0vOdpqxyauT3
2W/GATQHTvS1DBaXtPJ5WNuHfYv74W5dPTDexlS9MLpb6rlfhvP1yznTvuRN5GDQaRuBCaxPaJiX
2FKKTYXIwj5ugutNjyNFnsrp26M0iul7yr3VGoBFLXYY7BEwJtF6QFtG5X21zg8xf2k1ilCQ+9E1
1HkdSkPYkOaiwq84BMgY3pVBF0scL0VGsfTHCe8hhphOoPPNsiXKH9Vht3JVk/JYH33B7DOQqvI0
OfjFXurjDo8QbgGH1E2CH/35tEWkqsNa+Nvy0Cfj0blqbXBM5YCGGIeWos1GTaYf9UO/bM/faYnZ
Aj9oSMHBCvO8nKZXkaJuLpl4srCZrIgvcx4eFFwA/E2HL7AsiLxjvSyX6bloeL36PM4qK39Pk5fh
7Fjbl8yE8WP+tAw2n9jFp3PXH384bdRFV1zDAUUS4QwrcAfqzNxWn01/21M2aeSQKtzuLU5UiTm4
ZvyZWzoC6etFlolq1aD0TXd2vbN4OQcVequW+RQcXb5MkyS/SFTqSfY6RR67SNbM1cmwK7FEwCSl
uq568T3afjF5a7Iw2p5OoYrIaZSeIJ3aXJZMzaVCZDdmQwWHWYaNXwswSrU+JZuBrWBaNKVQsrGR
FJsAzepSHSHvfXQFEabzOMeI2RS9I7fLhCf1rO5PTL0qG6sftzMDiTabbanlzJI3CidBOrGC0iQL
aEdH1AoMCepKmPWGUSY/FtMxsb9DT+uFQmk1GFVTLi72msS0QtgoxE6lGz6ux8VJpu+QruHpEEp4
7fsOsEjXaQhV6bzuDe2Vuw6mlK94e/72oPtgEtBb6HZJXIFfetJAtWX/1QbatNEbnkh/Xg2rdXV9
bZLEshkDKOFi2t9PLHtkFIQsd7o/2iAtSsNtD3BA3/YX9LnxQ4HstDxgPodwzdAAudIoRvURCLDZ
29+g7k+t4VqC2Uye8mOJxXFeAXG+w/udIIpRIv6dlEMsRRFFypOTe00wXMPAoY28kZx51pEFvT5N
u3sKhFZaQy7evAsQHUlWBfj+i42dJYydirX3eBiXa5bFZ/FU750eqVtd34bBsCr7AHwv2dDqTkZI
OcmXFwiAchzDCXSDiNkypjS9q8wQl2gl+aHgJiqCFmfWIGuAKRZ/Dy/5v7V3jSx/+yEopF4J7dnF
mz1PF5pgVun8n9bB7L9sO4IWEqQ5cwwYK+Z9Ci2DVZ7eSbhoVNEgx9ICcPKaf5MjtAdJWPRaBtif
r1qyXSKbQMVuDzUA32Onf7ypYo2Kot0whCPjnpiz2O+kQEAKgZKBxcBiupsf82j1DeUAYvUG8l+o
w0r0tYVS+WhHwVVMJW+O5vLHo4XOR4clQLXEFhbU0ezR+jEaeBH0xtHUJ/xLtAJDocRGGQf6wb2C
K1gYUqnV3f1ROf+6ze5hNuJYixVrAp4SJKx/o0bGFjsIrjQ+4C1GFZKjSrB02h+ym3mXKZ+TPM7a
YlFI8uKiW4Ig84MMWq0iBrQPvXtCxUWFUOnsp4Gx9QuId2F97Qzl5PxPIVMYO7VEhID241MlS0/7
YucPeFKMgon3gY2FqFf1gP4fuVLVxJAouR2OGab1X7tGX1btoxp1mgUxATmo7u+chyQrs5rrv1nA
6e7aD2kw4rVstnNCYKcH8rjC/nnqCbtrh0EdapMqWU/JmPrSWtwBHelKlyw+IMMRFE5ne615n2EE
L4lguTtL6g/pFEFEgWfGQrvnluhg8Vg+GJsIilkdR79pCmpouqiZdWi614ArVUMxJ2rbZCOubp/L
geDsUWpS14OZ7gqmZ/IF6wvqeIlDhKLUgSjGS1eSb+PcaBtWqJS2A+40zXkMlA13w7CS6Tm2+OZG
Ienng+Txs4o4gZ053quSvTHBb/9DjSizB0QplS9HDtcJgVsTcqFI3PxTHWPIvlYOpFoupDMww+0/
6OSpb04PjbQzavSBTfy0sT7/piAU66ZUHYNSmafqOMcjJ+/gcFLU00pFLKDvqpKghCPsDc3qDIfe
pNIxrY1/nftcN/BALfijSql4coJa941uvfNN1dP7o27VQygsk/a8DZ7I4X3UQIn8a8fiN94HsB+i
AgUh5svzBufyinjrqV9XAV1zzHJVpi7ItPaGHidEomE1NEgnAqLlVtDPp2Y8fgqSIog+Ftjf3GYL
phMm815Dp1S3v9x6FON4e7eMTPenlJtzTQ6iiHXBW7mtSxHORCu/DymEo5aOVBf6k0Zj6iyNXNhh
qg4g0M5TiYrA2p2qnWii5K2QRy00dOFr+khr9rtG/ShmXaSoGi1ibtUajiCPeLNdIPwAtd/7qreT
BYtEsCWY6+CdPrk4MC7p0kGPY4OsCtLSWe9pi+UMPwyNyP6ovuBDkh9PY4rnQuj99Z4PcPrtAMvD
K2vueNAep/Yn4nP6W6ujYSQVb85yGlW5dUvYjPGFNvAKpbyzAhPhWAVbweacggHpqM4mifqwegLB
bmwOZKct3viPf+RCLC3OgYoyFQQawE6dl/+ZnhPmPwcQuM1m+BqjI1X/ZPERJIMqkaHXqP8DVsvK
09m4z6p6qXn6JsCpGmnLueIizczRhTMibYleyBQSZz7GXDLy8XcJkuYtOaIP6hHE7ggU2i9Z1LMV
GjlUsJT0o9TiAqnuCDU8i9NbwlRhS05OAeSGAkzsI/JE+EBuOhqu0lIP/1gZFmRI5DNAzAAbYjMp
LX/C3MyVxUhVxADY6uvXC5q+lYTPkpun3VSUFM7DMq52X5tWGh2DIoZdFp0GktCZvA4e3LIM2aQd
T1ts5lpLNDQiCbWn6HlA1WFSqP70tRgUEU1qb4AcPTDdN3zU6bfywC7KlJUXI00QM5W4sFJn8ijn
vq4zwuNY/usyrlUYatKV2aIeZyJX415aJNcOXGHIjltkNEkx10iQcpHs2yezUXg8e9t2VKI+Dizi
D/SCMXjsB+8YdJC31ou+rxK5LM/o4/LKOFUrYj77EG4ErIlGKSWKTSADqL149ZqJ1A1NSiTGG7qB
c1efyDCkDMJWMd/rZbpR/BGDH4cAqINw+IIu1pqKkHU4DBAsKoLzyH6f6YEfYoBa+NsdOslupS8y
eZPuan+Wtv96xfqBYMWrl9hF68QnVWwN9IsFIVweMmltOwnPdgcQahK6ApBu+avS0Vjzsk4PXMC1
WYE8tktWkkE6SawBi50tWV02PE9hrMemBxG2wbUPD/53J6bOeJl0ML0YVhADjxOg7gHAbxfMvCXZ
5eiGSWdFzV7Ao9M+cw2Ueo/Pau6V78jQSL48CCF8KUpsd+/EDkTnfdCpVW5JWTxe9pDZoinogrm9
RE6/PI8lTz6ZspatRaUEDDpCnt66INnqDFdy0ypji4RYJFDg+hoNrs/ZQ4AFTuaOod6EMfkNmygN
AcV9VhDtWSFX2V1nFObTt0ie0r56chkmzw41NGEKDBflf+jQjxy8nGqzRr3lG9X6zvT/ABJc26qX
lNBny6kAldHRwGchWoX34xpmv+KaQgiMpT0cPWrrI2Gq1BF3B0kfvPwgjwv+LpNWawVVSre6jiaX
cu5Q4iGyQpD/DKdpS37BwVRGyWKU2pV1oCZATvKETX2JFI9SLvxPQznnWAS2GBEiV1A8dYKOBziP
Ba0zzncsInM3mc15eDOrU7POtORRTMiRefLTbYS59CxL1DD3tHQjmGpU6aghyLuYEemwNpxZIOki
ujkmkkRD3RaxrMHplv5yKDwM1m+yuT4+S1lFdc82csC3qNBqfaTUSRYi43t+dRA2l1f/l4l61pRP
PX7XDi6X0bMR8wJgSZZVCn1qWZT5w2QFDhE398e2C0M9x1oWnN+2HzaocVCR9HaIeASIGPCqgKIZ
kvo46ifZoIEg3Q6xD9zrxxmXR3hZqCZBNfqXJmy3F97LpF25KTuseVIXNNa1idyQ8e1JSkTbHLxu
BWNiuB63OO4nlhUPwFHdBROSzX74m2L7U/KKl68Jc261vh86xv77JWDeZrUTZu91SejcAUK0hhAI
A/e6skZKRaI1F1aksivrF7FjRxvi4PmPcQ8n5b9GMebPd582JjcwF1fqkhGseF9M1JNEwZCSfKO/
dpIf4Yg8/ZXW1U+N7gAtjTFrYBgezTmGWVckFXx6igwfSCv5+yb7vwn2ogyX3PXjt1vtcR3dFke6
YoXW/HXBVB0nHWWYdCWoNVVlsEppAU7KTBHuZtOhRMU08FqYM2cyokG5sr9yWeaQY7kluap30xM1
pfNh0QVvEXGJO64LM98IqsJx/jx3OiCC0gei8FlE8tXsoM0cVqpLu5xNLmGcUh2u/14LdHpOwYHx
39PDcK+5he3kWiS2240edJKvTcRwbAT9r56JlJOBSsoUb2kdj09FaKz4NObIMIahkpjd5HWaszH3
NkKwF1OvG/SEHj0GTwDxZWKVu9Z1iI9KbwGm1zAPUqnkuHiWypZNoaPXoqSnkndUZHSelSZLxprJ
DOMC2+Dqw4yVmAomhxaiu1ufJsrmx8soIPmdIVKWnDwRnr7WxbjfwdmbN3NBRsyGjDVJ2unpqL8O
ry/v/SI9bEBk2ovroee0S50K3HR1cm2HYDAw9Z5oXSXHxU9TDpNeBibZMGspDC8ThatGjMV4SAt1
mUhg6b72r4Fmxf0G1f1eZjb88YoshYj3Rd/9lesHlsze2189FWK5B8nOMtFtYx6urUFB/Fz2cwIS
/Evi5+OhUQwvrCj5/2ZFcRorrGUEXvOhj9RfDf3dLcSvhCzRoUDmXCwipM9kl+1Zth85LIHrh6xZ
rgiyvWbtD1MxMOnb6+HALTURVkUwjrPtkzo9eHa0B90VApDfAavgZVkpWuR0913jB3dsMm81CxNz
XtLIoOrAJqArHiqPJC3qU1HXAHwa/A9LpFRx7oC2LiAuSmbe+yymfOZ0XAp+ZPJINzhqZ1ZZY6gj
Luk1/H50CTF0uOh5GD18Baa/VxxFhji85lTk/wsCVb4DFffFRME7YKZFKpxBZCNlD5AckquxasyU
2GB+xPzt15fRbU6ChWCAI90HqylxKjaqFAxYr2evIGfKnLX8a9cC6wFcKMISF/+El7uBwpeF99w9
11VAh/vZMuQagV10aaCTB3VBx/afqp5rFbxWDcTfJE9ewSnN2IpEYqbALwqRjr4AbAv9Uaa9lo3G
q9TGif610aUF/xG/SZGJKCzhPnnJUGbeKQI0lZyEKJ/crJ6cHvcR8hF0HyBKQC/j/FUxuf6u3Heu
2OXIRFW3XbqG3LWygcZVYLvrwMnuUbhJ2l+JS8jk3DadoRb94xXxpK3mmOVRckfiZn2RYoPeeYcN
EP97Dki23eLbEhCJGVtBnePFbMDukwIyGg4PiZVNhbfpStROcqpIJ9TcitlAs1eZ/EMG5MHoQbTX
7NGLWcwrOvyneTkWDUfnw5goFKo20pkAZSPJzqd5GtOzWcK6n24VawryVFFYSnwzOasOAypJmFNh
s8SjkxyX8Jhzqxbo4R2uv173tRQKHY11a9GBgKnx1IBg10tZCTWTeajGOdr1K6Nq6iseDX+Qx6QU
tKWYgc+mAeeJIhJ5Uso4p+SSVXZxRPpKIpCSYie4VjA6ZW3Uw15nucmxV9mfzt7qnhbQWJGaJN+N
pDX5kr4OD7p1ekCy8MG5yi4GdKdy7lS0qxrOWRtWfi6lzV8nkbgjO16KAhS+URO7dXgGf9BEKkWC
3H7cv1m8a4WvWawsNvn9TfxESwRXWvJOHzx7fkpZqsm+3WSKoB4UXFxYxzN+ckchvwUaVi0S8su2
GqwoYP/6qxM82P7pcAQ1LQaBRoae+x/5hLhBgECRnt53nMNcJDQLSO/zsBriSx6YtNi9AnlSjYhs
glPfS6ooGWjRO2ZbTv6536dN37BWuoSbns07fsqHZwI6r1xARKvx99AMUXVVNCLj+19UgkTKIdsF
jPifA8DDU0AE0qvr/CVLocmWII+cPx9ZlHwCkbYlOwNNjfw9+uqfwUYCJ8fXw90UTUWo97sczgdf
qrHQ44G3Ft8NdoHa0yom547UKJqJk+izGAqgnR0rknVl47mIOR0jDOvxo1Mnx6YZgooitDfxnY/t
HUMpSBuJLweJ3iMJDuHAGLnyjYRzvHHjQcuG3llNIKffRbAoVuWct9qoLVDDcmcxleF0NNFZYaom
qR8TWvxfWve5S0hgIhm5RuE3bw3prv+Nc7sMlv5Uy5UjUgpMqXkkn6qsPsPWl4zYHEZUEiWFuqIa
7YAaSs5VGGB0CeUT8WRt07SZIgPHMeNxFDB4OyH2YSDcuz/BW54PrxCedNApS56vanva1WO5ptlE
kXZ3G4YwKwTG+Mh2NauvIVkV7C0ut95ZPRu5/jGXzqSYTDHngS6CKCF5Gq0BHbDhV0RLIdmEjdIo
zWqRzuPGYb2+YgDKEuOlBdejK+3wrMKxbXb9xYv3yu6UQUkopXapXlLfDWM3x02aHS4sSYOtG4O7
kMEj0L3c3/PGQ3fq223igYhzWngm4u2V6cf7VQesDq44zvRHpmcDqnCIBgCc/NyUJKYt5ZpUe4nt
RALnXwM88T56j3EzI09FFPCuhheQ9dsue/hokx4zrE6haqBd88zaitoTEZgWUFOs1VY8ZYz/eaXK
hfPFTkn3lXkBsMqGDbFZ5eoDbvx3nTwr2ZkGv0nxOz7XbmZd1JV1f6jURSbrSZ0zHI9Pb0DUF1zY
qfgktldvI0vOC//M9prB1vBjIsZ18ZQMWEKhFS3LgvqSJh8NpL9mE6JlRNxyn35zUyLG1+yk/oYu
ozj5tlSOtH2Ju8OwFvuWeQQuw7IyyndLw6QSPa2VR4iLQQ2xomDKuXmJWMaAI6x0ysXeiaEMIZlO
DUviLwuMbmacvCsBxhoTsgJxja1xe/brdg5sZCnX0mFkcQh51IMHnlTqeDoBVsn62kDIGqGRg+XJ
/6DKNyqKnyKaFHSOMCjXu5jRk6Bgtii/IlwvAGjz6/s8a0mLvxrXp1THGMKy0vsupEtB+hmU0z1g
US7l/5F/2Qp4NNEECobpaIDfJsunTYkSdwYG37aB8ctRmgDB+jY6eX/TJ2dlS7W2TndNz1bHYwdy
2GkE72KNydjbKT3lGj5oq/FFIc7xp2pH1RP6VJGxxlewhvPuaStaabm9h8XLCv6N+Ox8HDX7IwuI
eEoJ12cMwoDKje/cCKwPZ59rmmVP6m5DCDxWPbK+DSXF9xluOAa/x87oODPrf/72kYPAtAY2Igd1
KrfeGYcooBjo7Y40rZHG+d73CW1BTmZ2c1iaTbqiLEB62PcvVFJvC/sBZ86sI1Hs3zXO2AKvnFR+
THeYw/oQ+gCjbQpYLpbe8tvO7DE6Df6PLFYZBa0Rf1wFz3KFH+c9GACan8MgM+pqXkC+wVe4DR66
8yC09NzsEtojII/tcbTkNJziaDGzM/yCKWAok0QwL/D33sgfQ+KT3sTitOv+4yNehL9tVvvYt40Q
c4fM4ueiAVHomM5ysAiuSLGFDoiJKwWR+W8IxIoyhPxsnH5tIrlIoDwiEBJ2XmzMLXyLtNYHSPw7
G8rs7n61hBTy8fvhkLuPQjQBZZevSMLXSVJeimiFqZNlNnsMCcFc8cSg8udJW7iq8QHYNzPmDzkW
GbCompWOH/7rqfmZNiAX8T7nh83CT4w/4oHqfdFgwLL29wQPTv9Ya7d+5uf5PRHk99rphzKoi1MR
6i6C/EXvLUoo4wk8Nj179dFPtrmrN99kQoy9Ina2U4SFcdtc5ZDAXk+/3n0t8n77kVMtOanu9jz6
Z8/u+1DuncPnN1riE4bp3f+pQM333Lyv3kyUqAAftY2tdkNy4PI0BzDQGdTa9hfgL/9GAr6754Lw
XyAOTRXEEM9rXEXwyWqJv6ECoCJ6KXepStZXgEkHiyjtKox1iKYJ5W2evAy5dM3ZvMomn7aq819x
lzMEfzoMfuKDe+NljqDkGYbuScj6c/YXkGjEF+UW0bAHfXOPABJvtVaTThvyMlrpR0cdAQh+Ac8H
le/O36FPmUVIjkKc63/s1LzeYlnHu/rwAnFRUCtwC6jA4dIDV4uuCB47N995rpGNzHQ1fO8lk7AK
ilkr5Wbn5Bd/dqIszt2LaUt6q3b3sNjj9tPy0Mr2OY2OFH2+/h40NFO7uIhUMuYhhI2SjWun80sw
1jsFO1Vh3U6Yr2SlR1dIy39WDPLll4rowkwcbVyIweV31GNr+hgryyNvrZBCavQI8GPRW/CJYRam
EFo00pHR2Ed/T+oltPI7Yv59If5T3vA2f/FQGIJH3pmx1It6GtFuKHBmb7H4WQXhaMvK+N5VM8eY
5TalELIR+QbOrN4aH1gViqzfy9AZcCo6AHSfD9teL5Bqz6NfyaGWffmiM4nUdijuaGfPiXeWeLI9
vr4dVSFuBMaBsRniXDNjXKJY7xeKZnPjcmpvddFyLXonFG2DOrivNe3WllhiUyi63hErd26E6dId
dHBhfAUGubdr8y/LZPh6SasDGLLooJeIXsnFuRMi5VIJC1apMc5o4vHHNfTsu8Ytv7Ggv0ScBXMY
kdlTXVBr+B9qWJsmQ1l/yM67dTemLxMdI12T22cFaD3+Ua/PNUdCSDsR6m/LLdocPlX7eIXcMmOG
7vTvij1w5HbfJHufKZPC4iUlppYUUomDPX6NJdMAoDZhbS4zjJRrk+E9jfVv0Tf9sAb1OTbUvxG8
gsSQV38wSbjkUxtVeZoM7IxRqET6wXlESgIaeu97eaPz+rLv3CMudn4eCXLLX+fzDRsSi5vNqZSv
VMYxp3P7PcIRIJ2OfSjmq8W07HjgSARcUGWow7mcPSQi7BLDZgOrGThAbHBmHAwdtEOqxwa3EDKk
PmsUn7GamDSIuBf5eIuiQP7TcCgahNlC2avQhSwM3BHllcv6+rlSL/oODJQERjouYE76AUyBdtDk
jANz6uujSbEUughEkh5JQefx0gg+D27qBo4AI6HzDVYuuW6rA3rP3jHmyVlyW7pnED/0VMUtS9br
nnYxfh5k0aJIW+Gg9GDzbS9wh2Ccp+8u+30nw1hCG8NtiV82WoZ6zG1QQnWo0qWasnb4D08O6AAE
9n5cGXgkpLJK2PZv1Kk0DtMS3aRA0YuM+VI1WsUEy/Pf+miD2by7f2mSVIGsx3w3jW2Yoiek7jND
iHSdy4cEFj0s9hFOFIDCwO17GDrk+9BVUiaEBfg/gwJzAUDx7RX67ueXGWeIubZjj/dkl/uSMfqV
iT7CWJgSLlLssBZc/vKJxXIMs5eae5TxVr9jpniHN+6vQgaLC08c/xVYl8RrGtiG8REbj6oe2tZZ
58bA2nTCOtoMqSmi9rQ75U3oo8QlxqImwViU1UiZo8TSNXTQoSlvybvfDPp+kWwV7Kf6D7cbrJT5
8h/ZnT5x3LNZr12OCVO4jSjxRI/S5kl+s6DqjWuIj06psS2BVou7JKpAF1g0Qog4jjjixBKk/n0J
A39OmVkgQyOiHd4kaIiBDaQ1t3XuSQjf7/QjIwnN6vpexY4a068l3PTJwKQB0zEyNsPcROxGxDhW
QwX9AGVbm1iWMNvE7zn07WV23+81R1h5n0SgiY3bKoNrU/WFjYizQ9e6jllygKeYiOH0o3vFean9
XiH/Nzz/9YDE8GY86yiwZlu1qwnIGpNIzbuT9wS28DxDtFFiUHvJjy1MwifQITSSIGCbG5hdOm0W
OUJJCoXgoUGQf5VQaflpKDiStfm8LFMNhzkqs9NxPV4Pl6rpU/ephfBgtiphfHjZrURJTh4yn2jo
n1rMSwCtpPqDjJVxHOSMEWq60GdzeABPk15/9kMEktLyHLYF9YrJXUGqouLhl/vigY6G7RvnV60E
MBx7zaJJrRvhWvOuh3h1a7ScSEJVHL7wrLzwwSvn4p0qnt2D+a2LKpwp5PJCK4tbCuRRYEKqdTrY
seEZLpf2Q3G2He3AUyM2ZPSkVBDWA9ql6tg8YbyIGoJ2c3UOMBiHPosdeqMGAL5Xogi6kIS0kIiL
GJz37OSakpus4QWULxwMECGPvD6xka99X5mA6UHGzKMNv84iMXc2WdXYi9ZSu4LKfE7m62UZpTFt
QHG189j9N6N8xkqLMDJSItqaizmW1ZOXF8xLh7ULpAVETfd29X95LfkFjQHkOPPg4lVOMpDmdqLI
2lhtkpqEzeN2VsuUYwnquONbImsiiP3HdCcOzWqjidHAtoc0z2Kh/mguefLOeIxb8B7eL8Wn33sl
kHHsrUT17vtV6+LhwkJhgPwW1ggEJeXg11wF8DUuyR0uMcvpzToYJ0We6QyPdxjR66Owvz0I+g34
d37zV5ZWxyNULgMSw8WA24P+wE/G6cLTg0QP36hAs6NqRuDw6q8aXUZk8sKwU8pYdhMApvh0zxjC
DsCNHwfuNa77AsfKMJzoOot2tV4hoQl5aGW7CTS6Ip23GrU0QaqjUalk7hMTr1n95i5mMU8FWxGR
BBp5qhkNFtHdnVWq+WAvhfZrip4RQpX5c0uSegUmGH7gOS79ph0pTfA/kSbgOksISjmb4GxAx1n1
zciKyca26y1HWtfKRY2rdjGnUJs2y8ISKSTzijRC3EE7ehE0oQj+4+8Zo1h3wXUzQzHgDzqsplJ6
S+zhe0BHxLzPrv6qnTrfGvX1r4vRCotoOapVON11GrGR46zx/28XX1jrTW5A6aVTUtrVv6Z9SPxT
/MunY2Ly3hpWvQY+5fPsue10Fog3AwDL3OuDgWfsmfbsThZiSt+vfFlA31QM9gYGfVXFEKsSjuS1
UCHDDQj4gMop4ioxYo5EgD0TahJ70DJoiToSxvNu2sjhfPfSlWpOvrjmQIR4bHEN3TLsSF48FaQu
drdvN+DkOIcwbuV6PhdfkcLPQt5r9pOkPV+h2YbDHy5qjFHTgyoR7IA8dxygfWpc9G6+wQro8VZE
EvvfG+A1YL3eBARqjjOZr+dktofSm30EphysBLJm8ddRJdHjWv/s8+uJ0dPtoKaHPesN6IcV0GST
XnQ8VqWaLq9r4vU6WOny+YzdIv+dRR1gKmQiA7/E+7213hYSLrOnwliB1REjUuKRSdMM49ZM86s0
kzFZYV+TWGoLXHSVV5avHzKoKl47sU6zkULIGpNEHiV0fhcVYRsTBLyBhBNFj2Iek2LPOKCZRO9Q
0xN2b6wSHIQ0R1aS10HOHa0VL6u5TspAs6u3iNjzHK+cptAQH7Osk4hmSbjjD9HX14k5bQQehsor
h+rRsiohnUmXhJoP08/J2ZSctkl6XYvtKKm9zLC/YY5y1A35qphJ+OHBK7sckHIn4qheamogjna/
I+qpw5/mm0WHFenKOLNFvv+CfVHyxQXy2jb47zqFnOLo6u496kKmy/0bh1ogLUsEqVGDpgA1JBLY
9C+ZH7TVT2NFJf3ZAfNtstbmcoMPtWPc/RQTo0XKBRFvGMK8dpuLFcqnxMh6fFzkdD0ieMeeE92P
ypIbDC7xCtVcRoFfuWgdZKqliVOFErRGW5PNOW9RLVApbHX60eW0jbZPF93S6Tk6zRuBVMQYgftR
kHtjxHLMXXKIUI3et3eOp9hUPHM0hQ8ksHtBm6fm5K4uKB0Z8grO907Ci1f4rySQ8OQnhP10hjAM
GByLgJuWl9nvRGT9ApCaU7lXUiPjJGMGR/QdwSYD+QX2DVxh64gtwyskHUT1KSh+SB7hMiElcJgE
IZtRrbkw4NO7jV2NC+Y6ibSPPFE8azfCywvKKmMby3HH1ddxuybPxLREec0AZJEobTvr5pBcVusn
MFphMQTZoU+JIaDF0Kl0nzS7OzJpgk4QMznDOWXgvvaSQH2huV+UG71yMOGfn40gKr36G+bImK7m
C1NbwjlA/Xgavrg/m5Y+iVW34cf9HnQgZ5JAG39Z8rrEZKZX1fiKHfFFRaJDDtiTDsGJFFacfCm5
D+LWcDKYyf/l632jPQ8OR4UmNRI8gyn1Gt9wl/C5rL4QNB4HR/K4XyQ8ftqun2KaH5clbxNvXKrm
s6CNi/Jj+mhSyvfzdtMynw2YBPvJLL6IznmHUt+j9x3jSNmegw+OaxMrqIbsi6H6O84Chnv8/PD+
9m78IaCwH8r3IG7wm72GNocQFv2zmUiMe8Un8IsTMFGr+r08nwik7LW7vylaBOYtyDbVxONscxP0
GAMAub6GlXvRR+E8qGOZ6/yNGYdDhvF3Xqh4Teu20xKy7RNlfQESBPeMbYFc+wR5BAO1LcDX2yRE
d6KJbWELa2oUW9GX4d1CfjoFVmAkoJRCp+tJtSnq0/wKunxyTxllxC3215PMC5v9Q6Aku0j4jXrt
w+Fvro+ZZh04D3kzdfwMKj8Ou7VKGAcu/RMqVrAxTfQQG34TZqJMrb0CeU3Ck1iZBwPEVSEYH9ue
BoqHEDPymr3RHZ/h1fNqiVtY2BrfREQ+bJs1D9RjrbD8xrXPdwh3VMvoXnjvUv+ypwFQ2n17UPZ2
6ZPp0ttucDqkqVYtJBeYzJkuO0Zm7RQvlMVVQ5kSMCp66R3eHoCRiWmdx40veULlwzCSrawmO/Wq
vOAivBnB3LO0HLSYCEzN2kuorWsVHDdlEVv71y9qPhbz0b2OgToLOAVmgU4GkbJ52RqCU4cLQSSl
ry30yeII2RXW3mXGTgooPY5KpFFLwevcDdcbUV3kH5DMOhpRU29RIQp/8BXv8NXrwRfQ/UVjBH6l
35zuvegizVEDbuoFtq+kpLdlZHFXfX7CHV9cBLYP+L1Bs6tZr5hsmVGD9GNKKlI1Y8NBTEGGgsj6
UHsZJeQnS5+2UgR4LeR/ea8YJBFpyIWKt0SpWh2kVKqY2+XJGQWKbh+WuBo69sAjNL3Of5VETDip
9CkNuSb9H7+eKkQaJ9VYZukPS5fI6RgK3QJcx8UBs9kxZTF4c1QFvvBZVY5IR4tCuM99RWqGHQE8
p5S6CTteuaYCRVBoyUDlkd7C+XaH7F4yCD3zWnr/kZIzrUFxj/oBZHt3Lx0zgnHqJzScPkY7z8Oy
oymAtsesTuumWX6x+rR28YhSeqeiD9l6Mjy6LrxBkTi6XJjtRrIiiACJx5/YfcI6JCQgmjFc4ysx
gqFzdX0iiYbajUINcx0ayZ30/WCHpzzEGCCB5CA5IpVrQoV8YkSwUYc/rf3WrIzHNK1+AFwuh2dI
y7kJrS6Zi9Bx9JBFpb6zURViXvBJLU+RIOtTUlEYpEszl9cl5lmZh5UhmAcVGcEvxRvpOgpqZlvC
nQ2rdAPqA/AMm3cp7D7wCQyTWtN1NNDH7BteIhyTz5wW4B9/6oBvPYr1hksVLROQ3vhAAqQ/0SiI
pRFB68IuscmupKucUkjCjnkOpbybrKLc4akpxtI2opVls1DVMLr0QWaR+oXvVbCNj8Eq1SragZ8o
FpGYqWxrzhvvEikMA4FI+V2DJuXDByTszhWoWjY3oVGj9DhoWgG2ZaXmAuVvr2H0rRs4BAk9gemq
SA3qlRexQLR8epAea1Qr7PtPk3mn59k2yi/53+54RN5myiSC2x5Y0mFQVD8n85Nk/8RWs5LAe5Sy
Y2ociNIJX+XrFrX+SHCvC8paAw7mK28oNvQHF74Ul3G0qfohIu+8oLZ2TQttnETko8DkDWzBvJvQ
MPtUWcjb9XHFHqP33FaaMQWCLuYIr4YFDTWA2WVkPMshWJ5keE9W0G1EKiTyPZyFi6ESOtLkrG56
rt/8a3TTtlY3zvu/OWg1R7TWKOsHEwsqSCtLz6l9C94pRNMO13Ox9lCIc+s72QSiDLvZcSZfeSDi
SU+tLhmx7/bw4RreW/7EZoJQEe/4zexuHxgEJOPnuxoSB7IaIdhhxY++xtGoMaBW5xQYsrJyx9U0
Phc1RTvsS+8n5ip92ZD6zLFI3Itb78/wOpwkHuYr2UgBUd8EMC2ITI5wG79gnxfn4ctAElSjB0TA
u11vPWoElsrL7V96RQoMOyJrBN+laLJHCPEOm47Szz8D4umh+kwPIKhd3EPp5TYQ+YoupG2VavJC
23tX9WlBEf3c9Ros+Jx2PaXNYQ4siiR17nPY5LAIeQTkz3r0Zn6AL6jGWZSouaoK9sU5caD3zPdr
C41te1zVuaGrfmPWyWNuYRwJKAUSjxBGJ4um5LitL8wy8BmCDy6ufhlSIXsOa9qW4nwxCSfWxgn2
7bCsukvOVTz70h/Dklbvuax8AfysS8P8RqTFfKs+2B/wSPN4EFCUcPyQs/ck0tR0snQyhBI3w81u
viA8wAenh8ImbSprx3zf8y2EqEWQgGktIRCzRsNIfSVHSpYb7/xB7if5OBbUh5Hfxfs/Wqdt9FaQ
8eJfTLmnN9RjjE/vzJig0umy2Z2n9l6eHWCOO0Zr5a/LuwL0HdeHx5c68aReBWKSG9TrfpPZiWW2
6zUs2ZwDmjPkT8ayY5z8W/sRKOvA5QhriJ7/kPBtuRchZcRS6hs1fcn0xISv1ttBI/1tVzkEQF/3
CIIrZMNbb0xbXF9k1e69Zgg/1ppATC4VrjfC2HWjJGUwNiloVCOh281Rs9ns372a8iTR6CRDFQrJ
8BSfYiimlTlrE1Fp0SOc3TA6L+dQzNoELrWiW7SOHUKVmM9Jcg5njxjKKlRRNfzSX7VO6wPkvhl5
KJ4SPOZAKA55EPDwBcLPFpf/mHcU3D0WwFEI4AXMyRiQM5sva0AHVn6+kWBDL9Qw6Ezm1ZEEDxjQ
DH6+PRZcTEq73rILMhcjcJd+g6fY4pqxjqOz3wnLLz4cmclLt0kBmNnIOeCxX5rX2IXuHpzBQoII
62bxiifjxZfXDuUDF0rtgapgG3PHWE8ICPdMlqR+FqZ4FIADbnVjHvErSHOUC/vRkzdn2BgikH9Q
v00VzAs7uM0gIRE2tPHFf6VR1Xxzpfe5auoiUcN2gTMyv2z/IEzY6+5P+F50+ZDmFCQ/2gPlKhx3
lJQuhU6sI4nIbwBi9jdy9mLdIHRak/QP2P+PF05i9mCKXAQlkwY7MCo5iVSd+pfkLGKpDYB7wI59
tgxRRQvoPMkK+1z/TpYBLILReGbixcZXTVQ/zOT7IrdPWnecfgnwwavWU89uktvubgPQ+DpP/LaK
RSBDgEYSkwKrP8yhaqxqQOU0WgN+WN7+0pAvKiaieHN8nOG2NA2YY1CSVDhDcbahM/DdExwzOxmL
whtO386KdoibGsLfAw2r4GQxo3m7rBgumFwxOqPdv6Mh7N/Gzlcz+yYzX7vWcaVMJ24SIb1mXNER
1XxT12e4jaOeT8OZm01Cbo6xUE3zsajv6XGYidmkfhtsjxMcujH+WFa121yPQxTAULnDy9Mch30p
irRQHEMuhM0yHHSRyqGOAB3h6H/0i9peOXmQU294TMY0Obpt2BrdAPgtumf0t5Fu7+a3sUVWEjLE
u+PlcHd7dqGix4/xmTz+G3r9WKPG6LV4gvENFLdfYDhlVTA3JRtuDcu0wmk2ZcKW04/Bl08PfoAf
af2HdmO9yKGQ+QGgQ0BDyNIU6ajdnh8eFgitMc+Syydk9kTTes01j7neEDrfCWh738JgQwaP1G2c
OkBfT0az58n5wlha9IXuNSFoZJqN9GFh7CRVgPi3Cmhe5ShzTHqCw/i+wKr+FkyK/5hNMEcW5kfZ
wAB88KqGqmKmqojJ6XPBASd0ZvUIqYPBfjp+9mbjMud7PYdJycYeDQoCcGYWF/TG5xHbLQRWu+02
gP4P2WEPz7exQgl7wRn+4gzIdWJ6h1ITXRvnm3bK1IxR3RF4rrYmv70aWycwRgcuA2WXrmtVnf14
R4rVeD1lBETiruJJJm5XXcUcZVRr0krn8QpI4Xth7XaEju9Zkyt/gb9CX4zXErlS0H4DqIBSy4PF
6g5DcMScgobearoymG57ldFa/vpqs3+bedA4++VaZwUfc+ZMm/DucuIro+tZ/tHwJEgAiHbYe9zn
6PEUiFqPiD2WdJlarrfgehy4kkoojfqKCzgJujfczX5EkmCc/xUFUBft7e+9Ne0mvJMKzQfUka8b
v61sPoRjVtshUyBxtaK0I2UeI1JBIEFd27izlO5iYCTDQMrb9eKa3jKaY8JWhFrU55w04czf+u2N
iHmi7dcj+43T139PcLiIBMRGyo9vUgfQ1dD2tBMOlnFqlz4dn0a3qWcRI098eydpkqFKnk4Vtx/W
7G50z8e7SOpj9GLoNGf+yRe30Wwmc5aUdSfi7DsxobKefOfTWbLMTacRqtSbdlWl6F5RWxkMXnt5
BMvz4hsgqFkE9pZjlLZ2LPCSnWGSpul2Y8PLEPl3rK6H4hxuOF6j9awEcvcJ6ncanhtLRETGTHS8
HMacPGiW7CTCexaHbKJ3mg0FctJTsPWDxvMCKo/FnnMwx1WMcQ3k38fzHKHl0QBBMHgJUJJkkK5A
RTFweb25gPdALDUPzv+8j8bPNGiR00H8Qgoyl+E0wVzxPUTM/RLoxVj8PtEJtZqCwIaV5c48OxSy
M6QtVIWPP9qaHrBOkpO50CBbZx5/dWgBaA6i5k+oEwM+G6d5GT8GpFtpRCNniZaWIAqKf9/MgqHr
iURL5K9S4L/yyo4tEgvdoIM50XG5e4SIAiJAU8lxZvgd8KW8GBANF2ZPms22reqHeht5By1ct9VQ
TMcB6Xjc4zNSZuyg+FwtDIGqHP6W9P+NHVVWq+2Qes+9mnSBIn6F198owLt91R77e8DgRkWevL2y
en6FE1o6gI4dfSJwQytL5Xtrli+OnCJYyaKlZ0yh1XI77zM7P28BILM702rHCckqhLXPxMJ3Ie3O
IZRLrHANVmDbE3DF1lW2mjShmYgi1cAciZD2NxR/9UGps3lYZ+YDIUc1e6z+yICO3Er8tGBUhMAP
e0JH1qqsWCWa4I/rGrFsiA0PX61isJ6TY8An/B8F715GV3wDICDwpm3XnljGRGh3rBlyrHSYZ/m/
NjFPiZy/Ph/AS8txs0lS2z7trecXlE/flarL5pAh38y/Grygx2/acoXNAtWoGGBya8Ku3PBWFi5z
clrqro/R8SMnx0J4o9by5M+es/V+xIdp6svIPaWTLHT4DHweIDEx93VH+2f0Pd1zQvqUtP6HlOMU
o+GRTOfRMOG7eXBZRkWBIlLgXEv/qryzlh53bUe7s+wULtQXjWpPI9dm4Za7Kp1p6bkLufLn6lrT
2V37TntnbGZE7D+EDPifWbpg85+svfgZ5M9AX2y2gdalOWUxWwcBd0MOtHo1kzAHOeKsmn6kOAgG
o1jKFAE8kbpZcZSIhR/O450l9KFVcNYBvBz6m0uBCdUpGAGaROws2atCihfghKvAwOzHYXy3RX6c
HDD+wMN5x0/E2ld97Ug+vp7Dc6+FWgs7iR3cWttvGNvb/iURL/hjLKwptNdxgK3S372p6y6Efb67
7xObS0RwBiI8UDeSobk3obG6bG8dvp+H23SWFesVCO5fegvLWBuGEK2s/IQe/+Jwo5qzB433n8uo
t+UOCaVaQj4KoXrIZR++xtQ4Axb8EOBeLmwXZFQk9c+KpyGQ4h3/YPFsfpqhfXBj1G91g6g4ryyh
zhgk08bs49MNVIJFU8axjtIgMkPLLUnuK31DebhNU2nGZfOGhRO3i37zWts6h7xUub8oayd/K4be
UDl1GfWhxfyfZ227on0cbegOQ6u2Qc4twee4k3GitOHkNH98FRFuSHPk3uzx+P+h5VgX5HvNU9n7
fmjpGqwOp510sN8PnGbKxOqD/95/4F9e5ROLfkEQuI+NT1sfUorL30KKTW2slNBW4ZoNhf/C27lP
HcXgeUI8iu1lG/tx/Eb0dbYqEsd90GJOe6Zaz9E1HZYg86jlFiWL1uNNolgQpYFQcL/z42Lwy4TO
CvQkorMqvnSD4RQEIXDIdK8OvA1IVG1tlZyohF6f5ut4BWw06fdhWzmTRf859wcL2D6e97sWXxWB
ygLCYaB9Hy0AA8dZHk+d4vqkdjZHUGQpjcsgz5Ss6Of4iSwysvRvM74HkrQbkWoPzasBiMj/VB8o
QhrA0APlo5RCtHqiEqeMxI1PjzgimH+PQF58EDWpd+hI8/17s4QP4E89ZTLKNQs251l5piHZi1r5
5buCuzSMcoblPL5EPIqIOpqldeCNzeZDYLEV0qUgUE/RMMpT1IPfC+rNe0FpuwitABsNiFhqxTeG
CL5nJ8J+UiQkJI9zNZBV0jnppMSc5z+aqOQXzbaBUJHZeJA3rmJYl8FHTFFsEZQDkEnvWQkHqzRV
lF5ZFOsVIvVRhSHAf7FkcMJqxauOiW0ue8dpxp8Hw1pfi7L/XmVbcNM2GrqKMXH2jL8SzUaN6BzY
ZVgpce5qX+fNsbwWfNx2hnG8CQEw98yModOXRD4cwqFRdDW5lbtfwqj1CztvJFiL5nUqduV5WSIJ
99CUicSD/DGINI4qkE26ZNrcWHGGDxerzUV7JJP4pFZCqEpA8CUHlYHVjrDSvrd3Zemnmm06IUM7
N0rcwnUMNsXA/+FKRyVQYZPXJ8tcUEYNBtt7Waf9aES/arcvdJ6mrdByYOzT+2mRM+9Mr4RLqEQu
EPTyFuIAN9a2mM+hmAzALW0w3My93/8sFVCtJz5ECjeJ/RZscp2hnxTX4IFkuwThTBNKfA4Gh4KX
lfu48TJNHIhhzjFBUNJOHj/l3nbBvD+aG4r3VD5ADDjLLSaXrrM8PKM39kH/rdvbzKEJyZCwQUCr
5+6t8RVAicgJwC5M/nQunn/hzekDJ4QfWU1hJ1Vn076vQxz41tSO7YiDRAssUhrPiiplGfEoGT53
SEVLeXwMkF6ILQGEQLFjpq+VsS20BpbG+WOrd/z3XCiembgy92cttSu47Mk2O82FNNer/wUjSckY
GkkKUypw/4RZTOiEzzIHEKpmpDGbAdEqdaWt9tfWPIeEYlW3jkbf60VEvk0p9lxOT6irgo3MXvj2
FeNcWBPxsZs3Mk7TSS8h33pgOxceoFa+HG7JSPhpIFEhJKo/QY+cBPY+Dx0e9Lpw6pMw3mE5u1mV
vJTQF3IrJzPqGou0yjw4N9CJRtCUsUg1+rni6b8lW4qT3Thsbu/OrcEblrqDPcunDSRPVSHu0c+X
MmUGbJJcZ5wSKALJh1fzG4hXdqmWNP2rymyynLpm1DUOkYf9KTcoR9bGG8XkFka6GfPTJctdFSxz
XPH4zHXPStgWwPVQs0w7YzdBU9O6rGEtkn9QIWFlMNi1NL1mXQVJ2Tnqj6eQk2H8LpEhQ9FLvV0C
QdkRZdBzFisIvB+LlNYrWNz5mNZ8GAlTNS6Q6vUyTugs3PHmvAimCTCxj8Yi4tCP1Ltm1dqk8hg/
D0MmYsv51Kt6Z//ES1tCpyRgZLgnuramMv6WfBzu6jo/VS9pxsTqmf67E9b8pqcPbElM0PaOuJ+u
IGwRRk6tNYFaZDsg9plqDNiLobS5SWyx5RcPUsbRNEi3F1ftNccD0NLtNBKh9WEnmE0ZTrtxQX0K
/zZk6V7Ed5PqNlKmj/EQYCNN+YortljZCyl95VCl6mqK6vPi3yIW1deMZVthVVfVM/eA1BJpqy5/
t4cif2cub5PXDhgKg1q5M59gowfLMTkcX9PYitkZAOF71oyiJ874H93D+rkgSJcTGPwEtE7zAMHf
Hsb1JhIWtyu/jj0f7w2Omau1OtJCkFYJqyxyPkXi2T9kLo3vwQsFVkEbK5SG5d0ybdi4O2MzTZt6
G6QHBq4DGTYHO/vdk7QmJgWIf42Qqis9XA1pjeY6c1kHvdIaBu/twKfHIJWVnmws+su6CGPA2p3y
6sAyjSRT0c6Z9S58Meb3//VDnUUgv4zHoEDMk7ZAANfP0AoTcYLRh8n8hDRIpII1cpB1yjZ/ampX
vbV6t46/bo0bbaynrIE1Jy/NNEMHgfxSxzppl7U2ywd+YWdpQLVGO3EZdU2boAyZfuQzNUwTGZJ9
o433EZ7Q11Itd+ST84WxWCbUQ9oqn29bGFyGMfI07Gsw4anpdvy1ugFuyfAwIjHzT1QMT8KJGgCo
oRM+J/fii0MR9+AVwjntwKIPk7E27R8Mtd7K66AaHNK+ddeJlKjSeOj9e1CbyrIRBWo9G39iEnAW
4OuglH/QruX2OVC5cz4XyhKTLhN87e9Quyq0tY5quEeYQ/NtvaDmSbUOGpk/F7nLNWFq5ZQBzceO
QxsXCwNL+XRAKA3dfkfI7Sa9hVmryyJRV+/APWKDHiXwR7pAviiSUIyCeOgDMp0Y0qbzz14hQBcu
6D9vpJuav2y2dj4mla9070QKia03TjwRKaI+ZUI2GdXmbuW1E4QQHPPsZOmqnSmdX1gB7htjcDHq
HHeBA0ae3ULpoqp+eMtGXj0I5nsVwP/imW3YOwipRnJsCyhtuFTdMKcD3oEJLMd/P9CQfMeVqQHE
5wm4NTc+BmM9ONCNglb4khxc5r3ccX0mvHxZLMdxG7oXBnUd2BIIBxuPBmN/rJHQ5X8rzXka/IYC
kf7D+86JvE3r1gxBG3ylTdixpiNsDhMVr9FwJgQ7j9Tx1vrpaR04NJgjo/DN+H86CDE8BwqWkVWG
0UZ840A3i9Wc5QoQ18nrr8V+D+8MxiimaVSVx7caAyReyz6i0a7gs+K8bDBJ/QUusu23sUo/Okv4
xIqiayQQmKExfX92Iian/hz0VEJlTMUmR+H5msMrcCheZCUe+N5v4mbAJQc9SwyrODE/dBQNJNBu
gAXCAFmNuHG1dbj6hS6aNGcmiU/8OCxWP1NWGg+Q4aweTyGTNhdgNWFbgyGVH0INF3NUp+Tc5h/I
Y3+gbS3PEXmPzFblcTcA4XoKMFOYxhoYgvHx4BqqLRNOAOGC4bzl+NvecKU/CWWYagHoEKgeJIRH
ZLpAg4m2Mhe4yhNr9gWW1KttFfP7u6L13qjRr5whCnqJDSHPIK6HJmzJQjSXD4UKDNOBAmYC+lsy
er4jq/iI3v80V9+gV6igvMpc1kxZ4y2zJBrPP6pGFfqiz/VCWTXIf3wpw6zSEzpb56sP82Mn7+u4
vB+nRonwyOqbSdVioA31gpFI0gAkjPXx1oI5G4LAI0xwjPeDXUXHrlX3JzccGfnIXt3YTDdFgZWN
YxGGbx8Tw22ItSTW7SpKN+ulNMGKklBONXEXMuYxmmu7/RZlra79KSrsm1fli3L7oskmjBLtkyuz
l5LgQIl01/JqQl9yNnrPcOZvLruSAFYjCicbN+PaiwSovWLbwYl2w7ADzBQSWKLTfWFIDRb/RPwc
C1PEWIVZhYOWR7j7ma0G375PVn2dupWap9VAkkuSZRltkWpNY5zKOh42deKMtn17XNRyTT1Vw0Tn
5VBUOo1jg2HORhPbmMvRZmEVrTr/eygME/MOzkS767v+svYLVTu7MAXS5Nu4e/mhIpsc2d1CusI9
TiwV3SeQ/TOSNu5TZCJzJfcZ6bPXf7OlH+iaPQuBWxAQde+6dJMX+2i7jbf8yPq3gzZMjL4KHsBg
mfYptG6YPyWE+8VP4C1gO4rZsky2yJ0CFfFLsGAf/n61JuweQFsqKRu2fb0QGWd8uOhHk6zJElgu
sq7eAHNtG7sVEXm9gSRVLozP4sVZQA+spBBIWQ3tZZ/RiBRu3074GSy8rMuDC1dK2tJT/dgChEDM
AMAkDKumuJ9Z26XbkQvhuRQ3JALgxBS6Jd4kEm9VNPcVwBpal6W+IMDk1cLBLWebXBCEX/t9S6yB
sP+FPswuxxJAjEltmsu2pGARKAYrTGGCsPJTXBoSS3W9qbgZNZHPk7vin82l1mj8oxlGHrZQeGBu
r0FqgyOpD2UQnr8rtmzngiA3BY5vINOXEe0KlJ+U72J9cTJAq8K8JTaoxi/eUTFomthG1LgcK45h
wVYOI0XvSgU9K482+DhnHz48IcmVxdymJCw31g/T/gTw/Gc701tTExUqVuk/HL8FQxyZjWTlFdnz
mBfYETcAnVgH4vVj5dqeTh5Ta5A7/kucF+UL3nwcT86FDTjkDixgjHAYVbnK0QBsnM1NAQKE+8X8
Nouh37g89WAb444zJn6BjftOfo8mf1imS1QCXp6zPsxp1tm2De9zX3jztzhK2l71AdNXgnT5JIiJ
iJsKxh8K/SgN6OlU80zu8qeu0eGd7lCr6AgyMZc4sFdQhoZlOVcnOpm7/i4HOB0LbdjgfTCLWTvJ
Oj/HERmm51+tFi31UCnmCvmV8rH0BTeBdvq+mHrhn34grseM1yDfcRvg349qPZAPe53XdRu1coiA
E0i94KVgPw7HrPTsSXaFfpBsAVSb+myX+GfDg/q36MK/UKd2tAeu7aN5F4qjvawpS74Pg9eo4q/F
EwUzBhBrc+ecdDZFCsoby8CzFc3CDMSOVIWxoXjObvMLSqffbxWd9dBFci5+8xDrUcXD70tZD68Q
juLcTV8iU22sdPGxuqa2CSLoAODj+7rRY2xwcSV4I+nJoELYLn1Ke6XL+mrm/8+kVDNPmOAxmCF3
v/4C+kevNXAWw8RI/qGrwYPMU4jegLhXuH0UbMHkopxximoM7qALkktTWhrcN3H81/eBEYu2RQX8
jTy+iCt1T9NkFSjzA1+Zenf2K98lOjovwt1MnQkhSHvhOT7PoznuYF4Y9bQHPmP5mMMl6VZ1P1Uw
OzXvu9PXwClWkzjQS0KCN95TOZNYkOTdzeYGTtvMl+15GD2KedmGsUn4f7PtUxTS+vEjlC7HDQ+R
KBeRAov5unawE/wLzakfAnRcTkCKZPmNZaG4Nq4/nKrXATaloQmRu5iX5TSyF6dtzfjbXqhNGD6W
j7zh8761KzrYP71CELI7V0S4Ol8ASvRHs2F62YfoZEIqPsNSChJjZKAeu/BStIR/XDkKCyL6hTxa
Ef2MGWYvSJeg/e0sOXOMn6dZod20DF/De56zWpgpD/zbhHCLibpUw2sZ42bw17s41SsRo60QGpPE
/1zybpM//ooaik5ooGg1X0iaBPpVUSXyhlBSMKIHQGxlyfKwh0lNVc2l+C7+CXRA3PgIIo2S+UAU
UQXeDwmJKiWXNOmxyRffmN5G6LlLtQS4N15dOMYC2AbhzDEGtEshzgtn2BQmLvY5AMH8z+/lPrKs
eXeb+mJtwOFfpny3yfOBGKfzuDmTlnWAPyhQIfGT9VeRfTWFszAS9tel8ZLctMFG5JjwLHA2aDf2
cZutSnphlM1svfbtYEmsSzgGKvlmiFCrAvQq4aIJ+gZ5v4UWE3/fGGmU3L+cex7cCT8c++tcyNEE
F3B1/yTydsQVBxp97pp26beGIFDD59/tqJiQKt75ktZhyxQVxo8XgW346Tnn6fjyEDX/L+wGZOsx
e8FaRDdY+hov8Lxml48D3onQl0V0syapTFXPscYZw3mLSZ1umYocJoydfjCdLcwcsAYcEeIfZpf2
SfrtkfM79dAjWj6JbZWjjqlJRadntlixeHB8HvN8ZrXowiLkWCSw9LVRQQr/ZeOWuPxLejJjk7zN
4B0JRyGx4KPeYrEsOvJOL1As1DOGo6uIVKeJGTaPYyR5IdsBXDNCAYuZrwCTlD2Qwlri/R09OzQL
plILzRn2r6YaZlmU/SpDINV+2gYx4tP+xV+6diRwvPOGsYS0HixM7KzH/9Yo3iz7UWvQlZC0XCwk
+1R0xA1ezR1txqvAWgsfXkLXZ92LDtBNFjHeQwg+FmqZ6TT+22OvJdq/TYSpPQMqdyu8GiVH0aCy
Ye2HsyYBGzTD7WZ7RtPKbkdU1tvtoj7j7g4lVmwfKIEEpuXUlMjpHRjUfFLB9RdQfI4bCyfs2PtX
XheKgVYv+pDk+pBLRtI1duSj5NppY6ceeMu31oCGbi/9W1lXr2RaPHoAIT3ch9WxA9MIm80PFTCc
N987f5n1nbQ27kG1386goybklh12lsB/ue10/7HZsyOi7sP8rEldv9XP0XYs4kaOY5rjwn3LADdH
EpkJAf3FwZxi9D2v6nZ+jxctcFhusOGaj4/ALjfVQqfWEOgSZtjsxjMzd4SwpHG1rGriUpSDwM9e
9fHoaYpCM2imexDWvPsOxZBup2kTUzfl2/7r9PXg8dA+BwsbGtelSyENtX/MjTz1FNO5zn3FTNG4
Y90E7jOXtwuVx33BUlypsAyrv2Su+GDGJLmrSTp/e49S4ehHxpLyXs2cxcM6PBGSFr/WefY9VvdT
95XEw44PAcXAdFY1jf1zCrfaw5lghyFbSq438D60MH1DlGM0S5I2jxSGMuNxJIETxJUghdTHD3W+
+NqVnQk0UbsERi9xEobKRM5RD3JmayTMsRpV8KrrAZkrtZYJZUUefa5BrWAZuxqHuITBdI6Q8IZX
YABHmNrjn5ICl+TYXxZm6RUjMAnUCWsxJDLJ4je4bmDXqsZVrcB19yTlcsZxyQqULteeslYV+CB/
pcrXEzaThyb9apPgxU8nsmLIKIrYiG8x9tTb+CJqLKQe40jA/MISZaWbvXhTUOEeFlSaXvsFqvvF
0nwNqf6nQjuGEwiJAWknNGS1sLPO1PG0o789DDTHZGGxb+p6acBQBqJAKeKOWk/0FYfyJPnmSn1v
6d/MumBQ97qs/hJKZ1fJV0mwptW0U584ucjS1aX8C8/ztkpeVa6eR517pzAO8yPmoQhlRAIriuFu
s5oIYN50cp/YSPQDsnEyHRJse6Gh72INR5l+pj3oeHiaXBwjdbyuM+9uI8upvPSg9pniKlYHVlb3
k+zoHEv0vrFshT2f/gAJp8+QsMN/3cKZSVlsiwOeqsGjGVqJpOS73n5XpK84Q0BK2oNHadTf30H/
zjyiO//WqxtZZoxjmLKZBuWA3h/w6/5zDCIb3bWj8iwNARDKnyZOLzGfvsCyjoVPuOWBfRln2JN0
eKBgpESAQ8DyKvV07SEEYO8Q/xgIWIMQv4dNUrmPkwW66aQvYxqo1HHehgFqiEOrFRxLgy/QQhJv
IjyYVW3CCY35TMmfmz1yF7syEUkTmzCxjJAuHytd+27CJryCCQsLJg8TfhFa87VGiDCd7/mZ+SGS
h9mcBIiWQMOY7jhFQTCssyJ7nVKuTO55tjDqp5Owdjcf0kQouxt59lbI5cciIWAQ+XDdGBwLNvBa
Y+JufvfOulv3qi87Kq2xlZnWAm0fOjTrDWQ18ERrKr6wPOnCDhzrZygEDx9ZKEUeKAuQTSW4qQhf
g35lDcbSoCmW7bt2TKAGOkP/K95N2uJpiKR1KnPCQe/TP58cbEasHKbaQ94RPDvm/ST1KZyDwVoG
ogzKLnyfKOMndkJOoOWlnmG0znqj3ysDIbJ+irFhQ0EEh+LymA6dplyN+wYESMXiS89uFH8vBvng
7JrScrz55nC3XXhABCGTuo363d1kBlmM2h3BSQ3kbhwq/bxSUlnnguhJ+5q2j415qU/gfTkVywCf
CA0mn5EaMbLaO2oCXWmmXpphtXYEQY/MY05I+/4ALoo9gwyQQ0+OVC0GGTel9y7NxVAT98dE6Zqs
tSNVY6slmK+BvopwqHUGd9SCPbDsEHuzXa4g4nnvkEnQrIweXDOTzzbbD0u+UDfoQDgL0pVNn9bX
pHrHyE4zAcFeOhWpG44QnxVCyt0CPI7v0plK4HZ3hbruugZoP+WxwI07LF2mpQqSQttcMlVL9/Eq
ahgaGkO7e5zK1D5Jow3A405jvFWEg21mj4znMncgpfUyPgx2AMhu0VHYDfFn2/I7PjSYVZrmJKrA
N5wnexY0Gsc9ZzmjfVo/oKeoc8nbPKgmtzZw9dZliMpDXwEJ124LP1UnvWXTwQL4nh8DYX6WtARq
Dfg98lxW1nv89TaaIrp25BIRai04eYu77+fVP1tHQwCdOrLYE0RV0Z3xatWxMNQk/HoUVYiZKeYW
AJxDG1MNY/IH8I245/IiGaSncncKb72E3vmknzTRIvrpp1IKDbo6Z4w8O6dP9lSRNT6UdcVHgB56
/rZ5ziYMJpSdqbDKb54XpMnSoOHtYjVWLFsVnuVf6n58/OIDGzBAWqqbm8kMpxuI7SX67Py4us08
YFIucOfa3dkfOfKpVjAxjZdEMCupyAbMD7W0XOGLiKNMxvcy4c+LryAzI1CL8UUeT9ueVosM8H/k
lbOlA8kVpE+KSy2zvLQcc/AUwo4mATPRyBVWXhGlJ5qnwQg5WyiegvVPbigKmNbqWtYdIX/M5Mh1
wBomh8cFah+Ugg6vfrEDFPLgamGTmCU6bden06dNu3XJJTCqAxWjIcnuYjSY1NI8r2NHaI2UndMs
yGjYo9/Xu5ZAWea13LwOLw2ofv4wMDKWNDHEpusNucyvgD62hUFrbf+iJc91V87QY4qjuL1AoZE1
CAM5kWFL00+gNdhhEHG16oHeTq7poB26TC0dfkLWmMVkiamwwrv64g17e4EJEGwN5V74xTyt6tIp
GoLfqskiZyYADTATgg2Q2mMQ5ScBE2LPh6akn656jB+1Bw/YouOFyn6xDbdQgflnqnBb86ENzKFP
D/kEk4I3cg2oQ+q707j1wWcPnbGeFJ4dcj+9FOTCDcom0k/010WhwvR8mQZjsK6rzdshUcat4H0R
UJAWFSRRftt8o8xDohf42Ol96POZsakPZTXa/7zE76d/UJtobGH27ZOqXatwN3AuTANRU1VJ2pa+
5w8plAwHfVz9CgMfvRjBX2cylZqLxqlR4SV/1gkok6vsGPiqT/7XDchyKv69m9LPr/APEMabZATg
wbnmrvqpOeVADdAkaccyfr/9cTheb2tXNEpFvQoLxmLowCnUFvJQPPyG1FjSdfaMP76ickvfUYJf
iIPLtw2fZKFLg/rsTjCQDXJK/8hR5VrQIBaQ1kmX8/zyet08KBZi+zZpCnmozRuQ7PWK4fNXD4iO
3JXz9Do3IdEHi3Qh3tXnhTC6TiQredPVcNCXM7XsS6PS5gq/hnf3oICk/lzoD1hfHhJPjUbhqK39
rps7++lNNdNkW7zNuQr+480hYtmScKRDCbh5soL1D0Kuz3NhcmD6Ez7otr6NJoaef2weVTXFx6EY
aq+7r82IKL/aMZS7n85QUToj8bd6EK3rpxlrvi6sQy2q27aKWNMR6dAAIMQJPj3ANAJrrKIX4xuM
4U7QPtE/c/m/Z5ittx3jdsT0KdUqd0yDANqlrg5DQoUly9GDXtVwQo0IvIHQnkkzIGWYJLtFCYCE
M4pCsCG5FKM0jJSQ5Lg+En86GS6cLxm8fX6zJGgRokWd1ulNI4IGrjqePdrApAOwmJcdW9lV3hqO
cMJFSVctOt4edSpR0FNhodnN4vz3Wm6lC/EmTTw3i5s+MYl72nqXnhPzxEvEiC6o+eVhITrPUeCs
k1kj4JkoqHMfOe+OA2aiasKXdlrUuq6eSf6FRDOHre954hwMnDAOJwKMObvSD0/Fas6hV1/F/A0Y
rTwBZoslMRoHR+kgEnP7nbxaBNwc/Nhe3PYhegNgVNjPz4897aOy5QdfIQkQbUwij/v3YlmsNXat
nqP0PAkxobDnzGoIZz+KpJYC2rSTjRXNCHIzIA4DG67imeyElIfxUAvwVizwlvX680z0K8QpSyTU
R6Ed1g40ox3WnBjAW4l26VTUOmUFDgxvDPWmvgKzR/lpNmPv9A6ee2uAVQToFGxiXj8x89aDhssw
RABiFC2xeAMEAjAsNZn9WKorkKoJY8dCCeRf+tRmTmiQDfHVYs7ujRAYxnzfB66TaBq8DpjlXhwF
k43tXXC1l0nK+dIYVBie7UdHoZfWapSJ2uoZeK+bO5BAsI7eRCxy0uNSNivCmz0bPL9gAG3fOvY1
vTlDoCsO3KKJElAWUUkW5Jgs8g4AAr1ZRbngRs1Mot+hNh3v5oiBA5vFbUkdc1TJv+zOtRz7b84W
iaZb8r9zBCK7VPFdpYQPFVsvnm8ippa4KB3bN1LHVJKePxzJRpwiAgqd8XxZcwVx2o1D488XG7m6
Q/WoBZwp0HeO90ZG/GIV/fvbT9dpVt1iYMFnikPn/rhASG2RpiZb+VywrKEZrydTfdixHxPFqhAE
J9/ZUjP+ZS/IrnkxwraewEZhOYKw9dpes0/qR8ZNQlV+5eOG3TaSyYsKUkrApu5twus2uQbpEB4L
WyNPeLbRHZYJP4YxNNiFEP50CYDzWXQisaSvNqJAnHpA+FBeurFh9E0h4bQ7/85AuWkRTzfkjs9s
VczVzw8Lra/zOPLr3Bi9vnT0tzBVdrOzjqQtV8BmprBRmzNVfY2lfN0adAwMv/h8gjow+Tpb/Wkf
Pbicc4CrN16LbtSqkH5Xw1pqBAkjp+c8WhJ2m0eEg6SOopTxlS+ysmrtTb5AF3QUFxI90Jt/R34v
rg+96y7L58XluwJSVWt8pAUWMKqSndefk+0S1TPCB5WMp1fA7KJYRL2HK419N503cjtD92d6+Vxt
nr9XG4KMu2VSXbwvOkPmZvTxmAq/7ptv08gdk/dMsxhQEfMibxMbAPpO2kU+lPS4kv7NdJH6W12G
IXz+0IQBh6LYdtEOtyKRLGqsJC0XuinyuFzu/CU11/F0G3GSlWJheJFmZ+NxxBnAMwLRItVDoCAA
ON9/1xgjqdZBdJLMdNWUXWkZpp3+ayRpeF+Wfop2QQAvEx0ZTuHqz5y7BwSEk+AhtZp5D1PmWhF3
d2NUou8QoB9PescJuHM0qZXxjXS1UHsH1C9Ju26TCNrEVV7MR4GtfBbgOfJoNSXPnNWvMPPTtqKQ
i9d775+hyE/iNCfmSX1KGRhOzxuCMXlp3ZsaIl9naaKggz2EzgvYk3x1RSoi165jJgKUT+Dl3W7R
u3FVh8k8cppwPVyV8UeYZnjEG/FvCzhQEPqjexv3PQ3vql8DoC3Q5npzRD3OFygc0WGG5JmiDxoT
I4xS/xr0OdbWKSheeC1/tIerq0flX3oh3Ig+uR0qbO3fRWIdV3XmR2+VwTBMinLZ7UPM50en5Zbb
x8jcCGIar+dSKnlFcHmjc9aa9onlJ39CZF+2B/vgRs7UxrnxBlgiDNDpoK2V4IrN8ckZTNkqKSMk
dsAHFO7vwb5d63zvXvno6oMc5gl6/ZFfEr0aQCUgBWiO+mj8mqDkhaYQ5iaPFOvxG3EJWg9Z0uuV
dXymYIKZLJzLerqL48bzFjKOfdCZmeFiU1XbNCvoJDB88vyZUVWzMEC8lXVeQXsx2Qt9r28ikDpR
0rpHvQB9Vsvfk/Z+quWlsBnxyc3DIr9U7/AXm8E0EHD2gvoRwX3GAqOJuQ9wKZxKk58cSDiJQoSn
XNFG7p+lL06l78XDnVSyIDd2AtcblGU10XJmNNSITmm6RzOtroeCI7nA5GgvZgdr+YlhhvNspGiF
fwg0Yp+J8u3B7al/Uva4EGlT1g9sv/bnD6L6rVfFGdpnNtRZ04OEADd8e7NRVeW7MVQ2K1Y2rgW6
o6/sYLoTU0rESJzselD86mRma76OQkhA9gaeDRlwKmVGWQ2jaX3UcCU9go1NcDnAPbQNDAxvPAJ4
wqnHViqks1utizxKwyxCRDODpLNwLIRbhKe4RFWSfHl7NyplIGLP8S1j+R16IlS8D0mN4TcWJmLF
vvpgtWIhSWniigAOZO1PzjbVX88ey0if0RD74N7Lkn+xXWQd66/9VjwXGYQezCttNW8SehQyNJHh
wneAsGZaWAfUeLPffCGTo/4pBjqzknWcn1zNtouVzXAR2Ax8EH8TelGgMh3gJqlkZCQrYy8wMkzr
gJDBiIz540vcs7r3JZqnHRpCnsYmgFQ8JWoDbmlQGegaHP0i8tPG1wv9/ihkZ45uIdyIjyJHas/N
G/FeIjPIxvI9jni3HZOfREal6bAWS/e3YtDXPtkxeqXLTw2jdsiHY3976X42u6gDamYKBYJOXJ65
f6cnv5x9Ylpfy30CsL8oX7XZhtTdwCCEUDqX92f7PRCQVN/kLQMYcfLsmJ9ZgPCQi0IQ5dn2KYND
bN1AOh15sGX8ioBizRuWNVDcI5zE8NUEMPeDd0pOA3tmXq5a+MvLRaUclqONEyQ6vFy/BtxLfvlG
hZYDyhxFBJMv3ydxzvRdHgAd07VtbOwdHxIgSrJhNDOBr3jCd+0BpOo9n6gjdCANosrxO0z2gmoh
UAZhH89exorjTOzrgwobAGOvvZGZm7iJJOuOoM8gG/sMx+gGWREFhMLhc1RCsSCBVFYKxwxB8mW2
fZCh/Vc4vQOjpsfZXUiA6JfxmHFe9czv1rMVYFNcNuXUtsSpjdTkiILj4mbH9G0Yh9Jc3A/rXjiO
Vj79JwMt3KThKuXMcXm073hD+ev5K6ADY541FZwOFpJifM8+XL3Qvy7AVXQLCOmErMVtEcXR5eMi
xF27M1G3Z6qGAJCHo5cKwiMeaZDvj5qE1nIwtsDn5T/yU0MgHTozFsXrqeXOTnnAR0hLSqWPnMlj
l/SjF2N0hh4QONBBGH1UXmZLlyziQ32aFFbpiwk+Pv8j2PePi1cVkB/XsbGZJFS3rzhfj7JdFTnF
/oQdUpSSIMm5olNIPBFotTfd1Ty6eZGMTRd5Hek4MdBmnHjYjWXA9llQz3qTgUD5r40+bCMQUDDY
xw7crblB6IaOwvnN7QgMjM3f4ycPzrYgPu2y8UAXlTwMRdNaRYLdFzzpNlHCAjtBkVFDakiDCoVi
KEfpX1rTwBoZeCVetZIluzmkdoXEEws9T9LACjwldC7t3Ex8xuQnzFmixJe2pn0WdOTXbEnXGJOI
LJ1RC83Qz3CTMEzvK7vcP1fVmkfrqnSTBxrlMlKchpo9sn17/v/vh0Un6x3VX8Cwu+aDEq3XV4Z5
bW2HoJwCKcYsVE1iJjdHggtsKTtBFJ0eitS9ZxLhhevcIJPC7FrX2Xg9D2FTsZth+I0YBgxlarSg
kQ6H4Uf1gNqEhvgeexcWFQEiViv3+bD+E4vYLu3MhDKlHGRYnrFbMmFCf8fiSrBR+o6Tw5LAAJcA
Q3hP4PtlQ+OdKpXGYCj9NTMmea/OhQU4j/Utt7obv1C2I5D5Fi1Yjw3J7RifC/3WN/1ctKc22p1p
F8ZQzJRlXYS0teqq1o+jwjKGYY9OhHB/QSL6vCU04nYiwIgU1nzmiim1aIpRuLfpIYdMZbz9xXV4
IKkaqC6m+u1SPBWvJeAiSmWuZdWBdTsvOjlZ2XBHTIvJCtrhlZ3JgOFBti8gwxV88cUMwCe6Ijn8
uCc+lrMJ7cWOmSh0GIRtebK8C498QVbtyQJZGSiB7ovO81fcrzknA3nLkaVws13Hxrwv5z5ieruf
OdC5l3hrPhjUbLO3+ClP0cdTccOYZTL4Istju7VtUAXBzRMxV/2NiUyeK5Yf4elMTR+dbXfExQin
wj4Hd20ukcSVjHHxkCal8hvk1DhKBfWsjuU6oMZMoiad5Brdr/C9+E/p+nQIp4aAXwNXMdA4OQnM
u2cdiYSO6WuNVtBrU/jJn+60LTkfwavsEL8HmpKZ6tLHZYmUBj+e9Wl6hD9hy0axZ9s8kd9JsvxY
WNUcuR8CNAa1NMd5jdEfn+D3GXeuBsTl60qvBEoKy5jcZgtlWcYS3fd6G3GMiADGu1N6n+VYjeEl
MBbKyeoSxVd6jM2YAJGXuBzBC5Gzh8LJDlYAqRCU2bF8MjxRY5xvyLWn6xjx2PxGxO7XB2nZ88ld
5krs6YWD+1Ooa4dJ0BvoQAMANNKZ4wogzexrAvT5psx/lEKvpNUvkTsB/1Ge6lugBV3J2erZvH2S
RVIx8yUi1YsrlUAbdjFP4VTdj751A8ZqCbUgEkwLLXbEgqr6QSasCYEZ2Bq5vZuqqFerYEApowlj
e9AUhxGsSfNUpWq6BsU3UliaHK7QVHQPdKwQYc22Phoj3l4ainKeSr3q5QYkFcuSB4Z/CToA4Idr
1Ryt5cFI0Oik/4TV6Wu4kQbFZRPV2e0siiIIrOz+qmaCoAG2/GiprgXkHc+AJdWszzS4iUJi9b2m
uLfhE+Bcq5aA4CcE5Z5K/j6Ef5Yn4+XbAXKNa3Xv720qVZeY9Xw0POtHhnmQ3YjGbdKzjrnSBX6Z
JsKoQlCAofuV/dhBVBq74KoVwBml4J+b3PS034i+LE6gIknmRaYcOqh/vRMEm9fXTK1cO82ey/dp
wpRbS/otdx5VNIdI6lOykZVCONz/QUl6/pgd0WVgksbIINM+bVO9zLgtReBJVmLXO4ClKxK+Cuae
NiFgbNrE8yZZRbtQR5K0ml3E+T6DQKpL6OR5dUKHoV2ZKKpO0y2cDjzhliORhVD17QZv0X+i/l7r
fe7u/U1c+A6uTjg/XMHYToWq1u9eKxf2iaZ8ovTMbWUhRZHnU54bTkBCkp9AbIa7YeSaHzo7id0k
37lbyexNtkOaCRoFVyTGxsPB1CHkwoO+TEcZJ7yqAqUWXmwiA8Vy5JjozhxDkyToZv8PQwPCwsLT
mBeN8dp18KYRIh6aoT8mYg9pyRnTjBV7siZn9p7bl9nXz8/CgS9lOefLrix/zrRYFWEFApVq202f
Hj1V8HZe101IbtDXTGQPZuOm+J/FneTP6TS/Hcbj37xavH0z4GiAxIoigSjJnVQB4n7YAPSAhECT
px8acdUugEcFCZOq1iJ7Rsh/u81aLITKyoskL/fYm9sNgyARRPkKz7TstXqDGSnFLC/G90P118Ao
m1CcW65pi8oTivKIzIjij2ZGZ0+wRIiK7QO/8E+W6IhrvaPCjeDdGjyrbDn7FyZcSNkV27Rm8q6u
3Gf68SmgFuSHGqtM8hrljgnFOQgpHOR5c8cFpY7/terO/o5zYRJPLUDTZ442cRQFjKtZK/UHz61T
WkrAU/8TaBLhps2pcCWUWiWK1qtMn9lZmQMQf/4LzXs039QCVBgeNKm8g4Ob8mjtHCyswg3EfCZZ
dV9d0sdtAXkawunFQvDjg3WxVJpj5ADuBZNfovOvKN6Tac4rsnKlv41HJAKtPSFHHy2bwwA3F4Pg
YS24JScICdgIPTp+h7A6O6He4w7OX3m25mnEAwDRbkgy9YFkiJyeRwd+OJKOfhyRP6TVDkLdjluC
cuueq8TScyIRO/gCVvmZ73X+tvYdged30JFvVtpveoWsn66XJlbN2RY4TlaYijrMJ2kXFZ4GMrHt
nG7py5BHQ7AXJbGT8O8kJ1/KP6YTc+DHp4BUxB+QrTc7l/Ox3SDSEjuQde9PRStRu06epSVAADqt
lOwnW6HQ6OoASEKy7W1gnfA8jcZyBxmlJ2PfrXrWC/REVzH7DUk8vxpFJvASsTRZN2mr9LIBhgdm
cw9KTAAPDo6uJeREpGi0wFZBl2StDQYjJV8dUiuY6UcrNHQux54FTR97Xy+xlSI4FBvzqH1yk+hz
LJPJ+MwZ3Od2hy2cELlIyCKhAgrssQ1XRXsXIKo1oFKYUwL590ZZcjQPWnEiWc1weTF7+sAUwwgA
nCkaMJrC+CUSOEW09hL4y2mXL3MBJ6HphYU6O7q/hz/ii6hwUrHJJgBuAy8zAMzdcyiUlojhM5jC
NSSsnWZSWcNHCQu9Rh8JTNSzwVGOwbhGw2lIcpCGXw2KZzb+4azgC0iDFqYYEQqBIr4hH6aTG78Q
VW1xboDvj+J79zccpsPTNb8lj5Lb4TScVtGlah04cvBudziKLfrRHerrtg4U7RmVyXX3Ut0Co2FG
03d8O2kxokt1neAOlsSNoDRD38T1iYoT9QPUyCJi4+6sRBFbc7EGF5FGJmiKgm2S8leFgqf696mL
97wdEVcAfGR6pZ154Gu5rdhpp+5dPy5Ao+3X0byzoXJRbipGyMzkb2xdMitbe3WbdK2bJFngiels
ffkH6Tvp/IDJjkPJxCoS2qI3HCJv1Jw7rasnS88ESh0iBLdJPaBglN4MbX5I1PU3GYfEk+oq3VIm
tHZyqnrDE47kGavt4Svun+R9fMFfnpg9h1J5Gsc/svqZPm1mar7OyYUV0HZceMzsK6muQQ7hLBvj
KvvCbvgoxuZrZznoUaTFI2M6061u3aSMTFC9Gg9NHJtWokdzOrKAFxinmk9n6P7QWcaaBqIou2mp
4hB5fqwVQS2rTPPj7GUDqBT2DA+vsEWQdWkDhrZKETs4HBanyf4VLmcYX35KQHSvZrnBWYgmUBGh
pNkf2H669U8FnDsf9dgI4tApT/QiHi3UK9GLveA3DoerXNKVd+Zj5SqblxlNv3U6LSQqBC++GRFx
rzxohKbk5wxDAPws6e1CH0jauP/cFSTEaY5FdazlWJCRAZMAyL3HZBPCZlHcMgiNCnODh+om5k7T
IX+KpldfVxL4yZ05vbunquqbjZjDcPsvBmRy63ViTDnoLzodahEhB9DjX0hrdSxVXN2SImOy1jF7
tjHXikQZVbLlZAGGxFHeHvCdJ01DzoTM8ZVt05z8PGFiTiJu3A/PFbxHVMHQMi1j3hh6sd8x9oGm
jYlPKnw3POdxQ4ltFdYQyJKezEFRtq8FwKu0bE1+Fs+NT+3iOk7z070ULNfiUw5uOmnA8Audu9UT
9vZ6Y93n2jEnNu1+SE72ohn3nMGOS2zJJwaNBVaK4S9FDS8gyHsCr+0gmsSVPffSI2nupAToXKUv
KRIw1houBs2RySfSeTkKu7bS8ccc3VOfKkDKoUe1PMU13p0xX9XjpUEINMgCQMvP+Ii1Ztrz+Ls+
VgZPyrw+Nb44VcAGatei7GHt77DjZtmyOvWCqYaop14pNPjAVcRhByDpfJN+U5rjdUxtwhuZvN1T
A1wV/T7c1NWrEHRRTNjSVbGgjijbR2m/yEmO4u8gqF1JMkNZo0XSNpMba+ynp+x8YbGtGFivUAy5
t0xXhYIgdHULAiZSnePCr33rc/NGHw423r84vKRKgukJNlDEs3SfseR8p9Nu13JVlzaAmQKwAkHV
zekOAhUiIo6t+v1nkGi8RYU61McFmgLG30B2906GqZ4ndagNgLCoNS39D4Bg05Sk18+cFIZ/MW5g
kVDDsF49ELhqGGjZ4OBO9Mbcqht/tzLvp8h6UavlzXsXXlsbuAco3qmobHM/lVq0QdRQ+YPseYq4
IuwafrGdCpKhpTZoeRu8mR5kkyEYlWj3FpjTXuo44h6su1oXmWCFEc2nBz4A2xuauunifsCo89U6
RVky3C3pRJkrgzajwR/YySUOr7+VDKd/OUnUbMMyVv4Cbeik4njWbfOLj2gZLbP7gCo6AnRhnR0B
qotatfEFfmm8AK4oGYJOjQtCHVDVvr75DGN1ioOWFREFXfnMNlK2XBuvMUuorPMNEup03gM8B708
KbkA2tS7aewOSrsgArdraXr3QYy22+iLiH5rPCMxygNZuuKjkY3mgdcwIsbQIEGtFjJWTD1o50So
eTgoNVNiSXYm35H03K8jakqytyOrCsDA20qZSiyj5MlV3yNQrPZvkRg28h+tNmYmI+mSTORYUjk5
UmJ+es4ngVXoHenjHxVNaXA+230O7a3pReVqt0L33ZtyVRRKDd5kBut9VQpgLNwCnB7NEarSm0ht
/I92n1o9sHuT26Mfz54V+BZzTkEIoxinSuj9Wd/9BrFlDfeTDBR0J0lYa0KoNtLER9PiJLr+e3k6
i/O7BsI4ymVkMHhSk6SonKbV5DGS1cWYnW9SZFUZmFy0vQBrfZdt/fKnxckcjl/PG3oAbhKQnWgt
ckNj99vR0QeaItZsGNTxx3MVAJGOu90W8Dx/FQ4BjstO6FFtpxdGrPposxgasKzL4eZzqqOgSoIq
tygPHk6+LK7BGMAxqP6f3i75x+6Hu0wGLEENv201CaWC3dFiuLbXaoKmp8WcQcsT7wJRp1MTyBDi
fbdEGA1U7+wXaRZ1seUFmftSi9KEmCp2kMYolkkO7/TnOIqvP7U7IdwC5DvXyE4DYtokFywq8jHH
O54tB1qjmi5b9dzDTfkUtQRYN/7hbCpeMAUYw4fDxA1J7yeqsZiDxwKS4vzPndElarxDPjwTeYRB
bUawvWrOHttCz37nXbFJayHerT0w55eKYnvNEtGVnmO7th3M3k219QKsOdOokyl8AEV1DMYJe4QD
Lp7mMSiCSKFptebHhMuLEc+E+AOi4lfcfRDdVtiBlCJ+TVk5xM0n7/C8xfp7rjdEDS+KEEWCTa8p
1CAgjmu9ocktNW4DoIgHAhBka5AxbxLn6t0oSeDHXvKuTNhflZ2YuzgnxBPNGsOkMMQnh0ROc33R
b4BHVcD6HcPWWFfq5C3vMIJrCHRfX1tZVSpaVqkU2pLWj/W3h1hckEsmOWWnoQJr36hAyt2dyS5A
Z22k3Syd2vwGlFAJy3dXE/gh56EJjwJVAk2SUagbHw1toVWp4DBmfsvlJTX+H3BZmr9g9W+rPHQy
J6Dnvh5HTl3MfwbBPeWbAENpRF7DpSAtSnUpt/b4iCnts3ROWa5YrqNqQvWfcVIr+WTfpjBauvB6
1xSxyLsckieq3EA0C1tTq2pxkMYbsrcdRzzkOEj54UGVXckxfUJbBwx804qShoZY9KGPyBoz5rvr
kN0hn30JTyVYNYSDQWr6dNW9gc0ypTm3/DMv467db5Qs3GNJvPOeYy0PKsawF+fmBvwGVpEAG2HM
iZ2oomrJ+tWPd54ECuO+1yoVC1xgVYPK8gzEQZ9532wKMbwIP1LwxkfbBDuNkr1scuEy6X2BLIU1
JYE1lnQuHiL/88ks+nVIwsKEo/NlcpQmVBXlKIm8/5iKLbmPPPU1WDELh2ClIQ10qjJB4imujCI0
nI3oT2Ms42ScCXpgh98pJlnThkGNAUqmjV5ELO+vjGaKYWFjCmZNd1MRWxrS4bE0eWiSLlOV6C3k
1QUMViJlyFKJEoI5/ibIXhPdM0kODCwi7aPOIEKb6GZNKmDSu87Po2x1PhlRtA1FHVhcqWRgl8wk
SqWlw6We/SmOeYLWLYY8Gt4jYmiNDSRXGX+qHkIHJVt+KPRdwa6X4UJA+o7sdGuNvjvpSEwNAORH
IhXvX2M84wft+eTeVVHOSSMsGuhPRah7NNWmfb9b9zO84fyEyVN9jbAxYGFE4Dakwa1eI5TRI7Y5
DOBeDa8iwRHG5w+olc/sYktOLS0XmgLYneRjZG6+klf1nhZp0Z3G6m9K9myCQgYpTIkIOpja5tCR
HSZp19fxyyfJMb/YmaiUfF6FeV34fckyeaiicJUqVu3WhNKHOLUBKYPaWCyjGam85jzycg1xG+S1
Q86VAV4WwU5VsM0+ecx22r/YfpKX4PuYL0VGwFF90keGZMaojVy3u6opRBy8L3GHxNa/HZWXkn5Z
swyJwRkm1Vx5nbNdD/YU1GRKdY/R0xd8sy0r0FYQp/E3QVnNtrrjOFJEu/RtSoYVdMAzfIKPcifT
l9U40PN7yOxgNrj6Hm87EPbYI4MgeYcZszg+HdRIwSGWTMq15y0ofPeW/Yi6hmnk/zJsiBIEqtzk
C7fGPZb4iozMij+/Ltz+VhI2eL8oryX/N/ViSPg//JYLw3b1psfeKM0GvXH8mn67TZtFUd3vlGEe
tex2tP9ZxJJD2me92m+00nJbVpUWGtrbJNeqD6i28iOohyvs5DMZIwd8nu2uHnd0YHLTGaRJJ0Om
dYyVatBWOGVzuXKLqmEe09GXcYeEK+P9aWgd8yPaqmraz2b4rDJbDCbmt4OWVakzzz2IHEBAlkRr
We++S7AO4cQNU2946D83JhXeXjJcYAfH5R3mm7MSEy8pnjtGXyiaM47TrjIJXo2RfVceqPVsXPFF
Sq1OkRStJmg2KvhTS3VJBT5kSPLEUabq3JAuaQDG7dlu7A8xbI7+O2NSPY1S/5C9LJm2HVkzD+8i
bJqPIZd7FgJ9OgzvyuqkgNpP4VFOBSbg+BCBx6pF1MNw46ExbXUrIGu2eewfQaf27KVb6mpQf8Sc
tYZgAJdlYwGFLVFSMdLD/+/Ooj6Zlxokh46xtqvD2Slop3empvAZMelzNKKTx3yUOu4pNPBTcQnu
2jqJu4xmc7AhkpVP7106Pw8gtXpEt/Dg+rk29+IChNkQFEJTDX7FOhxSbKUUSxPEBqbhw9Oy0tTX
x0knc9D2AW67AlnywOV9/oplylCmA86OLeb+p1Fkw7JqawOwntqS4Ti9QOkKvT8Y9TN78TIP2ziA
zjCbDC6eEEJ6o/zRzBXc/E6crR5D8rqNbVe6mYJk/OpTwyNpPRvKYS/z2zrSgMStsPp7dAXzExGG
O1eYK3GccCxBSJTZWSsQAPCeck8XtMg9UYB1fr3VF3OYcuW+WNc6D5c8aSkGQ/4MCfes9DDqmhhR
gAz+LzOpomhQoh7hud1DeArfUJ44sKu+Xu569fjr6YpAVDxMAmhNF0p5OzurER+Ckl2QJQC2qAxj
/+kVhviUa3Kw5HNl0COnd6Cw+jR6EFLStDE/CxoZTg4cAyay2Ihr5R2Ga0x14Xo3oYrRivHf2k1j
IKlDm4ZaNl6MJW2qnaC3DuzLAVPBjhE+BP2XYMU9SqPe/wMEQ1OyEb17BRDL3UTu+rSy6mHt6PVQ
nF9rTZiXI3gG/KU1ZVOh3TNZ0fEIi0Ka0vNODsyaBizzZaByV4xSKuq4BBGZPJz1spN0KvNwiny9
MrDZ3IBjSAxVWCK7gPPcfTPsjrKee9OeN2w=
`pragma protect end_protected
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
