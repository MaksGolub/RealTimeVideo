From c9edb0eaaca83c18ac7b5ea3330faad8d47d3fd1 Mon Sep 17 00:00:00 2001
From: Khem Raj <raj.khem@gmail.com>
Date: Fri, 14 Dec 2018 06:44:02 -0800
Subject: [PATCH] getcpu01: Rename getcpu to avoid conflict with glibc >= 2.29

glibc has added getcpu() API starting with glibc 2.29 release, this
makes the static function in conflict and signatures are not same as
well.

Renaming helps to keep ltp build going

Upstream-Status: Submitted [http://lists.linux.it/pipermail/ltp/2018-December/010321.html]

Signed-off-by: Khem Raj <raj.khem@gmail.com>
---
 testcases/kernel/syscalls/getcpu/getcpu01.c | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/testcases/kernel/syscalls/getcpu/getcpu01.c b/testcases/kernel/syscalls/getcpu/getcpu01.c
index c927512ca..e850fe844 100644
--- a/testcases/kernel/syscalls/getcpu/getcpu01.c
+++ b/testcases/kernel/syscalls/getcpu/getcpu01.c
@@ -82,7 +82,7 @@ int sys_support = 0;
 
 void cleanup(void);
 void setup(void);
-static inline int getcpu(unsigned int *, unsigned int *, void *);
+static inline int get_cpu(unsigned int *, unsigned int *, void *);
 unsigned int set_cpu_affinity(void);
 unsigned int get_nodeid(unsigned int);
 unsigned int max_cpuid(size_t, cpu_set_t *);
@@ -124,7 +124,7 @@ int main(int ac, char **av)
 #ifdef __i386__
 		node_set = get_nodeid(cpu_set);
 #endif
-		TEST(getcpu(&cpu_id, &node_id, NULL));
+		TEST(get_cpu(&cpu_id, &node_id, NULL));
 		if (TEST_RETURN == 0) {
 			if (cpu_id != cpu_set) {
 				tst_resm(TFAIL, "getcpu() returned wrong value"
@@ -157,10 +157,10 @@ int main(int ac, char **av)
 }
 
 /*
- * getcpu() - calls the system call
+ * get_cpu() - calls the system call
  */
-static inline int getcpu(unsigned *cpu_id, unsigned *node_id,
-			 void *cache_struct)
+static inline int get_cpu(unsigned *cpu_id, unsigned *node_id,
+			  void *cache_struct)
 {
 #if defined(__i386__)
 	return syscall(318, cpu_id, node_id, cache_struct);
-- 
2.20.0

